/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 20:31:41 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.TextField;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.synth.SynthColorChooserUI;
import javax.swing.plaf.synth.SynthTabbedPaneUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtils;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalDataItem;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYZDataset;
import org.jfree.data.xy.YIntervalDataItem;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasetUtils_ESTest extends DatasetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = 262;
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 262);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 262, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = new Range(0, 0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, false);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range3);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(boolean0);
      
      Range range4 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range4);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range5 = Range.expandToInclude((Range) null, 0.0);
      assertTrue(range5.equals((Object)range0));
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertNotSame(range5, range0);
      assertNotNull(range5);
      
      Range range6 = DatasetUtils.iterateToFindZBounds(defaultXYZDataset0, arrayList0, range5, false);
      assertTrue(range5.equals((Object)range0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertNotSame(range5, range0);
      assertNull(range6);
      
      Range range7 = DatasetUtils.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range7);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      arrayList0.trimToSize();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((short)0));
      
      int int0 = Short.compare((short)53, (short)974);
      assertEquals((-921), int0);
      
      arrayList0.sort((Comparator<? super Short>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((short)0));
      
      XYZDataset xYZDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)4;
      byteArray0[6] = (byte)125;
      numberArray1[1] = (Number) bigInteger0;
      Float float0 = new Float((float) (byte) (-67));
      assertEquals((-67.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[2] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (byte)0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (byte)103;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) (byte)90;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) (byte) (-67);
      Float float1 = new Float((float) (byte)21);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(21.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      numberArray4[1] = (Number) float1;
      numberArray4[2] = (Number) (byte)125;
      byteArray0[5] = (byte)90;
      numberArray4[4] = (Number) (byte)4;
      numberArray4[5] = (Number) (byte)90;
      numberArray4[6] = (Number) (byte)90;
      numberArray4[7] = (Number) (byte)90;
      numberArray4[8] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("rowData", 1260, 1);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertEquals(1260, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertEquals(1260, matrixSeries0.getRowCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertEquals(1260, matrixSeries0.getRowCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1259.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = xYSeriesCollection0.equals((Object) null);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertFalse(boolean0);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(2767.08, range0.getLength(), 0.01);
      assertEquals((-1.1368683772161603E-13), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1383.5399999999997, range0.getUpperBound(), 0.01);
      assertEquals((-1383.54), range0.getLowerBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(range1.isNaNRange());
      assertEquals((-1.1102230246251565E-16), range1.getCentralValue(), 0.01);
      assertEquals(0.9999999999999998, range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(1.9999999999999998, range1.getLength(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2767.08, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.1368683772161603E-13), range0.getCentralValue(), 0.01);
      assertEquals((-1383.54), range0.getLowerBound(), 0.01);
      assertEquals(1383.5399999999997, range0.getUpperBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.1368683772161603E-13), range1.getCentralValue(), 0.01);
      assertEquals((-1383.54), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1383.5399999999997, range1.getUpperBound(), 0.01);
      assertEquals(2767.08, range1.getLength(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("", (-185), 23);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-541));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = hour1.compareTo(defaultBoxAndWhiskerXYDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, int0);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1.1368683772161603E-13), range0.getCentralValue(), 0.01);
      assertEquals((-1383.54), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1383.5399999999997, range0.getUpperBound(), 0.01);
      assertEquals(2767.08, range0.getLength(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2DToSeries(powerFunction2D0, 23, Double.POSITIVE_INFINITY, (-78), hour1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-1383.54), range0.getLowerBound(), 0.01);
      assertEquals(1383.5399999999997, range0.getUpperBound(), 0.01);
      assertEquals(2767.08, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1.1368683772161603E-13), range0.getCentralValue(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1383.54;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 31.5416;
      doubleArray2[1] = (double) 23;
      doubleArray2[2] = (double) 23;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 23;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (double) 23;
      doubleArray4[6] = 31.5416;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 23;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 31.5416;
      doubleArray6[2] = 1383.54;
      doubleArray6[3] = (double) 23;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 23;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = (double) 23;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 1383.54;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (double) 23;
      doubleArray9[1] = (double) 0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) hour0, (KeyedValues) defaultPieDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(9, doubleArray0.length);
      assertNotSame(hour0, hour1);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(9, doubleArray0.length);
      assertEquals(1383.54, (double)double0, 0.01);
      assertNotSame(hour0, hour1);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.previous();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(19, hour1.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      int int0 = hour0.getDayOfMonth();
      assertFalse(hour0.equals((Object)hour1));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(14, int0);
      assertNotSame(hour0, hour1);
      
      Hour hour2 = (Hour)hour0.next();
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour2.equals((Object)hour0));
      assertFalse(hour2.equals((Object)hour1));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour2.getFirstMillisecond());
      assertEquals(21, hour2.getHour());
      assertEquals(1392409281320L, hour2.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour0, hour2);
      assertNotSame(hour2, hour0);
      assertNotSame(hour2, hour1);
      assertNotNull(hour2);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("3*y_Akb7\"g)Z[b&0rdG", 1, 1477);
      assertEquals(1477, matrixSeries0.getColumnsCount());
      assertEquals(1477, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1477, matrixSeries0.getColumnsCount());
      assertEquals(1477, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0);
      assertEquals(1477, matrixSeries0.getColumnsCount());
      assertEquals(1477, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultCategoryDataset0.addValue((Number) Double.NEGATIVE_INFINITY, (Comparable) 0.0, (Comparable) double0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 52, 52, 5, 100);
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      assertEquals("Mon Jun 21 06:40:00 GMT 2004", mockDate0.toString());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1087800000000L, month0.getFirstMillisecond());
      assertEquals(6, month0.getMonth());
      assertEquals(2004, month0.getYearValue());
      assertEquals(1087800000000L, month0.getLastMillisecond());
      assertEquals(24054L, month0.getSerialIndex());
      assertNotNull(month0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(5, 5, month0, timeZone0);
      assertEquals("Mon Jun 21 06:40:00 GMT 2004", mockDate0.toString());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1087800000000L, month0.getFirstMillisecond());
      assertEquals(6, month0.getMonth());
      assertEquals(2004, month0.getYearValue());
      assertEquals(1087800000000L, month0.getLastMillisecond());
      assertEquals(24054L, month0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(4, dynamicTimeSeriesCollection0.getNewestIndex());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      long long0 = mockDate0.getTime();
      assertEquals("Mon Jun 21 06:40:00 GMT 2004", mockDate0.toString());
      assertEquals(1087800000000L, long0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 5, 1, 2, 100);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.roll(2, 992);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=1,WEEK_OF_YEAR=22,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=152,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      long long1 = month0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      assertFalse(long1 == long0);
      assertEquals("Mon Jun 21 06:40:00 GMT 2004", mockDate0.toString());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1087800000000L, month0.getFirstMillisecond());
      assertEquals(6, month0.getMonth());
      assertEquals(2004, month0.getYearValue());
      assertEquals(1087800000000L, month0.getLastMillisecond());
      assertEquals(24054L, month0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2004,MONTH=5,WEEK_OF_YEAR=22,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=152,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-62091174000000L), long1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) "", (double) 0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-250);
      doubleArray1[1] = (double) (-250);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-250);
      doubleArray1[4] = (double) (-250);
      defaultPieDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3508.4936;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-250);
      doubleArray4[2] = 3508.4936;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertTrue(histogramDataset0.getNotify());
      assertNotNull(histogramDataset0);
      
      boolean boolean1 = DatasetUtils.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertTrue(histogramDataset0.getNotify());
      assertTrue(boolean1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3508.4936);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(range0.isNaNRange());
      assertEquals(1754.2468, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3508.4936, range0.getUpperBound(), 0.01);
      assertEquals(3508.4936, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("", "", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) 3508.4936, (KeyedValues) defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(defaultCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-900.645075);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.8759779765426308E16);
      doubleArray2[1] = (-900.645075);
      doubleArray2[2] = (-900.645075);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-900.645075);
      doubleArray3[1] = (-1.8759779765426308E16);
      doubleArray3[2] = (-1.8759779765426308E16);
      doubleArray3[3] = (-1.8759779765426308E16);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = (-900.645075);
      doubleArray5[2] = (-900.645075);
      doubleArray5[3] = (-900.645075);
      doubleArray5[4] = (-1.8759779765426308E16);
      doubleArray5[5] = (-1.8759779765426308E16);
      doubleArray5[6] = (-900.645075);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = (-900.645075);
      doubleArray6[3] = (-1.8759779765426308E16);
      doubleArray6[4] = (-1.8759779765426308E16);
      doubleArray6[5] = (-900.645075);
      doubleArray0[5] = doubleArray6;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("0", "q'", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-900.645075), range0.getUpperBound(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1.0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(2767.08, range0.getLength(), 0.01);
      assertEquals((-1.1368683772161603E-13), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1383.5399999999997, range0.getUpperBound(), 0.01);
      assertEquals((-1383.54), range0.getLowerBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
      
      Double double0 = (Double)DatasetUtils.findMinimumDomainValue(xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals((-1.5), (double)double0, 0.01);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      System.setCurrentTimeMillis(53L);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      byte byte0 = (byte)13;
      Byte byte1 = Byte.valueOf((byte)13);
      assertEquals((byte)13, (byte)byte1);
      assertNotNull(byte1);
      
      byte byte2 = (byte)15;
      long long0 = Byte.toUnsignedLong((byte)15);
      assertEquals(15L, long0);
      
      boolean boolean0 = stack0.add(byte1);
      assertFalse(byte1.equals((Object)byte2));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[13]", stack0.toString());
      assertFalse(stack0.contains((byte)15));
      assertTrue(stack0.contains(byte1));
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      Range range0 = DatasetUtils.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, true);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[13]", stack0.toString());
      assertFalse(stack0.contains((byte)15));
      assertTrue(stack0.contains(byte1));
      assertNull(range0);
      
      int int0 = jDBCCategoryDataset0.getColumnCount();
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Week.parseWeek("OJ&p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)125;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)5501, bigInteger1.shortValue());
      assertEquals((byte)125, bigInteger1.byteValue());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)90, (byte)20, (byte)103, (byte)4, (byte)21, (byte)125}, byteArray0);
      assertNotNull(bigInteger1);
      
      numberArray1[1] = (Number) bigInteger1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (byte)103;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) (byte)90;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) (byte) (-67);
      Float float0 = new Float((float) (byte)21);
      assertEquals(21.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray4[1] = (Number) float0;
      numberArray4[2] = (Number) (byte)125;
      numberArray4[3] = (Number) (byte)90;
      numberArray4[4] = (Number) (byte)4;
      numberArray4[5] = (Number) (byte)21;
      numberArray4[6] = (Number) (byte)90;
      numberArray4[7] = (Number) (byte)90;
      numberArray4[8] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)125;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)5501, bigInteger1.shortValue());
      assertEquals((byte)125, bigInteger1.byteValue());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-67), (byte)20, (byte)103, (byte)4, (byte)21, (byte)125}, byteArray0);
      assertNotNull(bigInteger1);
      
      numberArray1[1] = (Number) bigInteger1;
      Float float0 = new Float((float) (byte) (-67));
      assertEquals((-67.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[2] = (Number) float0;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (byte)21;
      numberArray2[1] = (Number) bigInteger0;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) (byte)103;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) (byte) (-67);
      numberArray0[2] = numberArray3;
      Float float1 = new Float((float) (byte)21);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(21.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      numberArray0[3] = numberArray0[1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Double double1 = (Double)DatasetUtils.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double1, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) "", (double) 0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-250);
      doubleArray1[1] = (double) (-250);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-250);
      doubleArray1[4] = (double) (-250);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3508.4936;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-250);
      doubleArray4[2] = 3508.4936;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3508.4936);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtils.findZBounds((XYZDataset) defaultXYZDataset0, true);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(mockDate1);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-877.1843259230152), 1034.9011623502);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertFalse(vector0.contains(defaultOHLCDataset1));
      assertTrue(arrayList0.contains(defaultOHLCDataset1));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      boolean boolean2 = true;
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(defaultOHLCDataset1));
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumRangeValue((XYDataset) defaultOHLCDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)125;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)125, bigInteger1.byteValue());
      assertEquals((short)26493, bigInteger1.shortValue());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)90, (byte)20, (byte)103, (byte)4, (byte)103, (byte)125}, byteArray0);
      assertNotNull(bigInteger1);
      
      numberArray1[1] = (Number) bigInteger1;
      Float float0 = new Float((float) (byte) (-67));
      assertEquals((-67.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[2] = (Number) float0;
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (byte)103;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = (Number) (byte)90;
      numberArray0[2] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) (byte) (-67);
      Float float1 = new Float((float) (byte)103);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(103.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      numberArray3[1] = (Number) float1;
      numberArray3[2] = (Number) (byte)125;
      numberArray3[3] = (Number) (byte)90;
      numberArray3[4] = (Number) (byte)4;
      numberArray3[5] = (Number) (byte)103;
      numberArray3[6] = (Number) (byte)90;
      numberArray3[7] = (Number) (byte)90;
      numberArray3[8] = (Number) bigInteger0;
      numberArray0[3] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertEquals(126.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1144.036, range2.getLength(), 0.01);
      assertEquals((-619.518), range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals((-47.5), range2.getUpperBound(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(xYDatasetTableModel0);
      
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range3 = DatasetUtils.iterateZBounds((XYZDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range3);
      
      Range range4 = DatasetUtils.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.isNaNRange());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotNull(range4);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1, "K5X^EiA<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(histogramDataset0.getNotify());
      assertNotNull(histogramDataset0);
      
      HistogramDataset histogramDataset1 = (HistogramDataset)histogramDataset0.clone();
      assertTrue(histogramDataset1.equals((Object)histogramDataset0));
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(histogramDataset0.getNotify());
      assertEquals(HistogramType.FREQUENCY, histogramDataset1.getType());
      assertEquals(0, histogramDataset1.getSeriesCount());
      assertTrue(histogramDataset1.getNotify());
      assertNotSame(histogramDataset0, histogramDataset1);
      assertNotSame(histogramDataset1, histogramDataset0);
      assertNotNull(histogramDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findYValue(histogramDataset0, 9, (-1258.3319727434414));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1614.28671455928);
      doubleArray1[1] = (-860.88132545);
      doubleArray1[2] = 0.8;
      doubleArray1[3] = 912.3260962044006;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-860.88132545);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 912.3260962044006;
      doubleArray3[1] = 912.3260962044006;
      doubleArray3[2] = 912.3260962044006;
      doubleArray3[3] = 864.755133829297;
      doubleArray3[4] = 912.3260962044006;
      doubleArray3[5] = (-860.88132545);
      doubleArray3[6] = (-1614.28671455928);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1614.28671455928);
      doubleArray4[1] = (-860.88132545);
      doubleArray4[2] = (-1614.28671455928);
      doubleArray4[3] = (-2410.149661972);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 864.755133829297;
      doubleArray5[1] = (-1614.28671455928);
      doubleArray5[2] = (-860.88132545);
      doubleArray5[3] = 0.8;
      doubleArray5[4] = (-3514.6735269378564);
      doubleArray5[5] = (-2410.149661972);
      doubleArray5[6] = 864.755133829297;
      doubleArray5[7] = (-2410.149661972);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-860.88132545);
      doubleArray6[1] = 864.755133829297;
      doubleArray6[2] = (-1614.28671455928);
      doubleArray6[3] = (-2410.149661972);
      doubleArray6[4] = (-3514.6735269378564);
      doubleArray6[5] = (-2410.149661972);
      doubleArray6[6] = 0.8;
      doubleArray6[7] = (-1.0);
      doubleArray6[8] = (-2292.86270044089);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 912.3260962044006;
      doubleArray7[1] = 3508.4936;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 0.8;
      doubleArray7[4] = 0.8;
      doubleArray7[5] = (-2410.149661972);
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = (-1614.28671455928);
      doubleArray7[8] = (-3514.6735269378564);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4705.8622254);
      doubleArray1[1] = 3333.23528;
      doubleArray1[2] = 667.7776428433427;
      doubleArray1[3] = (-376.1765);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2575.839579;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2575.839579;
      doubleArray2[2] = 667.7776428433427;
      doubleArray2[3] = (-4705.8622254);
      doubleArray2[4] = 2575.839579;
      doubleArray2[5] = 3333.23528;
      doubleArray2[6] = 667.7776428433427;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 2575.839579;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-376.1765);
      doubleArray4[1] = 667.7776428433427;
      doubleArray4[2] = 3333.23528;
      doubleArray4[3] = 667.7776428433427;
      doubleArray4[4] = (-376.1765);
      doubleArray4[5] = (-4705.8622254);
      doubleArray4[6] = 667.7776428433427;
      doubleArray4[7] = (-4705.8622254);
      doubleArray4[8] = (-376.1765);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-4705.8622254);
      doubleArray5[1] = (-4705.8622254);
      doubleArray5[2] = (-376.1765);
      doubleArray5[3] = 2575.839579;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 667.7776428433427;
      doubleArray5[6] = (-376.1765);
      doubleArray5[7] = (-306.1021615929372);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-306.1021615929372);
      doubleArray7[1] = (-4705.8622254);
      doubleArray7[2] = 3333.23528;
      doubleArray7[3] = (-376.1765);
      doubleArray7[4] = (-1476.18105154839);
      doubleArray7[5] = (-4705.8622254);
      doubleArray0[6] = doubleArray7;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("series.default-prefix", "series.default-prefix", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3333.23528, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-4705.8622254), range0.getLowerBound(), 0.01);
      assertEquals((-686.3134727000001), range0.getCentralValue(), 0.01);
      assertEquals(8039.0975054, range0.getLength(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 59.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 59.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 59.0;
      doubleArray3[1] = 59.0;
      doubleArray3[2] = 59.0;
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("", "\"{gbUZ4l0[#", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNotNull(vectorSeriesCollection0);
      
      vectorSeriesCollection0.setNotify(true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      
      Number number0 = DatasetUtils.findMinimumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(number0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(range0);
      
      Number number1 = DatasetUtils.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(number1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      vectorSeriesCollection0.validateObject();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      
      boolean boolean0 = vectorSeriesCollection0.equals(categoryTableXYDataset0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtils.findDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(range1);
      
      Range range2 = DatasetUtils.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(range2);
      
      int int0 = 0;
      Vector<Double> vector0 = new Vector<Double>(0);
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) vector0, false);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNull(range3);
      
      Number number2 = DatasetUtils.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNull(number2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2626.732;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("", "", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2626.732, range0.getCentralValue(), 0.01);
      assertEquals(2626.732, range0.getUpperBound(), 0.01);
      assertEquals(2626.732, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) 2626.732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNull(range0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertTrue(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(range1.isNaNRange());
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("\"I5A", "\"I5A", "-h;GS");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("-h;GS", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("\"I5A", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("-h;GS", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("\"I5A", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("-h;GS", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("\"I5A", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(1, timePeriodValuesCollection1.getSeriesCount());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection1.getXPosition());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertNotNull(timePeriodValuesCollection1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findYValue(timePeriodValuesCollection0, 211, 0.8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Year year0 = new Year(554);
      assertEquals(554, year0.getYear());
      assertEquals(554L, year0.getSerialIndex());
      assertEquals("554", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createConsolidatedPieDataset((PieDataset) null, (Comparable) year0, 516.2110981, (-204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.setNotify(true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(true);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98), 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range2);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-891.98);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("`GNQTEGb%", "org.jfree.data.jdbc.JDBCCategoryDataset", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 59, 0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 59, 59, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      List list0 = new LinkedList<TimePeriodValuesCollection>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Range range1 = DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, true);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range1);
      
      Range range2 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range4);
      
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertNotNull(jDBCCategoryDataset0);
      
      Number number0 = DatasetUtils.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertNull(number0);
      
      numberArray2[1] = null;
      numberArray2[2] = (Number) 59;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("f", "", numberArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "";
      List<DefaultMultiValueCategoryDataset> list0 = null;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) "", (double) 0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-250);
      doubleArray1[1] = (double) (-250);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-250);
      doubleArray1[4] = (double) (-250);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3508.4936;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-250);
      doubleArray4[2] = 3508.4936;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3508.4936);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1440, "e/qk");
      assertEquals("java.util.SimpleTimeZone[id=e/qk,offset=1440,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("e/qk", simpleTimeZone0.getID());
      assertEquals(1440, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=e/qk,offset=1440,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("e/qk", simpleTimeZone0.getID());
      assertEquals(1440, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtils.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("java.util.SimpleTimeZone[id=e/qk,offset=1440,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("e/qk", simpleTimeZone0.getID());
      assertEquals(1440, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertTrue(histogramDataset0.getNotify());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findItemIndicesForX(histogramDataset0, (-2145682877), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(3255.076140739682, range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range1);
      
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem((-170.1275230978415), (-98.340836628978), 2.0, (-12.24116954), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(xYIntervalDataItem0);
      
      XYIntervalDataItem xYIntervalDataItem1 = (XYIntervalDataItem)xYIntervalDataItem0.clone();
      assertTrue(xYIntervalDataItem1.equals((Object)xYIntervalDataItem0));
      assertNotSame(xYIntervalDataItem0, xYIntervalDataItem1);
      assertNotSame(xYIntervalDataItem1, xYIntervalDataItem0);
      assertNotNull(xYIntervalDataItem1);
      
      Range range2 = DatasetUtils.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(1977.2806407396822, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) xYIntervalDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(254L);
      assertEquals(254L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = arrayList0.remove((Object) long0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = arrayList0.add(short0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((short)0));
      assertTrue(boolean1);
      
      arrayList0.sort((Comparator<? super Short>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((short)0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short)0, 2704, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2703, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2703, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(range0.isNaNRange());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateZBounds((XYZDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 3);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      defaultPieDataset1.setValue((Comparable) "", 1.7976931348623157E308);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D(normalDistributionFunction2D0, 0.0, 0.0, (-250), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2134.10318495));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals((-156.8225442103178), range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range1);
      
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem((-170.1275230978415), (-98.340836628978), 2.0, (-12.24116954), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(xYIntervalDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) xYIntervalDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = (-2856.08753947);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals((-2856.08753947), (double)double0, 0.01);
      assertNotNull(double0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("e/qk");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.addObservations(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      
      Number number0 = DatasetUtils.findMinimumDomainValue(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertNotNull(jDBCCategoryDataset0);
      
      Number number1 = DatasetUtils.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (-1.0);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3225.359257169);
      doubleArray2[1] = (-1.0);
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-3225.359257169);
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-3225.359257169);
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = (-3225.359257169);
      doubleArray4[8] = (-3225.359257169);
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-3225.359257169);
      doubleArray5[2] = (-3225.359257169);
      doubleArray5[3] = (-3225.359257169);
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-3225.359257169), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(mockDate1);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertNull(range0);
      
      Double double1 = (Double)DatasetUtils.findMinimumRangeValue((XYDataset) defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(59.0, (double)double1, 0.01);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(double1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, (Comparable) "", (double) 0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 3);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1144.036, range2.getLength(), 0.01);
      assertEquals((-619.518), range2.getCentralValue(), 0.01);
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals((-47.5), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = (-1191.536);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1191.536);
      doubleArray2[1] = (-1191.536);
      doubleArray2[2] = 56.39458;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-47.5);
      doubleArray2[5] = (-47.5);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-47.5);
      doubleArray3[1] = (-1191.536);
      doubleArray3[2] = (-1191.536);
      doubleArray3[3] = (-47.5);
      doubleArray3[4] = (-1191.536);
      doubleArray3[5] = (-47.5);
      doubleArray3[6] = 56.39458;
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("K5X^EiA<", "K5X^EiA<", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertEquals(56.39458, (double)double0, 0.01);
      assertNotNull(double0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1, "K5X^EiA<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(mockDate1);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-877.1843259230152), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      mockDate0.setTime(59);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotSame(mockDate0, mockDate1);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertNull(range0);
      
      Double double1 = (Double)DatasetUtils.findMinimumRangeValue((XYDataset) defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(double1);
      
      double double2 = DatasetUtils.findYValue(defaultOHLCDataset0, 59, 2626.732);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = new Range(0, 0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(boolean0);
      
      Range range4 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range4);
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<Short>) month0;
      comparableArray0[1] = (Comparable<Short>) month0;
      TimeSeries timeSeries0 = new TimeSeries(comparableArray0[1], "", "");
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(4, comparableArray0.length);
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(4, comparableArray0.length);
      assertNull(timeSeriesDataItem0);
      
      comparableArray0[2] = (Comparable<Short>) null;
      comparableArray0[3] = (Comparable<Short>) month0;
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 274.85252557872;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 274.85252557872;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 274.85252557872;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = 274.85252557872;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = 274.85252557872;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = 274.85252557872;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = Double.NaN;
      doubleArray8[3] = 274.85252557872;
      doubleArray8[4] = (double) 0;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-47.5);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 2305.24387239;
      doubleArray1[3] = (-47.5);
      doubleArray1[4] = (-1191.536);
      doubleArray1[5] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3737.34895217346);
      doubleArray2[1] = (-47.5);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-47.5);
      doubleArray2[4] = 2305.24387239;
      doubleArray2[5] = (-47.5);
      doubleArray2[6] = (-2.147483648E9);
      doubleArray2[7] = (-1018.1185);
      doubleArray2[8] = (-1191.536);
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("", "", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-2.1474836955E9), range0.getLowerBound(), 0.01);
      assertEquals(2305.24387239, range0.getUpperBound(), 0.01);
      assertEquals((-1.0737406951280638E9), range0.getCentralValue(), 0.01);
      assertEquals(2.147486000743872E9, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      boolean boolean0 = false;
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertFalse(range1.equals((Object)range0));
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(range1.isNaNRange());
      assertEquals((-1191.536), range1.getLowerBound(), 0.01);
      assertEquals((-1191.536), range1.getCentralValue(), 0.01);
      assertEquals((-1191.536), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expand(range1, (-1191.536), (-1191.536));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(range1.isNaNRange());
      assertEquals((-1191.536), range1.getLowerBound(), 0.01);
      assertEquals((-1191.536), range1.getCentralValue(), 0.01);
      assertEquals((-1191.536), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1191.536), range2.getCentralValue(), 0.01);
      assertEquals((-1191.536), range2.getUpperBound(), 0.01);
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      
      Range range3 = Range.expandToInclude(range1, (-47.5));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(range1.isNaNRange());
      assertEquals((-1191.536), range1.getLowerBound(), 0.01);
      assertEquals((-1191.536), range1.getCentralValue(), 0.01);
      assertEquals((-1191.536), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1144.036, range3.getLength(), 0.01);
      assertEquals((-619.518), range3.getCentralValue(), 0.01);
      assertEquals((-1191.536), range3.getLowerBound(), 0.01);
      assertEquals((-47.5), range3.getUpperBound(), 0.01);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range4 = DatasetUtils.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range4);
      
      boolean boolean0 = false;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String string0 = "K5X^EiA<";
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-47.5);
      doubleArray1[1] = (-47.5);
      doubleArray1[2] = (-1191.536);
      doubleArray1[3] = (-47.5);
      doubleArray1[4] = (-47.5);
      doubleArray1[5] = (-47.5);
      doubleArray1[6] = (-47.5);
      doubleArray1[7] = (-1191.536);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1191.536);
      doubleArray2[1] = (-1191.536);
      doubleArray2[2] = (-47.5);
      doubleArray2[3] = (-1191.536);
      doubleArray2[4] = (-47.5);
      doubleArray2[5] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray3[2] = (-1191.536);
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = (-47.5);
      doubleArray3[5] = (-47.5);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray4[1] = (-1191.536);
      doubleArray4[2] = (-47.5);
      doubleArray4[3] = (-1191.536);
      doubleArray4[4] = (-47.5);
      doubleArray4[5] = (-1191.536);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1191.536);
      doubleArray5[1] = (-1191.536);
      doubleArray5[2] = (-1191.536);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultTableXYDataset0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      assertTrue(boolean0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem((-170.1275230978415), (-98.340836628978), 2.0, (-12.24116954), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(xYIntervalDataItem0);
      
      Range range1 = DatasetUtils.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, 59);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      long long0 = minute1.getSerialIndex();
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(60026180L, long0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Range range0 = new Range(0.0, 59);
      assertEquals(59.0, range0.getLength(), 0.01);
      assertEquals(29.5, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 3);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByValues(sortOrder0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtils.sampleFunction2DToSeries(normalDistributionFunction2D0, (-2326.08797895343), 0.0, 280, double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(280, xYSeries0.getItemCount());
      assertEquals(0.1329807601338109, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-2326.08797895343), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(280, xYSeries0.getItemCount());
      assertEquals(0.1329807601338109, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-2326.08797895343), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findYValue(xYSeriesCollection0, 5, (-138.01));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals(1144.036, range2.getLength(), 0.01);
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals((-47.5), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-619.518), range2.getCentralValue(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection1).createStatement();
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotNull(range3);
      
      double double0 = DatasetUtils.findYValue(jDBCXYDataset0, 1358, (-1792.2442894));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range4 = DatasetUtils.findZBounds((XYZDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range4);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1, "K5X^EiA<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(1144.036, range2.getLength(), 0.01);
      assertEquals((-47.5), range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals((-619.518), range2.getCentralValue(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1, "K5X^EiA<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(number0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNull(range0);
      
      Range range1 = new Range(0, 0.0);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[4] = (Number) float0;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double1, 0.01);
      assertNotNull(double1);
      
      numberArray2[3] = (Number) double1;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = null;
      Float float1 = new Float((double) 0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      numberArray2[6] = (Number) float1;
      numberArray2[7] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = null;
      numberArray3[3] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = null;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotNull(mockDate1);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertNull(range0);
      
      Double double1 = (Double)DatasetUtils.findMinimumRangeValue((XYDataset) defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(double1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = new Range(0, 0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNull(range1);
      
      Range range2 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range3);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(boolean0);
      
      Range range4 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range4);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      timeSeriesCollection0.getDomainBounds((List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindZBounds(defaultXYZDataset0, arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.toUnsignedInt((short)0);
      assertEquals(0, int0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(short0));
      assertTrue(boolean0);
      
      Short short1 = new Short((short)4);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      assertNotNull(short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(short1));
      assertTrue(boolean1);
      
      arrayList0.sort((Comparator<? super Short>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(short1));
      
      XYZDataset xYZDataset0 = null;
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)4;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (short)4;
      doubleArray2[3] = (-2286.708103450677);
      doubleArray2[4] = (double) (short)0;
      doubleArray2[5] = (double) (short)0;
      doubleArray2[6] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (short)0;
      doubleArray4[1] = (double) (short)4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2286.708103450677);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (double) (short)4;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = (-2286.708103450677);
      doubleArray6[6] = (double) (short)0;
      doubleArray6[7] = (double) 0;
      doubleArray6[8] = (double) (short)4;
      doubleArray0[5] = doubleArray6;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("org.jfree.chart.util.ObjectUtils", "bJNo", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtils.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      XYDataItem xYDataItem0 = new XYDataItem(number0, number0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(xYDataItem0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 564.604);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNull(range1);
      
      Number number1 = DatasetUtils.findMinimumDomainValue(timePeriodValuesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      Range range2 = DatasetUtils.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      System.setCurrentTimeMillis((-702L));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      Hour hour0 = new Hour(date0, timeZone0, locale0);
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = Hour.parseHour("5Wk[R[wgl");
      assertNull(hour1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) hour0, (-1.0), (-3127));
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtils.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNull(range3);
      
      Double double1 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals((double)double1, (double)number1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)number0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotNull(double1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range4 = DatasetUtils.iterateZBounds((XYZDataset) defaultXYZDataset0);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range4);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<Double>) hour0;
      comparableArray0[1] = (Comparable<Double>) xYDataItem0;
      comparableArray0[2] = (Comparable<Double>) xYDataItem0;
      comparableArray0[3] = (Comparable<Double>) null;
      comparableArray0[4] = (Comparable<Double>) xYDataItem0;
      comparableArray0[5] = (Comparable<Double>) hour0;
      comparableArray0[6] = (Comparable<Double>) hour0;
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-702L);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-3127);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3795.9250435473828;
      doubleArray3[1] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) (-1);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 1977.2806407396822;
      doubleArray5[3] = 3795.9250435473828;
      doubleArray5[4] = (-2286.894);
      doubleArray5[5] = (double) 23;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = (double) 0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-1025.239841971);
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (-2286.894);
      doubleArray6[3] = 3795.9250435473828;
      doubleArray6[4] = (double) 23;
      doubleArray6[5] = (double) 23;
      doubleArray6[6] = (double) 0;
      doubleArray6[7] = 1977.2806407396822;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) (-3127);
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) (-1);
      doubleArray7[4] = 564.604;
      doubleArray7[5] = 564.604;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (double) (-702L);
      doubleArray8[1] = 3795.9250435473828;
      doubleArray8[2] = (double) (-3127);
      doubleArray8[3] = (double) (-3127);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      int[] intArray0 = DatasetUtils.findItemIndicesForX(matrixSeriesCollection0, 0, (-501.0));
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1277.7955, range0.getLowerBound(), 0.01);
      assertEquals(1277.7955, range0.getCentralValue(), 0.01);
      assertEquals(1277.7955, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(range1.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(3255.076140739682, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range1);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "";
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      matrixSeriesCollection0.validateObject();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.setNotify(false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(matrixSeriesCollection0.getNotify());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(matrixSeriesCollection0.getNotify());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      boolean boolean0 = matrixSeriesCollection0.equals(defaultKeyedValues2DDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(matrixSeriesCollection0.getNotify());
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertFalse(boolean0);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      defaultKeyedValues2DDataset0.addValue((-891.98126887651), (Comparable) vectorDataItem0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(891.98126887651, range2.getLength(), 0.01);
      assertEquals((-445.990634438255), range2.getCentralValue(), 0.01);
      assertEquals((-891.98126887651), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      Double double0 = (Double)DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals((-891.98126887651), (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range3);
      
      Number number0 = DatasetUtils.findMinimumDomainValue(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertFalse(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getNotify());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotNull(datasetGroup1);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, doubleArray0.length);
      assertNotSame(datasetGroup0, datasetGroup1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(3255.076140739682, range1.getUpperBound(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 59, 0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      Iterator<DefaultOHLCDataset> iterator0 = arrayList0.iterator();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 59, 59, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      Minute minute2 = Minute.parseMinute("");
      assertNull(minute2);
      
      Range range1 = DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, false);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNull(range3);
      
      Range range4 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<Short>) oHLCDataItem2;
      comparableArray0[1] = (Comparable<Short>) oHLCDataItem3;
      comparableArray0[2] = (Comparable<Short>) minute1;
      comparableArray0[3] = (Comparable<Short>) oHLCDataItem0;
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.setNotify(true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(true);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range2);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range3);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("`GNQTEGb%", "org.jfree.data.jdbc.JDBCCategoryDataset", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindZBounds(matrixSeriesCollection0, vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = (-1191.536);
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getNotify());
      assertEquals(DomainOrder.ASCENDING, simpleHistogramDataset0.getDomainOrder());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(1.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertTrue(defaultHeatMapDataset0.getNotify());
      assertEquals((-170.1275230978415), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals((-2134.10318495), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1242, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-1014.903386436), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(86.25949999999989, range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(3168.816640739682, range1.getLength(), 0.01);
      assertEquals(1670.6678203698411, range1.getCentralValue(), 0.01);
      assertEquals(3255.076140739682, range1.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotNull(range1);
      
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem((-170.1275230978415), (-98.340836628978), 2.0, (-2134.10318495), (-1191.536), (-1191.536));
      assertNotNull(xYIntervalDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) xYIntervalDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      ListIterator<DefaultOHLCDataset> listIterator0 = vector0.listIterator();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertNotNull(listIterator0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, 928.734258073, 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtils.sampleFunction2DToSeries(polynomialFunction2D0, (-999.0), (-332.168), 607, oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-332.168), xYSeries0.getMaxX(), 0.01);
      assertEquals(607, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-999.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(oHLCDataItem1, oHLCDataItem3);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotNull(xYSeries0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = DatasetUtils.findMaximumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(number0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtils.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) vector0, true);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((short)0));
      assertTrue(boolean0);
      
      Short short1 = new Short((short)4);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      assertNotNull(short1);
      
      boolean boolean1 = arrayList0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(short1));
      assertTrue(boolean1);
      
      arrayList0.sort((Comparator<? super Short>) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(short1));
      
      // Undeclared exception!
      try { 
        DatasetUtils.findZBounds((XYZDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-16.0);
      doubleArray1[1] = (-2477.5438786);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-16.0);
      doubleArray2[1] = 1773.7953506227316;
      doubleArray2[2] = (-16.0);
      doubleArray2[3] = (-2477.5438786);
      doubleArray2[4] = (-16.0);
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = (-16.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1773.7953506227316;
      doubleArray5[1] = (-16.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-16.0);
      doubleArray6[1] = (-16.0);
      doubleArray6[2] = (-2477.5438786);
      doubleArray6[3] = (-16.0);
      doubleArray6[4] = (-2477.5438786);
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = (-16.0);
      doubleArray6[7] = 398.48;
      doubleArray6[8] = (-16.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray7[1] = (-16.0);
      doubleArray7[2] = 398.48;
      doubleArray7[3] = (-2477.5438786);
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 59, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      timeSeriesCollection0.setNotify(false);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertFalse(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertFalse(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNull(range3);
      
      Range range4 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertFalse(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertNotNull(timeTableXYDataset0);
      
      Range range5 = DatasetUtils.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 3806.9);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertEquals(3806.9, range5.getCentralValue(), 0.01);
      assertEquals(3806.9, range5.getUpperBound(), 0.01);
      assertFalse(range5.isNaNRange());
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(3806.9, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(intervalXYDelegate0);
      
      defaultOHLCDataset1.removeChangeListener(intervalXYDelegate0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertFalse(vector0.contains(defaultOHLCDataset1));
      assertTrue(arrayList0.contains(defaultOHLCDataset1));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindDomainBounds(defaultOHLCDataset1, arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtils.calculateStackTotal((TableXYDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[0] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range1);
      
      Range range2 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 3);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D(normalDistributionFunction2D0, 0.0, 0.0, (-250), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "j7)KQ!v/Z'";
      int int0 = 2;
      MatrixSeries matrixSeries0 = new MatrixSeries("j7)KQ!v/Z'", 2, 2);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      boolean boolean0 = matrixSeries0.equals("j7)KQ!v/Z'");
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertFalse(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtils.iterateZBounds((XYZDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2DDataset0.removeColumn((Comparable) "j7)KQ!v/Z'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: j7)KQ!v/Z'
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Month month0 = new Month();
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Range range1 = timeSeriesCollection0.getRangeBounds((List) arrayList0, (Range) null, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getKeyCount(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XYBarDataset>) month0;
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 506);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(506, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      Range range1 = DatasetUtils.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(506, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range0);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(number0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range2 = DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(range2);
      
      Number number1 = DatasetUtils.findMinimumDomainValue(xYBarDataset0);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((XYDataset) xYBarDataset0);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(boolean0);
      
      Range range3 = DatasetUtils.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range2);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(number0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean0 = vector0.add(xIntervalSeriesCollection0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(vector0.contains(xIntervalSeriesCollection0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "j7)KQ!v/Z'";
      int int0 = 2;
      MatrixSeries matrixSeries0 = new MatrixSeries("j7)KQ!v/Z'", 2, 2);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      boolean boolean0 = matrixSeries0.equals("j7)KQ!v/Z'");
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertFalse(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateZBounds((XYZDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "Can't evaluate the week.";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Can't evaluate the week.", "", "");
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = (-584);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-584));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.sum(0, (-584));
      assertTrue(int1 == int0);
      assertEquals((-584), int1);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("Duplicate items in 'columnKeys'.", integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(100, (int)integer2);
      assertNotNull(integer2);
      
      defaultPieDataset1.setValue((Comparable) "", (Number) integer0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      defaultPieDataset1.setNotify(false);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) "Can't evaluate the week.", (KeyedValues) defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtils.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertTrue(range1.isNaNRange());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(range1);
      
      XYDataset xYDataset0 = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNull(range2);
      
      Range range3 = Range.expand(range1, 0, 6.283185307179586);
      assertFalse(range3.equals((Object)range1));
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertTrue(range1.isNaNRange());
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertTrue(range3.isNaNRange());
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      
      Range range4 = Range.expandToInclude((Range) null, (-584));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertEquals((-584.0), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-584.0), range4.getCentralValue(), 0.01);
      assertEquals((-584.0), range4.getUpperBound(), 0.01);
      assertFalse(range4.isNaNRange());
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotNull(range4);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2827.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2827.0);
      doubleArray2[1] = (-2827.0);
      doubleArray2[2] = (-2827.0);
      doubleArray2[3] = (-2827.0);
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3225.359257169);
      doubleArray3[1] = (-2827.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-3225.359257169);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-2827.0);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-3225.359257169);
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = (-3225.359257169);
      doubleArray5[7] = (-2827.0);
      doubleArray5[8] = (-3225.359257169);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-3225.359257169);
      doubleArray6[2] = (-3225.359257169);
      doubleArray6[3] = (-3225.359257169);
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-2827.0);
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(xYIntervalSeries0);
      
      xYIntervalSeriesCollection0.addSeries(xYIntervalSeries0);
      assertFalse(minute0.equals((Object)minute1));
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(1, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      int int0 = timeSeriesCollection0.indexOf(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(1, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtils.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(1, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(number0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotNull(month0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) month0, (KeyedValues) defaultKeyedValues0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultTableXYDataset0.indexOf(month0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals((-1), int0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Range range1 = timeSeriesCollection0.getRangeBounds((List) arrayList0, (Range) null, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range1);
      
      Range range2 = DatasetUtils.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623502);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = arrayList0.add(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      Double double0 = (Double)DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotNull(double0);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      double double0 = 852.8067745518008;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range1);
      
      Range range2 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNull(range2);
      
      Range range3 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range3);
      
      boolean boolean1 = DatasetUtils.isEmptyOrNull((PieDataset) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(3975.23, (-376.1765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, 1623.596);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertEquals(216.02999999999997, range2.getCentralValue(), 0.01);
      assertEquals(2815.132, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1623.596, range2.getUpperBound(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      
      Range range3 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertFalse(range3.isNaNRange());
      assertEquals(1144.036, range3.getLength(), 0.01);
      assertEquals((-47.5), range3.getUpperBound(), 0.01);
      assertEquals((-1191.536), range3.getLowerBound(), 0.01);
      assertEquals((-619.518), range3.getCentralValue(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      Number number0 = DatasetUtils.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNull(number0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.addTableModelListener((TableModelListener) null);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Number number0 = DatasetUtils.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      String string0 = "";
      int int0 = 483;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 483, 483);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      int int0 = xYDatasetTableModel0.getColumnCount();
      assertEquals(0, int0);
      
      Object object0 = xYDatasetTableModel0.getValueAt(0, 0);
      assertNull(object0);
      
      jDBCCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertTrue(jDBCCategoryDataset0.getNotify());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      int int1 = 7;
      Week week0 = new Week(7, 2569);
      assertEquals(136164L, week0.getSerialIndex());
      assertEquals(2569, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertFalse(week1.equals((Object)week0));
      assertEquals(136164L, week0.getSerialIndex());
      assertEquals(2569, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2569, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(136163L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      
      MockDate mockDate0 = (MockDate)week1.getStart();
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(136164L, week0.getSerialIndex());
      assertEquals(2569, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2569, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(136163L, week1.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(mockDate0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "", "");
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int2 = week0.compareTo(timePeriodValuesCollection0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(136164L, week0.getSerialIndex());
      assertEquals(2569, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, int2);
      assertNotSame(week0, week1);
      
      jDBCCategoryDataset0.setNotify(false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(jDBCCategoryDataset0.getNotify());
      
      jDBCCategoryDataset0.setValue((double) 0, (Comparable) week1, (Comparable) week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(jDBCCategoryDataset0.getNotify());
      assertEquals(136164L, week0.getSerialIndex());
      assertEquals(2569, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2569, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals(136163L, week1.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      int int3 = (-1619);
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-1619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindDomainBounds((XYDataset) null, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 1;
      int int1 = 2595;
      MatrixSeries matrixSeries0 = new MatrixSeries("[O~@p", 1, 2595);
      assertEquals(2595, matrixSeries0.getColumnsCount());
      assertEquals(2595, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2595, matrixSeries0.getColumnsCount());
      assertEquals(2595, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      List<XYBarDataset> list0 = null;
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(2595, matrixSeries0.getColumnsCount());
      assertEquals(2595, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, false);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range1);
      
      Range range2 = DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range2);
      
      Range range3 = DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNull(range3);
      
      Range range4 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-403));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-403), (-165.19566979430394));
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-403.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-165.19566979430394), simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(boolean0);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtils.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "g'Ge ++/i";
      String string1 = null;
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1939.504067062;
      doubleArray1[1] = (-927.103);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 522.0;
      doubleArray1[4] = 17.94;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("g'Ge ++/i", (String) null, doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 630;
      TimeSeries timeSeries0 = new TimeSeries("iOtRYRGz<7Ua#9{sF57");
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.time.SimpleTimePeriod", 5, 522);
      assertEquals(522, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2610, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(522, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2610, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(522, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2610, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 1076.8168111, false);
      assertFalse(range1.equals((Object)range0));
      assertEquals(522, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2610, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1080.8168111, range1.getUpperBound(), 0.01);
      assertEquals(1078.8168111, range1.getCentralValue(), 0.01);
      assertEquals(1076.8168111, range1.getLowerBound(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0, (List) arrayList0, range1, false);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(522, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2610, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(4.0, range0.getLength(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1080.8168111, range1.getUpperBound(), 0.01);
      assertEquals(1078.8168111, range1.getCentralValue(), 0.01);
      assertEquals(1076.8168111, range1.getLowerBound(), 0.01);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNull(range2);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(2124, 630, 5);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 2124 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = new YIntervalDataItem((-4257.73), 0.8, (-4257.73), 0.8);
      assertNotNull(yIntervalDataItem0);
      
      double double0 = yIntervalDataItem0.getYHighValue();
      assertEquals(0.8, double0, 0.01);
      
      Double double1 = yIntervalDataItem0.getX();
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-4257.73), (double)double1, 0.01);
      assertNotNull(double1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) null, (Comparable) yIntervalDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      xIntervalSeriesCollection0.removeAllSeries();
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = 33.98685;
      doubleArray1[2] = (-2002.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-883.575486754925);
      doubleArray1[5] = 903.925521;
      doubleArray1[6] = (-149.0);
      doubleArray1[7] = (-1318.919);
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-883.575486754925);
      doubleArray2[2] = 0.5;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-149.0);
      doubleArray3[2] = (-149.0);
      doubleArray3[3] = (-883.575486754925);
      doubleArray3[4] = 33.98685;
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("", "", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 2000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2000, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 29, 29);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(29, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(29, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(29, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(29, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtils.iterateZBounds((XYZDataset) defaultXYZDataset0, false);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.validateObject();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      Second second0 = new Second();
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) second0, (Comparable) second0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(number0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = (-2829);
      TaskSeries taskSeries0 = new TaskSeries("nN3F'");
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      assertNotNull(taskSeries0);
      
      taskSeriesCollection0.add(taskSeries0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2829), (-2829));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2829), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-2829), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2829), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-2829), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(range0);
      
      int int1 = 1919;
      Range range1 = DatasetUtils.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Hour hour0 = Hour.parseHour("5sd&F]U\"X5-rj");
      assertNull(hour0);
      
      Minute minute0 = null;
      try {
        minute0 = new Minute((-1296), (Hour) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hour' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Year year0 = new Year(1078);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1078", year0.toString());
      assertEquals(1078, year0.getYear());
      assertEquals(1078L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 9999);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) year0, (KeyedValues) defaultPieDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1078", year0.toString());
      assertEquals(1078, year0.getYear());
      assertEquals(1078L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 957;
      int int1 = 630;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XYZDataset xYZDataset0 = null;
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3473.07;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-841.27712);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3063.065246);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 3473.07;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-841.27712);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-3063.065246);
      doubleArray5[5] = (-841.27712);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 3473.07;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 3473.07;
      doubleArray7[4] = (-3063.065246);
      doubleArray7[5] = (-3063.065246);
      doubleArray7[6] = (-3877.925617964927);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 3473.07;
      doubleArray8[2] = 3473.07;
      doubleArray8[3] = (-841.27712);
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = defaultIntervalCategoryDataset0.hasListener(synthColorChooserUI0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertNotNull(timeTableXYDataset0);
      
      List<Long> list0 = null;
      boolean boolean0 = true;
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) timeTableXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 352;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 352, 352);
      assertEquals(352, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(352, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      slidingGanttCategoryDataset0.setMaximumCategoryCount(352);
      assertEquals(352, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(352, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      xYSeriesCollection0.setGroup(datasetGroup0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      String string0 = "X&&<]kc]LG;";
      int int0 = 559;
      MatrixSeries matrixSeries0 = new MatrixSeries("X&&<]kc]LG;", 1314, 559);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotNull(datasetGroup1);
      
      jDBCXYDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range0);
      
      double double0 = DatasetUtils.calculateStackTotal(jDBCXYDataset0, 0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      XYZDataset xYZDataset0 = null;
      List<DefaultIntervalXYDataset> list0 = null;
      int int0 = 120;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3509);
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(9, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(3509, spreadsheetDate0.toSerial());
      assertEquals(1909, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertNotNull(spreadsheetDate0);
      
      // Undeclared exception!
      try { 
        SerialDate.getPreviousDayOfWeek(59, (SerialDate) spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 87);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(86, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = DatasetUtils.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-883.575486754925));
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-883.575486754925), range0.getCentralValue(), 0.01);
      assertEquals((-883.575486754925), range0.getLowerBound(), 0.01);
      assertEquals((-883.575486754925), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 8);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) fixedMillisecond0;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotNull(regularTimePeriod0);
      
      comparableArray0[1] = (Comparable<DefaultIntervalXYDataset>) regularTimePeriod0;
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertFalse(month1.equals((Object)month0));
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotNull(month1);
      
      comparableArray0[2] = (Comparable<DefaultIntervalXYDataset>) month1;
      XYDataItem xYDataItem0 = new XYDataItem(870.29185, 0.0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(870.29185, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      comparableArray0[3] = (Comparable<DefaultIntervalXYDataset>) xYDataItem0;
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(1.0, 3905.0, 0.0, 0.0, (-1.0), 2605.42);
      assertNotNull(xYIntervalDataItem0);
      
      comparableArray0[4] = (Comparable<DefaultIntervalXYDataset>) xYIntervalDataItem0;
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(134.7636466489048, 870.29185);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(870.29185, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(134.7636466489048, simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      comparableArray0[5] = (Comparable<DefaultIntervalXYDataset>) simpleHistogramBin0;
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-462.2655254081114);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 198.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 198.9;
      doubleArray3[4] = 198.9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 198.9;
      doubleArray4[1] = 198.9;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertEquals(5, doubleArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.clear();
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int[] intArray0 = DatasetUtils.findItemIndicesForX(timeTableXYDataset0, 0, (-1805.1327104));
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertNotNull(intArray0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List list1 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      timeTableXYDataset0.setDomainIsPointsInTime(false);
      assertTrue(timeTableXYDataset0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      int int0 = matrixSeriesCollection0.indexOf(fixedMillisecond0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtils.iterateZBounds((XYZDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 660, 0);
      assertEquals(660, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Stack<TextField> stack0 = new Stack<TextField>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtils.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, false);
      assertEquals(660, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(1120, 2115, 1120, 1120, 0, 0);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jun 10 16:00:00 GMT 3199", mockDate0.toString());
      assertEquals(38797372800000L, year0.getLastMillisecond());
      assertEquals("3199", year0.toString());
      assertEquals(38797372800000L, year0.getFirstMillisecond());
      assertEquals(3199L, year0.getSerialIndex());
      assertEquals(3199, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      assertEquals("Thu Jun 10 16:00:00 GMT 3199", mockDate0.toString());
      assertEquals(38797372800000L, year0.getLastMillisecond());
      assertEquals("3199", year0.toString());
      assertEquals(38797372800000L, year0.getFirstMillisecond());
      assertEquals(3199L, year0.getSerialIndex());
      assertEquals(3199, year0.getYear());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeries0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("Thu Jun 10 16:00:00 GMT 3199", mockDate0.toString());
      assertEquals(38797372800000L, year0.getLastMillisecond());
      assertEquals("3199", year0.toString());
      assertEquals(38797372800000L, year0.getFirstMillisecond());
      assertEquals(3199L, year0.getSerialIndex());
      assertEquals(3199, year0.getYear());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findYValue(timeSeriesCollection0, 1120, 315.20724);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (1120).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = (-2309.81148);
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) null, (-2309.81148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.findYValue((XYDataset) null, 2, 3459.57303957292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum((-493), (-493));
      assertEquals((-986), int0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(int0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) defaultXYZDataset0, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem(0.0, 0.0, 0.0, (-1602.4713668));
      assertNotNull(vectorDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset("", "s84w@NBv>{w", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][0];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = (Number) integer0;
      numberArray0[3] = numberArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("DT+;L(@/k~rM KK:;", "DT+;L(@/k~rM KK:;", numberArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findItemIndicesForX(timePeriodValuesCollection0, 0, (-632.893949728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(matrixSeriesCollection1.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertNotNull(matrixSeriesCollection1);
      
      Range range0 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean0 = matrixSeriesCollection0.equals(timeTableXYDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range1);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-5007.6));
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.addChangeListener(xYBarDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      Range range2 = DatasetUtils.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.removeChangeListener(xYBarDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      boolean boolean1 = DatasetUtils.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(jDBCPieDataset0.getNotify());
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(boolean1);
      
      int int0 = (-4033);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-5398), (-4033));
      assertEquals((-4033), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-5398), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setMaximumCategoryCount((-5398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-496.34666);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-413.0104031);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 3030.89;
      doubleArray2[4] = (-413.0104031);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-413.0104031);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-496.34666);
      doubleArray4[3] = (-413.0104031);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 3030.89;
      doubleArray4[7] = 3030.89;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3030.89;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-413.0104031);
      doubleArray6[1] = (-413.0104031);
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 3030.89;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-413.0104031));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYZDataset xYZDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findZBounds((XYZDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 854.960547019;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 854.960547019;
      doubleArray2[1] = 854.960547019;
      doubleArray2[2] = 854.960547019;
      doubleArray2[3] = 854.960547019;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 854.960547019;
      doubleArray3[1] = 854.960547019;
      doubleArray3[2] = 854.960547019;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 854.960547019;
      doubleArray4[1] = 854.960547019;
      doubleArray4[2] = 854.960547019;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 854.960547019;
      doubleArray5[1] = 854.960547019;
      doubleArray5[2] = 854.960547019;
      doubleArray5[3] = 854.960547019;
      doubleArray5[4] = 854.960547019;
      doubleArray5[5] = 854.960547019;
      doubleArray5[6] = 854.960547019;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 854.960547019;
      doubleArray6[1] = 854.960547019;
      doubleArray6[2] = 854.960547019;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 854.960547019;
      doubleArray7[1] = 854.960547019;
      doubleArray7[2] = 854.960547019;
      doubleArray7[3] = 854.960547019;
      doubleArray7[4] = 854.960547019;
      doubleArray7[5] = 854.960547019;
      doubleArray7[6] = 854.960547019;
      doubleArray7[7] = 2025.1;
      doubleArray7[8] = 854.960547019;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 194);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range1);
      
      defaultKeyedValues2DDataset0.setNotify(false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      assertNotNull(vectorDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(range2);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertNull(number0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertFalse(defaultKeyedValues2DDataset0.getNotify());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtils.calculatePieDatasetTotal(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      CategoryDataset categoryDataset0 = null;
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertNotNull(month0);
      
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(month0, false, false);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertFalse(xIntervalSeries0.getAutoSort());
      assertEquals(0, xIntervalSeries0.getItemCount());
      assertNull(xIntervalSeries0.getDescription());
      assertTrue(xIntervalSeries0.getNotify());
      assertNotNull(xIntervalSeries0);
      
      // Undeclared exception!
      try { 
        xIntervalSeries0.getDataItem((-636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      defaultIntervalCategoryDataset0.setNotify(false);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      assertNull(range0);
      
      Number number0 = DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      matrixSeriesCollection0.addChangeListener(intervalXYDelegate0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      String string0 = "g3,aD%E";
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset("g3,aD%E", "g3,aD%E", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertTrue(defaultMultiValueCategoryDataset1.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNull(range0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) hour0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotNull(defaultPieDataset0);
      
      int int0 = 2886;
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("^GXFY+o", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Day day0 = Day.parseDay("$|)Lt");
      assertNull(day0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, 2743.30980514763);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Week week0 = new Week(2231, 2231);
      assertEquals((-73), week0.getWeek());
      assertEquals(2231, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(118170L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2231;
      doubleArray1[1] = (double) 2231;
      doubleArray1[2] = (double) 2231;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 2231.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtils.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-32.74354024084273), 0.0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-32.74354024084273), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNotNull(simpleHistogramBin0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, "TuBR3=ECg`cV", "TuBR3=ECg`cV");
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-32.74354024084273), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getRangeDescription());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-32.74354024084273), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getRangeDescription());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-32.74354024084273), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getRangeDescription());
      assertEquals("TuBR3=ECg`cV", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(5954L, 5954L);
      assertEquals(5954L, simpleTimePeriod0.getEndMillis());
      assertEquals(5954L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      String string0 = "8[0Ia&Y>={ab-pbN";
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset("8[0Ia&Y>={ab-pbN", "8[0Ia&Y>={ab-pbN", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("j7)KQ!v/Z'", 2, 2);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      boolean boolean0 = matrixSeries0.equals("j7)KQ!v/Z'");
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertFalse(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      Range range0 = DatasetUtils.iterateZBounds((XYZDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset0.getNotify());
      assertNull(number0);
      
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 3);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(2, 0, 7);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(7);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertNotNull(spreadsheetDate0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertNotNull(date0);
      
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2157.6285716806;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 1900;
      doubleArray0[7] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("j7)KQ!v/Z'", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 0.0, 2157.6285716806, 2.0, 1.0, 3.0, 1900.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(2, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertNotNull(minute1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-876.249367688655), 1034.9011623501592);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(minute1, oHLCDataItemArray0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.contains(defaultOHLCDataset0));
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) xYBarDataset0, (List) linkedList0, false);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long long0 = 110L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(110L);
      assertEquals(110L, fixedMillisecond0.getSerialIndex());
      assertEquals(110L, fixedMillisecond0.getLastMillisecond());
      assertEquals(110L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(110L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = "";
      String string1 = "CNels+";
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "CNels+");
      assertEquals(110L, fixedMillisecond0.getSerialIndex());
      assertEquals(110L, fixedMillisecond0.getLastMillisecond());
      assertEquals(110L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(110L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("CNels+", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Unknown 'category' key.", 0, 0, 0, 0, 0, 0, 0, 0);
      assertEquals("java.util.SimpleTimeZone[id=Unknown 'category' key.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Unknown 'category' key.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertEquals(110L, fixedMillisecond0.getSerialIndex());
      assertEquals(110L, fixedMillisecond0.getLastMillisecond());
      assertEquals(110L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(110L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("CNels+", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("java.util.SimpleTimeZone[id=Unknown 'category' key.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Unknown 'category' key.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0);
      assertTrue(boolean0);
      
      float float1 = Float.sum(110L, 110L);
      assertEquals(220.0F, float1, 0.01F);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(seriesChangeEvent0);
      
      timeSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(110L, fixedMillisecond0.getSerialIndex());
      assertEquals(110L, fixedMillisecond0.getLastMillisecond());
      assertEquals(110L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(110L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("CNels+", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("java.util.SimpleTimeZone[id=Unknown 'category' key.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Unknown 'category' key.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      
      boolean boolean1 = DatasetUtils.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertEquals(110L, fixedMillisecond0.getSerialIndex());
      assertEquals(110L, fixedMillisecond0.getLastMillisecond());
      assertEquals(110L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(110L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("CNels+", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("java.util.SimpleTimeZone[id=Unknown 'category' key.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Unknown 'category' key.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertNotNull(xYTaskDataset0);
      
      xYTaskDataset0.validateObject();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertNull(range0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4832.226966134729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-4832.226966134729)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D(polynomialFunction2D0, (-2827.0), 0.0, 0, (-4832.226966134729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DomainOrder domainOrder0 = matrixSeriesCollection0.getDomainOrder();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      Range range0 = DatasetUtils.iterateZBounds((XYZDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range1 = DatasetUtils.findZBounds((XYZDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range1);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4300.006081727326, 4300.006081727326);
      assertEquals(4300.006081727326, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4300.006081727326, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D(lineFunction2D0, 4300.006081727326, Double.POSITIVE_INFINITY, 1, domainOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset0.clone();
      assertTrue(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset1.getNotify());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotNull(slidingGanttCategoryDataset1);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertTrue(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNull(range0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Number number0 = DatasetUtils.findMinimumDomainValue(xYTaskDataset0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertNotNull(xIntervalSeriesCollection0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertNotNull(seriesChangeEvent0);
      
      xYTaskDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xIntervalSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2DToSeries(powerFunction2D0, 229.6458183926279, 0, 0, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 151;
      int int1 = (-1);
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.next();
      assertFalse(year1.equals((Object)year0));
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(151, (-1), year1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(dynamicTimeSeriesCollection0.getNotify());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "&SW*'#N,GM9";
      double[][] doubleArray0 = new double[0][9];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("9O", "&SW*'#N,GM9", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, doubleArray0.length);
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      SynthTabbedPaneUI synthTabbedPaneUI0 = new SynthTabbedPaneUI();
      assertNotNull(synthTabbedPaneUI0);
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertTrue(defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertFalse(defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertFalse(defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertNotNull(defaultTableCellRenderer_UIResource0);
      
      // Undeclared exception!
      try { 
        synthTabbedPaneUI0.uninstallUI(defaultTableCellRenderer_UIResource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.SwingUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotNull(regularTimePeriod0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 45, day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Year year0 = new Year(2372);
      assertEquals(2372, year0.getYear());
      assertEquals("2372", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2372L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.next();
      assertFalse(year1.equals((Object)year0));
      assertEquals(2372, year0.getYear());
      assertEquals("2372", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2372L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2373L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2373", year1.toString());
      assertEquals(2373, year1.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.sampleFunction2D((Function2D) null, (-2036.43033), (-2036.43033), 2372, year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1);
      
      LinkedHashSet<CategoryTableXYDataset> linkedHashSet0 = new LinkedHashSet<CategoryTableXYDataset>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Vector<CategoryTableXYDataset> vector1 = new Vector<CategoryTableXYDataset>();
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      boolean boolean2 = linkedHashSet0.addAll(vector1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertFalse(boolean2);
      
      boolean boolean3 = vector0.containsAll(linkedHashSet0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean3);
      
      boolean boolean4 = vector0.add((Object) null);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals("[null, null, null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-47.5), true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1239.036), range1.getCentralValue(), 0.01);
      assertEquals((-1239.036), range1.getLowerBound(), 0.01);
      assertEquals((-1239.036), range1.getUpperBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      Range range2 = Range.expandToInclude(range0, (-47.5));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(jDBCXYDataset0.getNotify());
      assertEquals((-1191.536), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1191.536), range0.getLowerBound(), 0.01);
      assertEquals((-1191.536), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1191.536), range2.getLowerBound(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(1144.036, range2.getLength(), 0.01);
      assertEquals((-619.518), range2.getCentralValue(), 0.01);
      assertEquals((-47.5), range2.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      
      List<DynamicTimeSeriesCollection> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
      
      double double0 = DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotNull(month0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset((Comparable) month0, (KeyedValues) defaultKeyedValues0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      assertNotNull(treeSet0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNull(range0);
      
      Range range1 = timeSeriesCollection0.getRangeBounds((List) arrayList0, (Range) null, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtils.findMaximumDomainValue(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[0][4];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset(";A$/j#", ";A$/j#", numberArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtils.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, numberArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 5);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(313, "IN9ZT4]G](v pGD7)u", 0, 0, 313, 0, 0, 0, 0, 313);
      assertEquals(313, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("IN9ZT4]G](v pGD7)u", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IN9ZT4]G](v pGD7)u,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=313,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=313,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Hour hour0 = new Hour(mockDate0, simpleTimeZone0, locale0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(313, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("IN9ZT4]G](v pGD7)u", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IN9ZT4]G](v pGD7)u,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=313,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=313,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.previous();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(313, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("IN9ZT4]G](v pGD7)u", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=IN9ZT4]G](v pGD7)u,offset=313,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=313,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=313,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) hour1;
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertNotNull(millisecond1);
      
      comparableArray0[1] = (Comparable<DefaultHighLowDataset>) millisecond1;
      // Undeclared exception!
      try { 
        Week.parseWeek("IN9ZT4]G](v pGD7)u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      double double0 = 1311.1;
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((TableXYDataset) null, 1311.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findRangeBounds((XYDataset) defaultXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNull(range0);
      
      Range range1 = DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNull(range1);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double double0 = 876.24;
      Range range2 = new Range(0, 876.24);
      assertEquals(876.24, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(438.12, range2.getCentralValue(), 0.01);
      assertEquals(876.24, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertNotNull(range2);
      
      Range range3 = DatasetUtils.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range2, false);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(DomainOrder.ASCENDING, timeSeriesCollection0.getDomainOrder());
      assertEquals(TimePeriodAnchor.START, timeSeriesCollection0.getXPosition());
      assertTrue(timeSeriesCollection0.getNotify());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(876.24, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(438.12, range2.getCentralValue(), 0.01);
      assertEquals(876.24, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset((Comparable) hour0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYZDataset xYZDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateZBounds((XYZDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtils.findRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertTrue(histogramDataset0.getNotify());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((XYDataset) histogramDataset0);
      assertEquals(HistogramType.FREQUENCY, histogramDataset0.getType());
      assertTrue(histogramDataset0.getNotify());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      XYZDataset xYZDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtils.iterateZBounds((XYZDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-403));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-403), (-165.19566979430394));
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-403.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-165.19566979430394), simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) simpleHistogramBin0, 0.0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-403.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-165.19566979430394), simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtils.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-403.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-165.19566979430394), simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-999L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("TimePeriodAnchor unknown.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Week week0 = new Week(date0, timeZone0, locale0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-1000L), week0.getLastMillisecond());
      assertEquals((-999L), week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 53, 1, 0.0, 2.0, 0.0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 0.0, 571.96965, 0.0, 0.0, 1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 0.0, (-292.0737), (-999L), (-1448.14), 0.8);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-292.0737), 439.0, 0.0, (-2396.7), 2.0);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 439.0, 0.0, 986.43348941788, 862.6134827260845, 0.0);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 3031.327065, 2373.52837, 439.0, 0.0, 0.0);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem5);
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, Double.NaN, 0.0, (-2021.5162299), (-1638.282101), Double.NaN);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem6);
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(date0, 0.0, 0.8, 0.0, 1.0, (-1.0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem7);
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      OHLCDataItem oHLCDataItem8 = new OHLCDataItem(date0, 53, 1818.6044016201702, (-1257.088), 862.6134827260845, 862.6134827260845);
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem7));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem6));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem8);
      
      oHLCDataItemArray0[8] = oHLCDataItem8;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-1000L), week0.getLastMillisecond());
      assertEquals((-999L), week0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-1000L), week0.getLastMillisecond());
      assertEquals((-999L), week0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertFalse(range0.isNaNRange());
      assertEquals((-999.0), range0.getUpperBound(), 0.01);
      assertEquals((-999.0), range0.getCentralValue(), 0.01);
      assertEquals((-999.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object[][][] objectArray0 = new Object[1][2][9];
      Object[][] objectArray1 = new Object[0][1];
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(1, objectArray0.length);
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtils.iterateDomainBounds((XYDataset) defaultWindDataset0, false);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(1, objectArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "rowData";
      String string1 = "";
      String string2 = "org.jfree.chart.HashUtils";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("rowData", "rowData", "", "org.jfree.chart.HashUtils");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1383.54, 1383.54);
      assertEquals(1383.54, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(hour1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtils.sampleFunction2D(powerFunction2D0, (-1.0), 1383.54, 999, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(xYSeriesCollection0);
      
      xYSeriesCollection0.setAutoWidth(false);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtils.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1383.54, powerFunction2D0.getB(), 0.01);
      assertEquals(1383.54, powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(range0.isNaNRange());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)125;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)125, bigInteger1.byteValue());
      assertEquals((short)5501, bigInteger1.shortValue());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)90, (byte)20, (byte)103, (byte)4, (byte)21, (byte)125}, byteArray0);
      assertNotNull(bigInteger1);
      
      numberArray1[1] = (Number) bigInteger1;
      Float float0 = new Float((float) (byte) (-67));
      assertEquals((-67.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[2] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (byte)21;
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (byte)103;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) (byte)90;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) (byte) (-67);
      Float float1 = new Float((float) (byte)21);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(21.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      numberArray4[1] = (Number) float1;
      numberArray4[2] = (Number) (byte)125;
      numberArray4[3] = (Number) (byte)90;
      numberArray4[4] = (Number) (byte)4;
      numberArray4[5] = (Number) (byte)21;
      numberArray4[6] = (Number) (byte)90;
      numberArray4[7] = (Number) (byte)90;
      numberArray4[8] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(matrixSeriesCollection1.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertNotNull(matrixSeriesCollection1);
      
      Range range0 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertTrue(timeTableXYDataset0.getNotify());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean0 = matrixSeriesCollection0.equals(timeTableXYDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(TimePeriodAnchor.START, timeTableXYDataset0.getXPosition());
      assertTrue(timeTableXYDataset0.getNotify());
      assertFalse(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      Range range1 = DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range1);
      
      boolean boolean1 = false;
      double double0 = (-5007.6);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-5007.6));
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      matrixSeriesCollection0.addChangeListener(xYBarDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      Range range2 = DatasetUtils.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNull(range2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.removeChangeListener(xYBarDataset0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-5007.6), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      
      boolean boolean2 = DatasetUtils.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, jDBCPieDataset0.getItemCount());
      assertTrue(jDBCPieDataset0.getNotify());
      assertTrue(boolean2);
      
      int int0 = (-4033);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-5398), (-4033));
      assertTrue(slidingGanttCategoryDataset0.getNotify());
      assertEquals((-4033), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-5398), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setMaximumCategoryCount((-5398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("rowData", 1260, 1);
      assertEquals(1260, matrixSeries0.getRowCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.setKey("rowData");
      assertEquals(1260, matrixSeries0.getRowCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1260, matrixSeries0.getRowCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtils.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1260, matrixSeries0.getRowCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1259.0, number0);
      assertNotNull(number0);
      
      Range range0 = DatasetUtils.findZBounds((XYZDataset) matrixSeriesCollection0);
      assertEquals(1260, matrixSeries0.getRowCount());
      assertEquals(1260, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2856.08753947);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("e/qk", "e/qk", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = (Double)DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtils.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNull(range0);
      
      Number number0 = DatasetUtils.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      XYDataItem xYDataItem0 = new XYDataItem(number0, number0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(xYDataItem0);
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 564.604);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNull(range1);
      
      Number number1 = DatasetUtils.findMinimumDomainValue(timePeriodValuesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(TimePeriodAnchor.MIDDLE, timePeriodValuesCollection0.getXPosition());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      Range range2 = DatasetUtils.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.isNaNRange());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      System.setCurrentTimeMillis((-702L));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertNotNull(defaultKeyedValuesDataset0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Hour hour0 = new Hour(date0, timeZone0, locale0);
      assertEquals(23, hour0.getHour());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = Hour.parseHour("5Wk[R[wgl");
      assertNull(hour1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) hour0, (-1.0), 0);
      assertEquals(23, hour0.getHour());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtils.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(23, hour0.getHour());
      assertEquals((-702L), hour0.getFirstMillisecond());
      assertEquals((-702L), hour0.getLastMillisecond());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtils.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertNull(range3);
      
      Double double1 = (Double)DatasetUtils.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals((double)double1, (double)number0, 0.01);
      assertEquals((double)double1, (double)number1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultMultiValueCategoryDataset0.getNotify());
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotNull(double1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNotNull(defaultXYZDataset0);
      
      Range range4 = DatasetUtils.iterateZBounds((XYZDataset) defaultXYZDataset0);
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertNull(range4);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<Double>) hour0;
      comparableArray0[1] = (Comparable<Double>) xYDataItem0;
      comparableArray0[2] = (Comparable<Double>) xYDataItem0;
      comparableArray0[3] = (Comparable<Double>) null;
      comparableArray0[4] = (Comparable<Double>) xYDataItem0;
      comparableArray0[5] = (Comparable<Double>) hour0;
      comparableArray0[6] = (Comparable<Double>) hour0;
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-702L);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 23;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3795.9250435473828;
      doubleArray3[1] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) (-1);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 1977.2806407396822;
      doubleArray5[3] = 3795.9250435473828;
      doubleArray5[4] = (-2286.894);
      doubleArray5[5] = (double) 23;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1025.239841971);
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (-2286.894);
      doubleArray6[3] = 3795.9250435473828;
      doubleArray6[4] = (double) 23;
      doubleArray6[5] = (double) 23;
      doubleArray6[6] = (double) 0;
      doubleArray6[7] = 1977.2806407396822;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (double) (-1);
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) (-1);
      doubleArray7[4] = 564.604;
      doubleArray7[5] = 564.604;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (double) (-702L);
      doubleArray8[1] = 3795.9250435473828;
      doubleArray8[3] = (double) 0;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2827.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2827.0);
      doubleArray2[1] = (-2827.0);
      doubleArray2[2] = (-2827.0);
      doubleArray2[3] = (-2827.0);
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3225.359257169);
      doubleArray3[1] = (-2827.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-3225.359257169);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-2827.0);
      doubleArray5[4] = (-3225.359257169);
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = (-3225.359257169);
      doubleArray5[7] = (-2827.0);
      doubleArray5[8] = (-3225.359257169);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-3225.359257169);
      doubleArray6[2] = (-3225.359257169);
      doubleArray6[3] = (-3225.359257169);
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-2827.0);
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtils.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1191.536);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1977.2806407396822;
      doubleArray1[3] = (-98.340836628978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1191.536));
      boolean boolean0 = true;
      DatasetUtils.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1242, 1, (-170.1275230978415), (-1014.903386436), (-2134.10318495), 1);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      defaultIntervalCategoryDataset0.clone();
      DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1277.7955);
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem((-170.1275230978415), (-98.340836628978), 2.0, (-12.24116954), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) xYIntervalDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      matrixSeriesCollection0.validateObject();
      matrixSeriesCollection0.setNotify(false);
      DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.setNotify(false);
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98126887651), 0.0);
      DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtils.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      Number number0 = DatasetUtils.findMinimumDomainValue(xYBarDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0.0);
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      matrixSeriesCollection0.removeChangeListener(xYBarDataset0);
      matrixSeriesCollection0.validateObject();
      matrixSeriesCollection0.setNotify(true);
      DatasetUtils.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtils.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.setNotify(true);
      VectorDataItem vectorDataItem0 = new VectorDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-891.98), 0.0);
      DatasetUtils.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) vectorDataItem0);
      DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      DatasetUtils.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-891.98);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("`GNQTEGb%", "org.jfree.data.jdbc.JDBCCategoryDataset", doubleArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 59, 0.0, (-376.1765));
      mockDate0.clone();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-1148.0), 0, 59, 59);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0.0, 1778.3268391108, 0, 852.8067745518008);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(regularTimePeriod0, oHLCDataItemArray0);
      arrayList0.add(defaultOHLCDataset0);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 0.0, 59, (-877.1843259230152), 1034.9011623502);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(regularTimePeriod0, oHLCDataItemArray0);
      arrayList0.add(defaultOHLCDataset1);
      DatasetUtils.findMaximumDomainValue(defaultOHLCDataset0);
      DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
      DatasetUtils.findMinimumRangeValue((XYDataset) defaultOHLCDataset1);
      // Undeclared exception!
      try { 
        DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>(vector0);
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      minute0.previous();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 59, 0, (-376.1765));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (-1148.0), 0, 59, 59);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1767.50427340353, 0, 1778.3268391108, 0, 852.8067745518008);
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 59, 59, 59, (-876.249367688655), 1034.9011623501592);
      DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      vector0.addAll((Collection<? extends DefaultOHLCDataset>) arrayList0);
      timeSeriesCollection0.getSeries();
      DatasetUtils.iterateToFindDomainBounds(timeSeriesCollection0, vector0, false);
      DatasetUtils.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtils.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      DatasetUtils.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) 0;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtils.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      numberArray2[1] = null;
      numberArray2[2] = (Number) 59;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtils.createCategoryDataset("f", "", numberArray0);
      assertTrue(defaultCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      Month month0 = new Month();
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      Range range0 = new Range(0, 0);
      DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, false);
      DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtils.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetGroup datasetGroup0 = new DatasetGroup("Unknown 'category' key.");
      timeSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtils.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      Number number0 = DatasetUtils.findMaximumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtils.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtils.calculateStackTotal(defaultTableXYDataset0, 0);
      Month month0 = new Month();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DatasetUtils.createCategoryDataset((Comparable) month0, (KeyedValues) defaultKeyedValues0);
      TreeSet<CategoryTableXYDataset> treeSet0 = new TreeSet<CategoryTableXYDataset>();
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>(treeSet0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      boolean boolean0 = true;
      intervalXYDelegate0.getDomainBounds(true);
      timeSeriesCollection0.getRangeBounds((List) arrayList0, (Range) null, true);
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "";
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.insertValue(0, (Comparable) "", (double) 0);
      PieDataset pieDataset0 = DatasetUtils.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (double) 0, 0);
      DatasetUtils.isEmptyOrNull(pieDataset0);
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-250);
      doubleArray1[1] = (double) (-250);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-250);
      doubleArray1[4] = (double) (-250);
      defaultPieDataset0.addChangeListener((DatasetChangeListener) null);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 3508.4936;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) (-250);
      doubleArray4[2] = 3508.4936;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtils.isEmptyOrNull((XYDataset) histogramDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(3508.4936);
      // Undeclared exception!
      try { 
        DatasetUtils.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtils.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtils.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Number number0 = DatasetUtils.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short)0);
      arrayList0.trimToSize();
      arrayList0.sort((Comparator<? super Short>) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtils.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) short0);
      // Undeclared exception!
      try { 
        DatasetUtils.iterateZBounds((XYZDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtils.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1191.536));
      Range.shift(range0, (-47.5), true);
      Range.expandToInclude(range0, (-47.5));
      jDBCXYDataset0.validateObject();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatasetUtils.findRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtils.findItemIndicesForX(jDBCXYDataset0, (-1779), (-47.5));
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 1);
      MockDate mockDate0 = new MockDate(1113, (-912), 1113);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      comparableArray0[0] = (Comparable<Byte>) year0;
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1113;
      doubleArray1[1] = (double) (-912);
      doubleArray1[2] = (double) 1113;
      doubleArray1[3] = (double) (-912);
      doubleArray1[4] = (double) 1113;
      doubleArray1[5] = (double) 1113;
      doubleArray1[6] = (double) (-912);
      doubleArray1[7] = (-47.5);
      doubleArray1[8] = (-1191.536);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1779);
      doubleArray2[1] = (-47.5);
      doubleArray2[2] = (-1191.536);
      doubleArray2[3] = (double) 9999;
      doubleArray2[4] = (double) 1113;
      doubleArray2[5] = (double) 1113;
      doubleArray2[6] = 122.63733832697;
      doubleArray2[7] = (double) (-912);
      doubleArray2[8] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-9999);
      doubleArray3[1] = (double) 1113;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) (-1779);
      doubleArray4[1] = (double) (-9999);
      doubleArray4[2] = (double) (-1779);
      doubleArray4[3] = (-47.5);
      doubleArray4[4] = 122.63733832697;
      doubleArray4[5] = (-47.5);
      doubleArray4[6] = (double) (-912);
      doubleArray4[7] = (double) 1113;
      doubleArray4[8] = (-1191.536);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtils.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtils", e);
      }
  }
}
