/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:25:11 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import java.awt.PaintContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.data.general.HeatMapDataset;
import org.jfree.data.general.HeatMapUtils;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeatMapUtils_ESTest extends HeatMapUtils_ESTest_scaffolding {
/*
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1140).when(heatMapDataset0).getXSampleCount();
      doReturn(1140).when(heatMapDataset0).getYSampleCount();
      doReturn((-1.0)).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      Paint paint0 = mock(Paint.class, new ViolatedAssumptionAnswer());
      doReturn((PaintContext) null).when(paint0).createContext(any(java.awt.image.ColorModel.class) , any(java.awt.Rectangle.class) , any(java.awt.geom.Rectangle2D.class) , any(java.awt.geom.AffineTransform.class) , anyMap());
      doReturn(0).when(paint0).getTransparency();
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn(paint0).when(paintScale0).getPaint(anyDouble());
      // Undeclared exception!
      try { 
        HeatMapUtils.createHeatMapImage(heatMapDataset0, paintScale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
*/
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(heatMapDataset0).getXSampleCount();
      doReturn(3).when(heatMapDataset0).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      HeatMapUtils.createHeatMapImage(heatMapDataset0, paintScale0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, 1, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-57)).when(heatMapDataset0).getYSampleCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 2656, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1850).when(heatMapDataset1).getXSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getXValue(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getZValue(anyInt() , anyInt());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, 2656, comparable1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-4231)).when(heatMapDataset0).getXSampleCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, 2432, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(132).when(heatMapDataset1).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getYValue(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getZValue(anyInt() , anyInt());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset1, 2432, comparable1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 1, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2943).when(heatMapDataset1).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getYValue(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getZValue(anyInt() , anyInt());
      int int0 = (-2669);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset1, (-2669), comparable1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-29)).when(heatMapDataset0).getYSampleCount();
      int int0 = (-1212);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, (-1212), comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getXSampleCount();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, (-29), comparable1);
      HeatMapDataset heatMapDataset2 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(heatMapDataset2).getXSampleCount();
      doReturn(1675).when(heatMapDataset2).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset2).getZValue(anyInt() , anyInt());
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      // Undeclared exception!
      HeatMapUtils.createHeatMapImage(heatMapDataset2, paintScale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(heatMapDataset0).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getYValue(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(heatMapDataset0).getXSampleCount();
      doReturn(0.0, 0.0).when(heatMapDataset0).getXValue(anyInt());
      doReturn(0.0, 0.0).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      int int0 = 4057;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, 4057, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(heatMapDataset1).getXSampleCount();
      doReturn(4057).when(heatMapDataset1).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset1).getZValue(anyInt() , anyInt());
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      // Undeclared exception!
      HeatMapUtils.createHeatMapImage(heatMapDataset1, paintScale0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 1, 1);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getXSampleCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, 1, comparable0);
      HeatMapDataset heatMapDataset2 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset2).getYSampleCount();
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset2, 665, 665);
      HeatMapDataset heatMapDataset3 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset3).getXSampleCount();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset3, 1, comparable1);
      HeatMapDataset heatMapDataset4 = null;
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HeatMapUtils.createHeatMapImage((HeatMapDataset) null, paintScale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      int int0 = 2569;
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 2569, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getXSampleCount();
      int int0 = 0;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, 0, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getYSampleCount();
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset1, 0, 0);
      HeatMapDataset heatMapDataset2 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = null;
      // Undeclared exception!
      try { 
        HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset2, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = null;
      int int0 = (-5196);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HeatMapUtils.extractRowFromHeatMapDataset((HeatMapDataset) null, (-5196), comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.HeatMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, (-1), comparable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = null;
      int int0 = (-3657);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HeatMapUtils.extractColumnFromHeatMapDataset((HeatMapDataset) null, (-3657), comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.HeatMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      int int0 = 0;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 0, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getXSampleCount();
      int int1 = 0;
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, 0, comparable1);
      HeatMapDataset heatMapDataset2 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset2).getYSampleCount();
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset2, 0, comparable2);
      HeatMapDataset heatMapDataset3 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset3).getXSampleCount();
      doReturn(0).when(heatMapDataset3).getYSampleCount();
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HeatMapUtils.createHeatMapImage(heatMapDataset3, paintScale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        HeatMapUtils.extractColumnFromHeatMapDataset((HeatMapDataset) null, (-829), (-829));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.HeatMapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getXSampleCount();
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getXSampleCount();
      doReturn(0).when(heatMapDataset0).getYSampleCount();
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HeatMapUtils.createHeatMapImage(heatMapDataset0, paintScale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(heatMapDataset0).getXSampleCount();
      doReturn(199).when(heatMapDataset0).getYSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      doReturn((Paint) null, (Paint) null, (Paint) null, (Paint) null, (Paint) null).when(paintScale0).getPaint(anyDouble());
      HeatMapUtils.createHeatMapImage(heatMapDataset0, paintScale0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getYSampleCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYDataset xYDataset0 = HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset1, 3770, comparable0);
      assertEquals(1, xYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(30).when(heatMapDataset0).getXSampleCount();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getXValue(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, 504, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getXSampleCount();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset1, 30, comparable1);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaintScale paintScale0 = mock(PaintScale.class, new ViolatedAssumptionAnswer());
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset0).getXSampleCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractRowFromHeatMapDataset(heatMapDataset0, (-1), comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(heatMapDataset1).getXSampleCount();
      doReturn(0).when(heatMapDataset1).getYSampleCount();
      // Undeclared exception!
      try { 
        HeatMapUtils.createHeatMapImage(heatMapDataset1, paintScale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HeatMapDataset heatMapDataset0 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
      doReturn(171).when(heatMapDataset0).getYSampleCount();
      doReturn((double)171, 1.0, 5353.215401322051, 1.0, Double.POSITIVE_INFINITY).when(heatMapDataset0).getYValue(anyInt());
      doReturn(1.0, 1.0, 0.0, 5567.940700744, (-1.0)).when(heatMapDataset0).getZValue(anyInt() , anyInt());
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HeatMapUtils.extractColumnFromHeatMapDataset(heatMapDataset0, 2649, comparable0);
      HeatMapDataset heatMapDataset1 = mock(HeatMapDataset.class, new ViolatedAssumptionAnswer());
  }
}
