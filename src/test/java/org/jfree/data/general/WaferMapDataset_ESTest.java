/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:03:26 GMT 2019
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.WaferMapDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WaferMapDataset_ESTest extends WaferMapDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = new Float((float) 21);
      assertEquals(21.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(21, 21, float0);
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      boolean boolean0 = waferMapDataset0.isMinValue(float0);
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertTrue(boolean0);
      
      float float1 = Float.sum(21, 21);
      assertEquals(42.0F, float1, 0.01F);
      
      waferMapDataset0.addValue(172, 172, 172);
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(21, int0);
      
      waferMapDataset0.validateObject();
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      waferMapDataset0.addValue(21, 21, (-1946));
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      waferMapDataset0.setValue(float0, float0, float0);
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(21, waferMapDataset0.getMaxChipY());
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(172.0, number0);
      assertNotNull(number0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValueCount();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), double0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addChangeListener(datasetChangeListener0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setChipSpace((-1334.8825));
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      
      double double1 = Double.sum((-2262.85), 0.0);
      assertEquals((-2262.85), double1, 0.01);
      
      waferMapDataset0.addValue((-1), (-1), (-1));
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      double double2 = waferMapDataset0.getChipSpace();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1334.8825), double2, 0.01);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((-1), int0);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double2));
      assertEquals((-1.0), number0);
      assertNotNull(number0);
      
      waferMapDataset0.addValue((-1), (-1), (-1));
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(number1.equals((Object)double1));
      assertFalse(number1.equals((Object)double2));
      assertEquals((-1.0), number1);
      assertNotNull(number1);
      
      Number number2 = waferMapDataset0.getChipValue((-1), (-1));
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertFalse(number2.equals((Object)double1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)double0));
      assertFalse(number2.equals((Object)double2));
      assertTrue(number2.equals((Object)number1));
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((-1.0), number2);
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.max((-1), 494.49261310378716);
      assertEquals(494.49261310378716, double1, 0.01);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), double0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(waferMapDataset0);
      
      double double2 = Double.max((-1.0), 494.49261310378716);
      assertEquals(double2, double1, 0.01);
      assertEquals(494.49261310378716, double2, 0.01);
      
      boolean boolean0 = Double.isFinite((-1));
      assertTrue(boolean0);
      
      double double3 = Double.max(0.0, 494.49261310378716);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(494.49261310378716, double3, 0.01);
      
      double double4 = Double.sum(494.49261310378716, (-1.0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(493.49261310378716, double4, 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.setChipSpace(1069.380091);
      assertEquals(1069.380091, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.setChipSpace((-1334.8825));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(set0);
      
      double double5 = Double.sum(494.49261310378716, (-1366.88901));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-872.396396896213), double5, 0.01);
      
      double double6 = Double.sum((-2262.85), 0.0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals((-2262.85), double6, 0.01);
      
      waferMapDataset0.addValue((-1), (-1584), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1334.8825), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((-1), int0);
      
      waferMapDataset0.setChipSpace((-1.0));
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.setMaxChipY((-258));
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-258), waferMapDataset0.getMaxChipY());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.setMaxChipY((-1));
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      double double7 = waferMapDataset0.getChipSpace();
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals((-1.0), double7, 0.01);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double7, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      waferMapDataset0.setChipSpace(2774.8);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2774.8, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double7, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2774.8, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double7, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(number0.equals((Object)double2));
      assertTrue(number0.equals((Object)double7));
      assertFalse(number0.equals((Object)double3));
      assertFalse(number0.equals((Object)double6));
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double4));
      assertFalse(number0.equals((Object)double5));
      assertEquals((-1.0), number0);
      assertNotNull(number0);
      
      waferMapDataset0.addValue(643, (-1), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2774.8, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double7, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Number number1 = waferMapDataset0.getChipValue((-1), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2774.8, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double6, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double7, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(number1.equals((Object)double2));
      assertFalse(number1.equals((Object)double3));
      assertFalse(number1.equals((Object)double6));
      assertFalse(number1.equals((Object)double7));
      assertFalse(number1.equals((Object)double5));
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)double1));
      assertFalse(number1.equals((Object)double4));
      assertFalse(number1.equals((Object)number0));
      assertEquals(643.0, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-694), double0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setValue(double0, double0, double0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setMaxChipX(0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      
      Double double1 = (Double)waferMapDataset0.getChipValue(0, 0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      waferMapDataset0.setValue(double0, double0, double0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double1, 0.01);
      
      double double2 = waferMapDataset0.getChipSpace();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      waferMapDataset0.setChipSpace(6.54020364374);
      assertEquals(6.54020364374, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      
      Number number0 = waferMapDataset0.getChipValue((-157), (-157));
      assertEquals(6.54020364374, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertNull(number0);
      
      Double double3 = (Double)waferMapDataset0.getChipValue((Comparable) double1, (Comparable) double0);
      assertEquals(6.54020364374, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)double2, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      Double double0 = new Double((-1292.1372427));
      assertEquals((-1292.1372427), (double)double0, 0.01);
      assertNotNull(double0);
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number0 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1292.1372427), number0);
      assertNotNull(number0);
      
      boolean boolean0 = Double.isFinite(0);
      assertTrue(boolean0);
      
      waferMapDataset0.validateObject();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      boolean boolean1 = Double.isFinite((-2026));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = Double.max(7191.457086748569, 826.9654046995186);
      assertEquals(7191.457086748569, double1, 0.01);
      
      waferMapDataset0.setMaxChipX((-2026));
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      boolean boolean2 = waferMapDataset0.isMaxValue(double0);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Number number1 = waferMapDataset0.getChipValue((-2733), (-2733));
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number1);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, int0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setMaxChipY(0);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setValue(double0, double0, comparable0);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.addValue((-5792), 0, 1);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number2 = waferMapDataset0.getChipValue(0, 3481);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number2);
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean3 = waferMapDataset0.isMinValue(float0);
      assertEquals((-2026), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double0, 0.01);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number1 = waferMapDataset0.getChipValue(comparable0, comparable0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number1);
      
      Number number2 = waferMapDataset0.getMinValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)double0));
      assertEquals(Double.POSITIVE_INFINITY, number2);
      assertNotNull(number2);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, int0);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number3 = waferMapDataset0.getMaxValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(number3.equals((Object)double0));
      assertFalse(number3.equals((Object)number2));
      assertEquals(Double.NEGATIVE_INFINITY, number3);
      assertNotNull(number3);
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      Integer integer0 = Integer.getInteger("rowKey", 5);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      waferMapDataset0.addValue(number3, (Comparable) integer0, (Comparable) "rowKey");
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(number3.equals((Object)double2));
      assertFalse(number3.equals((Object)double0));
      assertFalse(number3.equals((Object)number2));
      assertFalse(number3.equals((Object)double1));
      
      Number number4 = waferMapDataset0.getChipValue((Comparable) integer0, (Comparable) integer0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNull(number4);
      
      waferMapDataset0.setMaxChipY((-1));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(0, 0, (-1215));
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = waferMapDataset0.hasListener(eventListener0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(boolean0);
      
      int int2 = (-808);
      waferMapDataset0.setMaxChipY((-808));
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-808), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int3 = waferMapDataset0.getMaxChipY();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = waferMapDataset0.getUniqueValueCount();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setChipSpace(1128.732284855934);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1128.732284855934, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setMaxChipY((-993));
      assertEquals((-993), waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1128.732284855934, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapDataset0.getChipValue((Comparable) null, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1);
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), double0);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setNotify(true);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      
      double double1 = Double.min((-1), 141.26139726);
      assertEquals((-1.0), double1, 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addChangeListener(datasetChangeListener0);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      
      double double2 = Double.max((-1694.17104), 141.26139726);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(141.26139726, double2, 0.01);
      
      boolean boolean0 = Double.isFinite((-1));
      assertTrue(boolean0);
      
      Number number0 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNull(number0);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double3 = waferMapDataset0.getChipSpace();
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, (Comparable) double0, (Comparable) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-646));
      assertEquals((-646.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(4793, (-646), double0);
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      assertEquals(4793, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      assertEquals(4793, waferMapDataset0.getMaxChipX());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      waferMapDataset0.setMaxChipX((-1));
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertEquals(Double.POSITIVE_INFINITY, number1);
      assertNotNull(number1);
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals((-646.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-646), waferMapDataset0.getMaxChipY());
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-646.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-694), double0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setValue(double0, double0, double0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Number number0 = waferMapDataset0.getChipValue(0, 0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(number0.equals((Object)double0));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      waferMapDataset0.setValue(double0, double0, double0);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)number0, 0.01);
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)number0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      waferMapDataset0.setChipSpace(6.54020364374);
      assertEquals((-694), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(6.54020364374, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)number0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-2380));
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.validateObject();
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, int0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals((-2380), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setChipSpace(0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      
      Number number0 = null;
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setChipSpace(0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setNotify(true);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, int0);
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(0, 0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = Double.max(0.0, 0);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      double double3 = Double.min(0.0, 0.8);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = Double.max(0.0, 0.0);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = Double.sum(0.0, 0.0);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = Double.sum(0.0, 0.0);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      boolean boolean0 = waferMapDataset0.isMinValue(double0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertEquals((double)double0, (double)double4, 0.01);
      assertEquals((double)double0, (double)double5, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double6, 0.01);
      assertFalse(boolean0);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(number0.equals((Object)double1));
      assertTrue(number0.equals((Object)double5));
      assertTrue(number0.equals((Object)double0));
      assertTrue(number0.equals((Object)double2));
      assertTrue(number0.equals((Object)double6));
      assertTrue(number0.equals((Object)double3));
      assertTrue(number0.equals((Object)double4));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(number1.equals((Object)double3));
      assertTrue(number1.equals((Object)double2));
      assertTrue(number1.equals((Object)double6));
      assertTrue(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)double4));
      assertTrue(number1.equals((Object)double1));
      assertTrue(number1.equals((Object)double5));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setMaxChipY(723);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(723, waferMapDataset0.getMaxChipY());
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(723, waferMapDataset0.getMaxChipY());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(723, waferMapDataset0.getMaxChipY());
      assertFalse(int1 == int0);
      assertEquals(723, int1);
      
      int int2 = waferMapDataset0.getUniqueValueCount();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(723, waferMapDataset0.getMaxChipY());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      waferMapDataset0.setMaxChipX(2730);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(723, waferMapDataset0.getMaxChipY());
      assertEquals(2730, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2730, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-450), integer0);
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = Integer.compare(0, (-913));
      assertEquals(1, int0);
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int0));
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(integer0.equals((Object)int0));
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals("NOID", datasetGroup0.getID());
      assertFalse(integer0.equals((Object)int0));
      
      waferMapDataset0.setMaxChipX((-450));
      assertEquals((-450), waferMapDataset0.getMaxChipX());
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(integer0.equals((Object)int0));
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals((-450), waferMapDataset0.getMaxChipX());
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      
      waferMapDataset0.setValue(number0, integer0, integer0);
      assertEquals((-450), waferMapDataset0.getMaxChipX());
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(number0.equals((Object)double0));
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-450), waferMapDataset0.getMaxChipX());
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(set0);
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int0));
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(number1.equals((Object)double0));
      assertEquals(Double.NEGATIVE_INFINITY, number1);
      assertNotNull(number1);
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-450), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = waferMapDataset0.isMaxValue(integer0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      int int3 = waferMapDataset0.getMaxChipX();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-1335));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue(0, (-1335));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number0);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1335), int0);
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.sum(0.0, 2132.6);
      assertEquals(2132.6, double1, 0.01);
      
      double double2 = Double.max(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      boolean boolean0 = Double.isFinite((-1335));
      assertTrue(boolean0);
      
      Number number1 = waferMapDataset0.getChipValue((-1335), (-1335));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number1);
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      
      double double3 = Double.sum((-395.500722223), 0.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-395.500722223), double3, 0.01);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Number number2 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals((-1335), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertFalse(number2.equals((Object)double3));
      assertFalse(number2.equals((Object)double2));
      assertFalse(number2.equals((Object)double1));
      assertEquals(Double.NEGATIVE_INFINITY, number2);
      assertNotNull(number2);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue((Number) null, double0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-3236));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3236), waferMapDataset0.getMaxChipY());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.divideUnsigned((-2617), (-1));
      assertEquals(0, int0);
      
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      int int1 = Integer.max((-3236), (-3236));
      assertFalse(int1 == int0);
      assertEquals((-3236), int1);
      
      int int2 = 0;
      int int3 = Integer.compareUnsigned(0, (-3236));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      waferMapDataset0.setNotify(true);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3236), waferMapDataset0.getMaxChipY());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      int int4 = Integer.max(0, 0);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      boolean boolean0 = waferMapDataset0.isMinValue(integer0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3236), waferMapDataset0.getMaxChipY());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      waferMapDataset0.setMaxChipY((-1));
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      int int5 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float((-2741.8F));
      assertEquals((-2741.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(4505, 4505, float0);
      assertEquals((-2741.800048828125), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(4505, waferMapDataset0.getMaxChipX());
      assertEquals(4505, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) float0, (Comparable) float0, (Comparable) float0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1);
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), float0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      float float1 = Float.sum((-1), (-1));
      assertEquals((-2.0F), float1, 0.01F);
      
      float float2 = Float.min(0.0F, (-2.0F));
      assertEquals(float2, float1, 0.01F);
      assertEquals((-2.0F), float2, 0.01F);
      
      float float3 = (-2601.3F);
      float float4 = Float.min((-1), (-2601.3F));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals((-2601.3F), float4, 0.01F);
      
      float float5 = Float.sum((-2601.3F), (-2601.3F));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals((-5202.6F), float5, 0.01F);
      
      int int1 = 0;
      waferMapDataset0.fireDatasetChanged();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      int int2 = (-1);
      Number number0 = waferMapDataset0.getChipValue(0, (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMaxValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, float0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2279), (-2279));
      assertEquals((-2279), waferMapDataset0.getMaxChipY());
      assertEquals((-2279), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = waferMapDataset0.isMaxValue(double0);
      assertEquals((-2279), waferMapDataset0.getMaxChipY());
      assertEquals((-2279), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1196);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1196), (-1196));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1196), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1196), waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      int int1 = 1011;
      Integer integer0 = new Integer((-1196));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1196), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(integer0, integer0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setChipSpace(2215.615);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      waferMapDataset0.setMaxChipY(1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      boolean boolean0 = Double.isFinite(1);
      assertTrue(boolean0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      double double1 = Double.min(1, 350.0);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = Double.min(350.0, 1.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      DatasetChangeEvent datasetChangeEvent1 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.notifyListeners(datasetChangeEvent1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      
      double double3 = waferMapDataset0.getChipSpace();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2215.615, double3, 0.01);
      
      waferMapDataset0.setMaxChipY(1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.setMaxChipX(5);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(5, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      Number number0 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2215.615, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(5, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(number0.equals((Object)double3));
      assertTrue(number0.equals((Object)double2));
      assertTrue(number0.equals((Object)double1));
      assertEquals(1.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 2093);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertEquals(0, int0);
      
      Double double0 = new Double((-1518.0101606003386));
      assertEquals((-1518.0101606003386), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite((-1518.0101606003386));
      assertTrue(boolean0);
      
      waferMapDataset0.setNotify(true);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      Number number0 = waferMapDataset0.getMinValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertEquals((-1518.0101606003386), number0);
      assertNotNull(number0);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      waferMapDataset0.setChipSpace(Double.POSITIVE_INFINITY);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      int int2 = waferMapDataset0.getMaxChipX();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      waferMapDataset0.setMaxChipY(2093);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.setMaxChipX((-1));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.addValue(0, 2093, 2093);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.setChipSpace(0.0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      
      int int3 = waferMapDataset0.getMaxChipY();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2093, int3);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      Number number1 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertEquals((-1518.0101606003386), number1);
      assertNotNull(number1);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertEquals((-1), waferMapDataset1.getMaxChipX());
      assertEquals(2093, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(0.0, waferMapDataset1.getChipSpace(), 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertNotNull(waferMapDataset1);
      
      Double double1 = (Double)waferMapDataset0.getMaxValue();
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)number1, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean1 = waferMapDataset0.isMinValue(double1);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2093, waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)number1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, byte0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, int0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = waferMapDataset0.isMinValue(byte0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(boolean0);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      waferMapDataset0.addValue(1, (int) (byte)0, 0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      boolean boolean1 = waferMapDataset0.isMaxValue(byte0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertNotNull(waferMapDataset1);
      
      Number number0 = waferMapDataset0.getChipValue(0, (-2989));
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertNull(number0);
      
      Double double1 = (Double)waferMapDataset0.getChipValue(0, 0);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Number number1 = waferMapDataset0.getChipValue((Comparable) byte0, (Comparable) byte0);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertNull(number1);
      
      waferMapDataset0.setMaxChipY((-1));
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 889, double0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(889, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      double double1 = Double.max(889, 889);
      assertEquals(889.0, double1, 0.01);
      
      double double2 = waferMapDataset0.getChipSpace();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(889, waferMapDataset0.getMaxChipY());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(889, waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals(0, int0);
      
      boolean boolean0 = waferMapDataset0.isMinValue(double0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(889, waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean0);
      
      Number number0 = waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(889, waferMapDataset0.getMaxChipY());
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1539, 1236, byte0);
      assertEquals(1236, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1539, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setChipSpace(Double.POSITIVE_INFINITY);
      assertEquals(1236, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1539, waferMapDataset0.getMaxChipX());
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1236, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1539, waferMapDataset0.getMaxChipX());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(byte0, byte0, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      waferMapDataset0.removeChangeListener((DatasetChangeListener) null);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, int0);
      
      Comparable<Object> comparable0 = null;
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1979, 1979);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertEquals(0, int0);
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.addValue((-1936), 1979, (-1339));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.addValue(1979, 1979, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      waferMapDataset0.setMaxChipY(1979);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.validateObject();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipX());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.validateObject();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      waferMapDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertEquals(1979.0, number0);
      assertNotNull(number0);
      
      int int2 = (-1);
      Number number1 = waferMapDataset0.getChipValue((-1), 0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertNull(number1);
      
      int int3 = 0;
      Number number2 = waferMapDataset0.getChipValue(1, 1325);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertNull(number2);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(1979, waferMapDataset1.getMaxChipY());
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertNotNull(waferMapDataset1);
      
      waferMapDataset0.addValue((-1191), (-2810), 0);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValues();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1333, 1333);
      assertEquals(1333, waferMapDataset0.getMaxChipY());
      assertEquals(1333, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1333, 0, 1);
      assertEquals(1333, waferMapDataset0.getMaxChipY());
      assertEquals(1333, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-1381.3175F), 0.0F);
      assertEquals((-1381.3175F), float1, 0.01F);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1333, waferMapDataset0.getMaxChipY());
      assertEquals(1333, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1333, waferMapDataset1.getMaxChipY());
      assertEquals(1333, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertNotNull(waferMapDataset1);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(float0, float0, float0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(948, 948);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipX());
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue((-1563), (-1563));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipX());
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number0);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipX());
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(948, int0);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipX());
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertTrue(int1 == int0);
      assertEquals(948, int1);
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipX());
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, number1);
      assertNotNull(number1);
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(948, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMaxValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-4035));
      assertEquals((-4035), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.divideUnsigned((-4035), 1);
      assertEquals((-4035), int0);
      
      int int1 = Integer.min((-4035), 0);
      assertTrue(int1 == int0);
      assertEquals((-4035), int1);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      
      waferMapDataset0.fireDatasetChanged();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      waferMapDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(set0);
      
      waferMapDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      waferMapDataset0.addValue((-3231), (-4035), 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      waferMapDataset0.setMaxChipY(0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Number number1 = waferMapDataset0.getMaxValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(number1.equals((Object)number0));
      assertEquals((-3231.0), number1);
      assertNotNull(number1);
      
      Set set1 = waferMapDataset0.getUniqueValues();
      assertNotSame(set1, set0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(set1.equals((Object)set0));
      assertNotNull(set1);
      
      Number number2 = waferMapDataset0.getMinValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(number2.equals((Object)number0));
      assertEquals((-3231.0), number2);
      assertNotNull(number2);
      
      waferMapDataset0.addValue(0, (-1), 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-4035.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(829, 0, float0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(829, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1641, 0, 829);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(829, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      float float1 = Float.min((-1.0F), 1085.283F);
      assertEquals((-1.0F), float1, 0.01F);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(829, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1641.0, number0);
      assertNotNull(number0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(829, waferMapDataset0.getMaxChipX());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1786);
      Float float0 = new Float((double) (-1786));
      Float.isFinite(1.0F);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1786), (-1786), float0);
      waferMapDataset0.isMinValue(float0);
      waferMapDataset0.addValue((-1716), 1287, (-1716));
      waferMapDataset0.getChipValue((Comparable) float0, (Comparable) float0);
      waferMapDataset0.getMaxChipY();
      waferMapDataset0.getMaxChipX();
      waferMapDataset0.getUniqueValueCount();
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      Double.sum(Double.POSITIVE_INFINITY, (-2306.834732));
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), double0);
      waferMapDataset0.setValue(double0, double0, double0);
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1218, 1218);
      waferMapDataset0.getChipValue(1218, 0);
      Integer integer0 = Integer.getInteger("sC'uT{ImXmzY", 0);
      waferMapDataset0.getChipValue((Comparable) integer0, (Comparable) "sC'uT{ImXmzY");
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1218, waferMapDataset0.getMaxChipX());
      assertEquals(1218, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(363, 363);
      Number number0 = waferMapDataset0.getMinValue();
      waferMapDataset0.isMinValue(number0);
      waferMapDataset0.isMinValue(number0);
      waferMapDataset0.getMaxChipY();
      waferMapDataset0.setMaxChipX(29);
      waferMapDataset0.addValue(363, 29, (-1234));
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Double double0 = new Double(2);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2, 5084, double0);
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1278), 0, (Number) null);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(0, int0);
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals((-1278), int1);
      
      waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double(1.0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, double0);
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setChipSpace(0);
      waferMapDataset0.getMaxChipY();
      waferMapDataset0.addValue(0, 0, 0);
      Float float0 = new Float((double) 0);
      boolean boolean0 = waferMapDataset0.isMinValue(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(3956, 3956);
      Double double0 = new Double(3956);
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      waferMapDataset0.setGroup(datasetGroup0);
      Double.isFinite(3956);
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setChipSpace(0.0);
      Byte byte0 = new Byte((byte)46);
      Byte.toUnsignedLong((byte)28);
      Byte.toUnsignedInt((byte)0);
      Byte.toUnsignedInt((byte)46);
      waferMapDataset0.isMaxValue(byte0);
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1603, (-1396));
      waferMapDataset0.getUniqueValueCount();
      assertEquals(1603, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setMaxChipX((-1396));
      assertEquals((-1396), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(3702, 3702);
      waferMapDataset0.addValue(3702, 3702, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(3702, waferMapDataset0.getMaxChipX());
      assertEquals(3702, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 1194);
      waferMapDataset0.setChipSpace((-1570.17964));
      assertEquals((-1570.17964), waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(78, 0);
      waferMapDataset0.getChipValue(0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(78, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Double double0 = new Double((-1));
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), double0);
      Double.isFinite((-1));
      waferMapDataset0.setChipSpace((-1));
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals((-1.0), double1, 0.01);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals((-1), int0);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      Double double0 = new Double(0);
      waferMapDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
      waferMapDataset0.getChipValue((Comparable) double0, (Comparable) double0);
      Float float0 = new Float((double) 0);
      waferMapDataset0.setMaxChipX((-2026));
      waferMapDataset0.getChipValue(0, 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setMaxChipY((-2026));
      waferMapDataset0.addValue(0, 0, 0);
      waferMapDataset0.getChipValue(0, (-2026));
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Float float0 = new Float((float) 21);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(21, 21, float0);
      Float.sum(21, 21);
      waferMapDataset0.addValue(182, 182, 182);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(21, int0);
      
      waferMapDataset0.addValue(21, 21, 21);
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(182.0, number0);
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals(2, int1);
      
      boolean boolean0 = waferMapDataset0.isMaxValue(float0);
      assertEquals(21, waferMapDataset0.getMaxChipX());
      assertEquals(21.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(boolean0);
  }
}
