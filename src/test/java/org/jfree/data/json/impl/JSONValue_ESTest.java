/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:11:50 GMT 2019
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.json.impl.JSONArray;
import org.jfree.data.json.impl.JSONObject;
import org.jfree.data.json.impl.JSONValue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSONValue_ESTest extends JSONValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(0.0);
      jSONArray0.add((Object) float0);
      StringWriter stringWriter0 = new StringWriter();
      JSONValue.writeJSONString(jSONArray0, stringWriter0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONValue.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONValue.escape("org.jfree.data.json.impl.JSONArray", (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JSONValue.escape("$)]:F3Jd^90U{YjP^", stringBuffer0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("$)]\\u007F:F3Jd^90\\u007FU{YjP^", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONValue.toJSONString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONValue.escape("%*");
      assertEquals("\\u007F%*", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONValue.escape("(h }$|8\\'v}=<(?%");
      assertEquals("(h }$|8\\\\'v}=<(?%", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JSONValue.escape("FwYq[5?iI/4lMwD1", stringBuffer0);
      assertEquals(17, stringBuffer0.length());
      assertEquals("FwYq[5?iI\\/4lMwD1", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      JSONValue.escape("\"\"", stringBuffer0);
      assertEquals("\\\"\\\"", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(47);
      JSONValue.writeJSONString("\r", stringWriter0);
      assertEquals("\"\\r\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONValue.escape((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONValue.toJSONString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Short short0 = new Short((short)91);
      String string0 = JSONValue.toJSONString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.put(float0, float0);
      String string0 = JSONValue.toJSONString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(123);
      String string0 = JSONValue.toJSONString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONValue.toJSONString("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONValue.toJSONString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONValue jSONValue0 = new JSONValue();
      String string0 = JSONValue.toJSONString(jSONValue0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.FALSE;
      JSONValue.writeJSONString(boolean0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(1266.639727);
      // Undeclared exception!
      try { 
        JSONValue.writeJSONString(float0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(123);
      JSONValue.writeJSONString(double0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONValue.writeJSONString((Object) null, stringWriter0);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1069));
      StringWriter stringWriter0 = new StringWriter();
      JSONValue.writeJSONString(integer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONValue jSONValue0 = new JSONValue();
      StringWriter stringWriter0 = new StringWriter();
      JSONValue.writeJSONString(jSONValue0, stringWriter0);
  }
}
