/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:12:25 GMT 2019
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.json.impl.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      JSONObject jSONObject1 = (JSONObject)jSONObject0.computeIfAbsent(jSONObject0, function0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      BiFunction<Integer, String, String> biFunction0 = (BiFunction<Integer, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.clear();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      
      Object object0 = jSONObject0.computeIfPresent(jSONObject0, biFunction0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertNull(object0);
      
      Object object1 = jSONObject0.put((Object) null, jSONObject0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertSame(jSONObject0, jSONObject1);
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        jSONObject0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONObject.toJSONString((Map) null);
      assertEquals("null", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.remove((Object) "null", (Object) "null");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertFalse(boolean0);
      
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = jSONObject0.toString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", string2);
      assertNotNull(string2);
      
      String string3 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", string3);
      assertNotNull(string3);
      
      String string4 = JSONObject.toJSONString((Map) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("null", string4);
      assertNotNull(string4);
      
      String string5 = JSONObject.toJSONString((Map) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Os";
      String string1 = JSONObject.toString("Os", (Object) "Os");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"Os\":\"Os\"", string1);
      assertNotNull(string1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      String string2 = jSONObject0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", string2);
      assertNotNull(string2);
      
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        JSONObject.writeJSONString((Map) jSONObject0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.remove((Object) null, (Object) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(123);
      assertEquals(123, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      BiFunction<Object, Integer, String> biFunction0 = (BiFunction<Object, Integer, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Object object0 = jSONObject0.compute(integer0, biFunction0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNull(object0);
      
      Object object1 = jSONObject0.put(integer1, (Object) null);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object1);
      
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotNull(jSONObject1);
      
      BiFunction<String, Integer, Object> biFunction1 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , anyInt());
      Object object2 = jSONObject1.compute((Object) null, biFunction1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      assertNull(object2);
      
      Object object3 = jSONObject0.getOrDefault((Object) null, (Object) null);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertNull(object3);
      
      Object object4 = jSONObject0.getOrDefault(integer0, integer0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object4.equals((Object)integer1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals(123, object4);
      assertNotNull(object4);
      
      BiConsumer<Integer, String> biConsumer0 = (BiConsumer<Integer, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject1.forEach(biConsumer0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"0\":null}", string0);
      assertNotNull(string0);
      
      String string1 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"0\":null}", string1);
      assertNotNull(string1);
      
      String string2 = JSONObject.toString("{\"0\":null}", (Object) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"{\\\"0\\\":null}\":null", string2);
      assertNotNull(string2);
      
      String string3 = jSONObject0.toJSONString();
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals("{\"0\":null}", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('!');
      assertEquals("!", stringWriter0.toString());
      assertEquals("!", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      jSONObject1.writeJSONString((Writer) stringWriter1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals("!{}", stringWriter0.toString());
      assertEquals("!{}", stringWriter1.toString());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(jSONObject1, jSONObject0);
      
      StringWriter stringWriter2 = stringWriter1.append('-');
      assertEquals("!{}-", stringWriter0.toString());
      assertEquals("!{}-", stringWriter1.toString());
      assertEquals("!{}-", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      
      jSONObject0.writeJSONString((Writer) stringWriter2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("!{}-{\"0\":null}", stringWriter0.toString());
      assertEquals("!{}-{\"0\":null}", stringWriter1.toString());
      assertEquals("!{}-{\"0\":null}", stringWriter2.toString());
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      JSONObject.writeJSONString((Map) jSONObject0, (Writer) stringWriter2);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals("!{}-{\"0\":null}{\"0\":null}", stringWriter0.toString());
      assertEquals("!{}-{\"0\":null}{\"0\":null}", stringWriter1.toString());
      assertEquals("!{}-{\"0\":null}{\"0\":null}", stringWriter2.toString());
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      // Undeclared exception!
      try { 
        jSONObject1.writeJSONString((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      JSONObject.writeJSONString((Map) jSONObject0, (Writer) stringWriter0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", stringWriter0.toString());
      
      String string0 = "XvRP*kSd\\u~E`%\\%(ys";
      Integer integer0 = new Integer(1037);
      assertEquals(1037, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = jSONObject0.putIfAbsent(string0, integer0);
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object0);
      
      Object object1 = jSONObject0.putIfAbsent((Object) null, integer0);
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNull(object1);
      
      String string1 = JSONObject.toString(string0, (Object) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"XvRP*kSd\\\\u~E`%\\\\%(ys\":null", string1);
      assertNotNull(string1);
      
      String string2 = jSONObject0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string2);
      
      String string3 = jSONObject0.toJSONString();
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string3);
      
      String string4 = JSONObject.toJSONString((Map) jSONObject0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string4);
      
      String string5 = JSONObject.toJSONString((Map) jSONObject0);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(string5);
      
      JSONObject.writeJSONString((Map) jSONObject0, (Writer) stringWriter0);
      assertEquals(2, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      
      String string6 = jSONObject0.toString();
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.toString((String) null, (Object) null);
      assertEquals("\"null\":null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.toString("hb 5", (Object) "hb 5");
      assertEquals("\"hb 5\":\"hb 5\"", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      String string1 = JSONObject.toJSONString((Map) jSONObject0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toJSONString();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.toJSONString((Map) jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = jSONObject0.toJSONString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.toJSONString((Map) null);
      assertEquals("null", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = JSONObject.toString((String) null, (Object) jSONObject0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("\"null\":{}", string2);
      assertNotNull(string2);
      
      String string3 = JSONObject.toJSONString((Map) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("null", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertEquals("", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      stringWriter0.close();
      assertFalse(stringWriter0.equals((Object)stringWriter1));
      assertEquals("", stringWriter0.toString());
      assertNotSame(stringWriter0, stringWriter1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 's';
      charArray0[2] = 'q';
      stringWriter1.write(charArray0);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertArrayEquals(new char[] {'<', 's', 'q'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("<sq", stringWriter1.toString());
      assertNotSame(stringWriter1, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-949));
      hashMap0.put(jSONObject0, integer0);
      Integer integer1 = new Integer(1732);
      Integer integer2 = new Integer(44);
      hashMap0.put(integer1, integer2);
      JSONObject.toJSONString((Map) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(125);
      StringWriter stringWriter0 = new StringWriter(368);
      Integer integer3 = new Integer(0);
      hashMap1.put(integer3, hashMap0);
      StringWriter stringWriter1 = stringWriter0.append('K');
      jSONObject0.toJSONString();
      JSONObject.writeJSONString((Map) hashMap1, (Writer) stringWriter1);
      jSONObject0.toString();
      JSONObject.writeJSONString((Map) jSONObject0, (Writer) stringWriter0);
      jSONObject0.toJSONString();
      jSONObject0.toJSONString();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-2985));
      char[] charArray0 = new char[7];
      charArray0[1] = '#';
      charArray0[2] = '6';
      charArray0[3] = 'Z';
      charArray0[4] = 'E';
      stringWriter0.flush();
      charArray0[5] = '\'';
      charArray0[6] = 'a';
      stringWriter0.write(charArray0);
      JSONObject.writeJSONString((Map) null, (Writer) stringWriter0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.writeJSONString((Writer) stringWriter0);
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.forEach(biConsumer0);
      JSONObject.toJSONString((Map) jSONObject0);
      JSONObject.toString("{}", (Object) "{}");
      JSONObject.writeJSONString((Map) null, (Writer) stringWriter0);
      assertEquals("\uF457\u0000#6ZE'anull{}null", stringWriter0.toString());
      
      jSONObject0.toJSONString();
      String string0 = jSONObject0.toJSONString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1064);
      assertEquals(1064, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = JSONObject.toJSONString((Map) hashMap0);
      assertEquals("{}", string0);
  }
}
