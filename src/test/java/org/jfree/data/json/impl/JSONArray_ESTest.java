/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:07:33 GMT 2019
 */

package org.jfree.data.json.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.json.impl.JSONArray;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSONArray.writeJSONString((List) jSONArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.json.impl.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add(0, (Object) null);
      String string0 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "0XsZ<nv3}.OwS");
      jSONArray0.add((Object) "0XsZ<nv3}.OwS");
      String string0 = JSONArray.toJSONString((List) jSONArray0);
      assertEquals("[\"0XsZ<nv3}.OwS\",\"0XsZ<nv3}.OwS\"]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) null);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add(0, (Object) null);
      String string0 = jSONArray0.toString();
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONArray.toJSONString((List) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add(0, (Object) null);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      jSONArray0.writeJSONString(writer0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "0XsZ<nv3}.OwS");
      jSONArray0.add((Object) "0XsZ<nv3}.OwS");
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) jSONArray0, writer0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JSONArray.writeJSONString((List) null, writer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONArray0.toJSONString();
      assertEquals("[]", string0);
  }
}
