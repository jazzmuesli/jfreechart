/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:55:54 GMT 2019
 */

package org.jfree.data.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DefaultKeyedValues2D;
import org.jfree.data.KeyedValues;
import org.jfree.data.KeyedValues2D;
import org.jfree.data.json.JSONUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONUtils_ESTest extends JSONUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      // Undeclared exception!
      try { 
        JSONUtils.writeKeyedValues2D((KeyedValues2D) defaultKeyedValues2D0, (Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'writer' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        JSONUtils.writeKeyedValues((KeyedValues) null, (Writer) stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONUtils.writeKeyedValues((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue(byte0, byte0, comparable0);
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      StringWriter stringWriter0 = new StringWriter();
      JSONUtils.writeKeyedValues2D((KeyedValues2D) defaultKeyedValues2D0, (Writer) stringWriter0);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = Integer.getInteger((String) null, 0);
      defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
      Integer integer1 = Integer.getInteger((String) null, 3011);
      defaultKeyedValues0.setValue((Comparable) integer1, (double) (-349));
      StringWriter stringWriter0 = new StringWriter();
      JSONUtils.writeKeyedValues((KeyedValues) defaultKeyedValues0, (Writer) stringWriter0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue(byte0, byte0, comparable0);
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      String string0 = JSONUtils.writeKeyedValues2D((KeyedValues2D) defaultKeyedValues2D0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      JSONUtils.writeKeyedValues2D((KeyedValues2D) defaultKeyedValues2D0, (Writer) stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, (-572.1));
      defaultKeyedValues0.setValue(comparable0, (-572.1));
      String string0 = JSONUtils.writeKeyedValues((KeyedValues) defaultKeyedValues0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JSONUtils jSONUtils0 = new JSONUtils();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONUtils.writeKeyedValues2D((KeyedValues2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
