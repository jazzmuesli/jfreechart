/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:28:07 GMT 2019
 */

package org.jfree.data.function;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.function.LineFunction2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LineFunction2D_ESTest extends LineFunction2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(53.60247583, (-572.451105));
      LineFunction2D lineFunction2D1 = new LineFunction2D(53.60247583, (-1.0));
      boolean boolean0 = lineFunction2D0.equals(lineFunction2D1);
      assertFalse(boolean0);
      assertFalse(lineFunction2D1.equals((Object)lineFunction2D0));
      assertEquals(53.60247583, lineFunction2D1.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D1.getSlope(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3075.850527553427), 0.0);
      LineFunction2D lineFunction2D1 = new LineFunction2D(0.0, 973.0);
      boolean boolean0 = lineFunction2D0.equals(lineFunction2D1);
      assertFalse(boolean0);
      assertEquals(973.0, lineFunction2D1.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D1.getIntercept(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(53.60247583, (-572.451105));
      double double0 = lineFunction2D0.getValue(0.0);
      assertEquals((-572.451105), lineFunction2D0.getSlope(), 0.01);
      assertEquals(53.60247583, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(535.329, (-4244.613434758904));
      double double0 = lineFunction2D0.getValue(535.329);
      assertEquals((-2271729.3364160494), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1410.68975926748, 1410.68975926748);
      double double0 = lineFunction2D0.getSlope();
      assertEquals(1410.68975926748, double0, 0.01);
      assertEquals(1410.68975926748, lineFunction2D0.getIntercept(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(53.60247583, (-572.451105));
      double double0 = lineFunction2D0.getSlope();
      assertEquals((-572.451105), double0, 0.01);
      assertEquals(53.60247583, lineFunction2D0.getIntercept(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1410.68975926748, 1410.68975926748);
      double double0 = lineFunction2D0.getIntercept();
      assertEquals(1410.68975926748, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1410.68975926748, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2699.53), (-3364.16172646835));
      double double0 = lineFunction2D0.getIntercept();
      assertEquals((-2699.53), double0, 0.01);
      assertEquals((-3364.16172646835), lineFunction2D0.getSlope(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1410.68975926748, 1410.68975926748);
      LineFunction2D lineFunction2D1 = new LineFunction2D(1410.68975926748, (-1520.8755323058));
      boolean boolean0 = lineFunction2D0.equals(lineFunction2D1);
      assertEquals((-1520.8755323058), lineFunction2D1.getSlope(), 0.01);
      assertEquals(1410.68975926748, lineFunction2D1.getIntercept(), 0.01);
      assertFalse(boolean0);
      assertFalse(lineFunction2D1.equals((Object)lineFunction2D0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      LineFunction2D lineFunction2D1 = new LineFunction2D((-2699.53), (-3364.16172646835));
      boolean boolean0 = lineFunction2D0.equals(lineFunction2D1);
      assertEquals((-2699.53), lineFunction2D1.getIntercept(), 0.01);
      assertEquals((-3364.16172646835), lineFunction2D1.getSlope(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1410.68975926748, 1410.68975926748);
      boolean boolean0 = lineFunction2D0.equals((Object) null);
      assertEquals(1410.68975926748, lineFunction2D0.getSlope(), 0.01);
      assertFalse(boolean0);
      assertEquals(1410.68975926748, lineFunction2D0.getIntercept(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      boolean boolean0 = lineFunction2D0.equals(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      lineFunction2D0.hashCode();
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      double double0 = lineFunction2D0.getValue(0.0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      double double0 = lineFunction2D0.getIntercept();
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      double double0 = lineFunction2D0.getSlope();
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
