/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:49:32 GMT 2019
 */

package org.jfree.data.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.ItemListener;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SlidingCategoryDataset_ESTest extends SlidingCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=1j~J9>e[rF2c)kzL%";
      stringArray0[1] = "iSTgeQza=l";
      stringArray0[2] = "Unknown rowKey: ";
      stringArray0[3] = "Unksown columnKey: ";
      stringArray0[3] = "";
      Number[][] numberArray0 = new Number[5][0];
      Number[] numberArray1 = new Number[9];
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      numberArray1[0] = (Number) byte0;
      Byte byte1 = Byte.valueOf((byte) (-100));
      assertNotNull(byte1);
      assertEquals((byte) (-100), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      numberArray1[1] = (Number) byte1;
      Float float0 = new Float((float) (byte) (-98));
      assertNotNull(float0);
      assertEquals((-98.0F), (float)float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      Long long0 = new Long(2703L);
      assertNotNull(long0);
      assertEquals(2703L, (long)long0);
      
      numberArray1[3] = (Number) long0;
      Float float1 = new Float((double) (byte) (-98));
      assertNotNull(float1);
      assertEquals((-98.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      numberArray1[4] = (Number) float1;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      numberArray1[5] = (Number) double0;
      Float float2 = new Float((float) (byte) (-100));
      assertNotNull(float2);
      assertEquals((-100.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      numberArray1[6] = (Number) float2;
      Float float3 = new Float((double) (byte) (-100));
      assertNotNull(float3);
      assertEquals((-100.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      numberArray1[7] = (Number) float3;
      Float float4 = new Float((float) (byte) (-100));
      assertNotNull(float4);
      assertEquals((-100.0F), (float)float4, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      numberArray1[8] = (Number) float4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float3;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) float3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) float2;
      numberArray3[3] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) byte1;
      numberArray4[1] = (Number) float1;
      numberArray0[1] = numberArray4;
      Number[] numberArray5 = new Number[4];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) byte1;
      numberArray5[1] = (Number) byte1;
      numberArray5[2] = (Number) byte0;
      numberArray5[3] = (Number) float2;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-2007), (-536));
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, (-2007), (-1));
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-1), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(slidingCategoryDataset1);
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      
      boolean boolean0 = slidingCategoryDataset0.equals(slidingCategoryDataset1);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-1), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertFalse(boolean0);
      assertFalse(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      int int0 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.setFirstCategoryIndex(1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      
      Comparable comparable0 = slidingCategoryDataset0.getColumnKey(1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertNotNull(comparable0);
      assertEquals("Category 3", comparable0);
      
      boolean boolean0 = slidingCategoryDataset0.equals((Object) null);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = slidingCategoryDataset0.equals(list0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      slidingCategoryDataset0.setFirstCategoryIndex(1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getEndValue(1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][2];
      Number[] numberArray1 = new Number[1];
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-359.9668);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1952.7);
      doubleArray1[3] = (-458.404682309896);
      doubleArray1[4] = 4890.20204;
      doubleArray1[5] = (-2112.44538251);
      doubleArray1[6] = (-2653.6470456);
      doubleArray1[7] = 824.995676443;
      doubleArray1[8] = (-998.8280579759207);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2653.6470456);
      doubleArray2[3] = (-458.404682309896);
      doubleArray2[4] = (-2112.44538251);
      doubleArray2[5] = (-283.000525621);
      doubleArray2[6] = (-2653.6470456);
      doubleArray2[7] = (-1952.7);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), (-581));
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-581), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-581), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(defaultIntervalCategoryDataset1, 14, (-1709));
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.getNotify());
      assertEquals(14, slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-1709), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(slidingCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getColumnKey(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 4014, 4014);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4014, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4014, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4014, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4014, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertFalse(boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4014, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4014, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4014, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(4014, slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      List list1 = slidingCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4014, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4014, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(list1, list0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-836), (-209));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, int0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)slidingCategoryDataset0.getUnderlyingDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = slidingCategoryDataset0.getColumnIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset2 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertNotNull(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      
      defaultCategoryDataset2.clear();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset3 = (DefaultCategoryDataset)defaultCategoryDataset2.clone();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset3.getNotify());
      assertNotNull(defaultCategoryDataset3);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset1);
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset2.getNotify());
      assertFalse(boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      
      int int2 = slidingCategoryDataset0.getMaximumCategoryCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-209), int2);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      
      List list1 = defaultCategoryDataset0.getRowKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(list1, list0);
      
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-836), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int3 = slidingCategoryDataset0.getColumnIndex(comparable1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(835, int3);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      int int4 = slidingCategoryDataset1.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-836), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, int4);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-836), (-209));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Integer integer0 = Integer.getInteger("h!dm", (-209));
      assertNotNull(integer0);
      assertEquals((-209), (int)integer0);
      
      defaultCategoryDataset0.removeValue(integer0, "h!dm");
      assertTrue(defaultCategoryDataset0.getNotify());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, int0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)slidingCategoryDataset0.getUnderlyingDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = new Integer((-209));
      assertEquals((-209), int1);
      assertFalse(int1 == int0);
      
      DefaultCategoryDataset defaultCategoryDataset2 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertNotNull(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      
      defaultCategoryDataset2.clear();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset3 = (DefaultCategoryDataset)defaultCategoryDataset2.clone();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset3.getNotify());
      assertNotNull(defaultCategoryDataset3);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset1);
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset2.getNotify());
      assertFalse(boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      
      int int2 = slidingCategoryDataset0.getMaximumCategoryCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-209), int2);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertEquals(0, slidingCategoryDataset1.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-836), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKeys();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 1376);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1376, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1376, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int1 = slidingCategoryDataset0.getColumnIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1376, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((double) 0, (Comparable) comparable1, (Comparable) comparable1);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertNotNull(xYTaskDataset0);
      
      int int2 = 0;
      xYTaskDataset0.validateObject();
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      double double0 = xYTaskDataset0.getStartXValue(0, 0);
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals((-0.4), double0, 0.01);
      
      defaultCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int3 = 151;
      Double double1 = new Double((-0.4));
      assertNotNull(double1);
      assertEquals((-0.4), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int int4 = slidingCategoryDataset0.getColumnCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1376, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey(255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"*KRA,GG~^^7h$:h.";
      stringArray0[1] = ")";
      stringArray0[2] = ";_p$\"GyNXYJ%";
      stringArray0[3] = "";
      stringArray0[4] = "{T[?8M!W'";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      int int0 = (-363);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-363), (-96));
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-96), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-363), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) "{T[?8M!W'", (Comparable) comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(list0);
      
      int int0 = 4014;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 4014, 4014);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4014, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4014, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(4014);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2202.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-151.74731133);
      doubleArray1[7] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-872), (-164));
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-164), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-872), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.setNotify(false);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-164), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-872), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = slidingCategoryDataset0.equals(doubleArray1);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-164), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-872), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-2202.0), 0.0, 1.0, (-151.74731133), Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray2);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-164), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-872), slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(slidingCategoryDataset0.getNotify());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1753.341543);
      doubleArray1[5] = 1521.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1521.0;
      doubleArray2[1] = 1521.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1521.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1753.341543);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3039.627;
      doubleArray3[6] = (-1753.341543);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1424), (-1424));
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1424), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1424), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getFirstCategoryIndex();
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1424), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1424), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, doubleArray0.length);
      assertEquals((-1424), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 2383);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2383, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey(255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-3428), (-3428));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-3428), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-3428), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex((-3428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 479;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 479, 479);
      assertEquals(479, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(479, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1029;
      int int1 = 193;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1029, 193);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1029, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(193, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      int int2 = (-2463);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(193, (-2463));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 2449;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-3000), 2449);
      assertEquals((-3000), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(2449, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      CategoryDataset categoryDataset1 = slidingCategoryDataset0.getUnderlyingDataset();
      assertEquals((-3000), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(2449, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(categoryDataset1);
      
      slidingCategoryDataset0.validateObject();
      assertEquals((-3000), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(2449, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1, 1);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals(1, slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2625.7507183553;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 301.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 301.0;
      doubleArray3[3] = 2625.7507183553;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 135.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      Comparable comparable0 = slidingCategoryDataset0.getRowKey(0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(comparable0);
      assertEquals("Series 1", comparable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-740.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-740.7);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-740.7);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-740.7);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-740.7);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-740.7);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-740.7);
      doubleArray5[2] = (-740.7);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-740.7);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-740.7);
      doubleArray6[5] = (-740.7);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-740.7);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-740.7);
      doubleArray7[4] = (-740.7);
      doubleArray7[5] = (-740.7);
      doubleArray7[6] = 0.0;
      doubleArray7[7] = (-740.7);
      doubleArray7[8] = (-3472.988510297);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-3472.988510297);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = (-740.7);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (-740.7);
      doubleArray9[1] = (-740.7);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-1959.6);
      doubleArray9[4] = (-3472.988510297);
      doubleArray9[5] = (-1310.8252541097809);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, (-2365));
      assertEquals((-2365), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey((-2365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 1);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      int int2 = (-3633);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setMaximumCategoryCount((-3633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 225.0;
      doubleArray1[1] = (-2986.6371);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1089.3609208;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 225.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1089.3609208;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2986.6371);
      doubleArray4[1] = (-2986.6371);
      doubleArray4[2] = (-504.42);
      doubleArray4[3] = 1089.3609208;
      doubleArray4[4] = 225.0;
      doubleArray4[5] = (-2986.6371);
      doubleArray4[6] = 225.0;
      doubleArray4[7] = (-1.0);
      doubleArray4[8] = (-2986.6371);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-504.42);
      doubleArray5[1] = (-2986.6371);
      doubleArray5[2] = (-2986.6371);
      doubleArray5[3] = 225.0;
      doubleArray5[4] = 1089.3609208;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1517), (-661));
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-661), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1517), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.setFirstCategoryIndex(1);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-661), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 5;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 5, 5);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      int int1 = (-1375);
      HierarchyBoundsListener hierarchyBoundsListener0 = AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      assertNull(hierarchyBoundsListener0);
      
      int int2 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = slidingCategoryDataset0.hasListener((EventListener) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertFalse(boolean0);
      
      boolean boolean1 = slidingCategoryDataset0.hasListener((EventListener) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((-107), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      
      defaultCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      assertNotNull(aWTEventMulticaster0);
      
      WindowListener windowListener1 = AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster0);
      assertNull(windowListener1);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener((EventListener) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertFalse(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(0, 1343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 40;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 40, 40);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(40, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(40, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Comparable<Integer> comparable0 = null;
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "series";
      stringArray0[1] = "R7~R1~k]2\"g=";
      stringArray0[2] = "h7";
      stringArray0[3] = "Unknown rowKey: ";
      stringArray0[4] = "";
      stringArray0[5] = "R'O+:LyGCn%Va=8;m<0";
      stringArray0[6] = "format";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 555, (-38));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-38), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(555, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(0, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2550.094365;
      doubleArray1[1] = (-1085.39);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1115.0329;
      doubleArray1[4] = 651.27;
      doubleArray1[5] = (-2434.7396823758695);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-838.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1085.39);
      doubleArray2[1] = (-3004.6);
      doubleArray2[2] = 1115.0329;
      doubleArray2[3] = 651.27;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 651.27;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), 3565);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3565, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnIndex(651.27);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3565, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 1, 0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      slidingCategoryDataset0.setNotify(true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = slidingCategoryDataset0.getRowIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), int1);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(int1 == int0);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = slidingCategoryDataset0.getColumnIndex(comparable1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), int2);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      int int3 = slidingCategoryDataset0.getColumnCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, int3);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      int int4 = slidingCategoryDataset0.getFirstCategoryIndex();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, int4);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      slidingCategoryDataset0.setNotify(true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      Integer integer0 = Integer.valueOf(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      ItemListener itemListener1 = AWTEventMulticaster.remove(itemListener0, itemListener0);
      assertNull(itemListener1);
      
      ItemListener itemListener2 = AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      assertNull(itemListener2);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener((EventListener) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Integer.divideUnsigned(1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 317, 317);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(317, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(317, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      Integer integer0 = Integer.valueOf(317);
      assertNotNull(integer0);
      assertEquals(317, (int)integer0);
      
      int int0 = slidingCategoryDataset0.getRowIndex(integer0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(317, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(317, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), int0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      slidingCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(317, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(317, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int1 = slidingCategoryDataset0.getMaximumCategoryCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(317, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(317, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(317, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Integer integer0 = Integer.getInteger("org.jfree.chart.axis.SymbolAxis", 2280);
      assertNotNull(integer0);
      assertEquals(2280, (int)integer0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowIndex(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 151, 0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(151, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.2;
      doubleArray1[3] = (-492.87401827896);
      doubleArray1[4] = (-115.106303273);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2;
      doubleArray2[1] = (-492.87401827896);
      doubleArray2[2] = (-115.106303273);
      doubleArray2[3] = 0.2;
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.2;
      doubleArray3[1] = (-115.106303273);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-115.106303273);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-115.106303273);
      doubleArray4[1] = (-115.106303273);
      doubleArray4[2] = (-492.87401827896);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 0.2;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(7, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1918), (-2207));
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1918), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2207), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 2277);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2277, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getFirstCategoryIndex();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2277, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4168;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 4168);
      assertEquals(4168, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultCategoryDataset0.getRowIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-1), int0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 37, 37);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(37, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(37, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertFalse(boolean0);
      
      int int1 = 0;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertNotNull(categoryToPieDataset0);
      
      slidingCategoryDataset0.addChangeListener(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(37, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      slidingCategoryDataset0.setNotify(true);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(37, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-576.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1515.4125);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1515.4125);
      doubleArray2[4] = (-576.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1515.4125);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-576.0);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-576.0);
      doubleArray5[4] = (-1515.4125);
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = (-1515.4125);
      doubleArray5[7] = (-1515.4125);
      doubleArray5[8] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-576.0);
      doubleArray6[1] = (-1515.4125);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-576.0);
      doubleArray6[4] = (-1515.4125);
      doubleArray6[5] = (-576.0);
      doubleArray6[6] = (-576.0);
      doubleArray6[7] = 1.0;
      doubleArray6[8] = (-1515.4125);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-1515.4125);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = 1.0;
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = (-576.0);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 11, (-1014));
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1014), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0E-5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0E-5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0E-5;
      doubleArray4[1] = 1.0E-5;
      doubleArray4[2] = 1.0E-5;
      doubleArray4[3] = 1.0E-5;
      doubleArray4[4] = 1.0E-5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 1.0E-5;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0E-5;
      doubleArray5[3] = 0.14;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-2995.951476186808);
      doubleArray6[2] = 1.0E-5;
      doubleArray6[3] = 0.14;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 1.0;
      doubleArray6[6] = 1.0E-5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.14;
      doubleArray7[1] = (-2995.951476186808);
      doubleArray7[2] = 0.14;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1.0E-5;
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = (-2995.951476186808);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 0.14;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = 1.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2816.05204650263);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 839.85656765501;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 2463.942679731151;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2816.05204650263);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2463.942679731151;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnIndex(1.0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-836), (-209));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, int0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)slidingCategoryDataset0.getUnderlyingDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = slidingCategoryDataset0.getColumnIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset2 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertNotNull(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      
      defaultCategoryDataset2.clear();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset3 = (DefaultCategoryDataset)defaultCategoryDataset2.clone();
      assertTrue(defaultCategoryDataset2.getNotify());
      assertTrue(defaultCategoryDataset3.getNotify());
      assertNotNull(defaultCategoryDataset3);
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset3.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset3, defaultCategoryDataset1);
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset2);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(defaultCategoryDataset2.getNotify());
      assertFalse(boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset3);
      
      int int2 = slidingCategoryDataset0.getMaximumCategoryCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-209), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-209), int2);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-836), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      Integer integer0 = new Integer((-1269));
      assertNotNull(integer0);
      assertEquals((-1269), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      
      boolean boolean1 = slidingCategoryDataset0.equals(integer0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-836), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset2));
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset3);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getValue((Comparable) integer0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown rowKey: -1269
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-290), (-290));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-290), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-290), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(taskSeriesCollection0).getSeriesCount();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertNotNull(xYTaskDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, 1008.892251165898);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1008.892251165898, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertNotNull(xYBarDataset0);
      
      int int0 = xYBarDataset0.getSeriesCount();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1008.892251165898, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertEquals(0, int0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(defaultCategoryDataset0, (-290), 803);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-290), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(803, slidingCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset1);
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      
      SlidingCategoryDataset slidingCategoryDataset2 = (SlidingCategoryDataset)slidingCategoryDataset1.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-290), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(803, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(803, slidingCategoryDataset2.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset2.getNotify());
      assertEquals((-290), slidingCategoryDataset2.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset2);
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertFalse(slidingCategoryDataset2.equals((Object)slidingCategoryDataset0));
      assertTrue(slidingCategoryDataset2.equals((Object)slidingCategoryDataset1));
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset2);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      assertNotSame(slidingCategoryDataset2, slidingCategoryDataset0);
      assertNotSame(slidingCategoryDataset2, slidingCategoryDataset1);
      
      boolean boolean0 = xYTaskDataset0.equals(slidingCategoryDataset2);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals((-290), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(803, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(803, slidingCategoryDataset2.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset2.getNotify());
      assertEquals((-290), slidingCategoryDataset2.getFirstCategoryIndex());
      assertFalse(boolean0);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset2));
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertFalse(slidingCategoryDataset2.equals((Object)slidingCategoryDataset0));
      assertTrue(slidingCategoryDataset2.equals((Object)slidingCategoryDataset1));
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset2);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      assertNotSame(slidingCategoryDataset2, slidingCategoryDataset0);
      assertNotSame(slidingCategoryDataset2, slidingCategoryDataset1);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, false);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1008.892251165898, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      xYTaskDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1008.892251165898, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotNull(intervalXYDelegate1);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate1.clone();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate2);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      
      slidingCategoryDataset0.removeChangeListener(intervalXYDelegate1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-290), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-290), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(DomainOrder.NONE, xYTaskDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertFalse(slidingCategoryDataset0.equals((Object)slidingCategoryDataset2));
      assertFalse(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset2);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey((-290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 4855, 4855);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4855, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4855, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(4855, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4855, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-4488), (-1));
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4488), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.05;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 0.05;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1496.168);
      doubleArray5[1] = 0.05;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.05;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1496.168);
      doubleArray6[1] = 0.05;
      doubleArray6[2] = 0.05;
      doubleArray6[3] = 0.05;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-881), (-881));
      assertEquals((-881), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-881), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.setMaximumCategoryCount(1415);
      assertEquals(1415, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-881), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-2648);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2648), (-2648));
      assertEquals((-2648), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2648), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setMaximumCategoryCount((-3642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), 0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getMaximumCategoryCount();
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 4184, 1407);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1407, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4184, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)slidingCategoryDataset0.getUnderlyingDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1407, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4184, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      boolean boolean0 = slidingCategoryDataset0.equals(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1407, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4184, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertFalse(boolean0);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset2 = (DefaultCategoryDataset)slidingCategoryDataset0.getUnderlyingDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1407, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4184, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(defaultCategoryDataset2.getNotify());
      assertNotNull(defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset2);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertSame(defaultCategoryDataset2, defaultCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-788), (-788));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-788), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-788), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-788), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-788), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-788), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-788), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertNotNull(slidingCategoryDataset1);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 907.1835982;
      doubleArray1[1] = 0.25;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.25;
      doubleArray2[1] = 0.25;
      doubleArray2[2] = 907.1835982;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-876), (-876));
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-876), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-876), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey((-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long(2L);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      Integer integer1 = new Integer((-1737));
      assertNotNull(integer1);
      assertEquals((-1737), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[2] = (Number) integer1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer1;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) long0;
      numberArray2[4] = (Number) long0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer1;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) long0;
      numberArray3[5] = (Number) long0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) integer1;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) long0;
      numberArray4[3] = (Number) integer1;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 8);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(8, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][3];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      Long long0 = new Long(2L);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      numberArray3[3] = (Number) long0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) float0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-5711), (-5711));
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-5711), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-5711), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) float0, (Comparable) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: 2
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      WindowListener windowListener0 = null;
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      slidingCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Requires 'max' >= 0.";
      stringArray0[1] = "arrow";
      stringArray0[2] = "";
      stringArray0[3] = "KifD([&Lb1~";
      stringArray0[4] = "Cr;";
      stringArray0[5] = "";
      stringArray0[6] = "Requires 'max' >= 0.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(7, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(7, stringArray0.length);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-3218), (-721));
      assertEquals((-721), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-3218), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 225.0;
      doubleArray1[1] = (-2986.6371);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1089.3609208;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 225.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1089.3609208;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray2[0] = (-2986.6371);
      doubleArray4[1] = (-2986.6371);
      doubleArray4[2] = (-504.42);
      doubleArray4[3] = 1089.3609208;
      doubleArray4[5] = (-2986.6371);
      doubleArray4[6] = 225.0;
      doubleArray4[7] = (-1.0);
      doubleArray4[8] = (-2986.6371);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-504.42);
      doubleArray5[1] = (-2986.6371);
      doubleArray5[2] = (-2986.6371);
      doubleArray5[3] = 225.0;
      doubleArray5[4] = 1089.3609208;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1517), (-661));
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-661), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-1517), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      slidingCategoryDataset0.setFirstCategoryIndex(1);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-661), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-3428), 3177);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-3428), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3177, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKeys();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 164.454197155871;
      doubleArray1[1] = (-1863.409128748);
      doubleArray1[2] = (-4209.238132690237);
      doubleArray1[3] = (-4384.68562);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1622.187982;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1841.48);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1863.409128748);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1841.48);
      doubleArray2[4] = (-1841.48);
      doubleArray2[5] = 1622.187982;
      doubleArray2[6] = (-1863.409128748);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 164.454197155871;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 164.454197155871;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1622.187982;
      doubleArray5[2] = (-4209.238132690237);
      doubleArray5[3] = (-1841.48);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 164.454197155871;
      doubleArray6[2] = (-1863.409128748);
      doubleArray6[3] = (-1863.409128748);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 1622.187982;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-1863.409128748);
      doubleArray7[1] = (-4384.68562);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-1863.409128748);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 164.454197155871;
      doubleArray8[1] = (-1863.409128748);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = 164.454197155871;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 0.0;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 1.0E-5;
      doubleArray9[7] = (-4384.68562);
      doubleArray9[8] = 1622.187982;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-358), 2638);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-358), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2638, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(9, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-358), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2638, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-358), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals(2638, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(slidingCategoryDataset1);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      boolean boolean0 = slidingCategoryDataset0.equals(slidingCategoryDataset1);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-358), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2638, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-358), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals(2638, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      
      defaultCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertNotNull(slidingCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(0, 1343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=1j~J9>e[rF2c)kzL%";
      stringArray0[1] = "iSTgeQza=l";
      stringArray0[2] = "Unknown rowKey: ";
      stringArray0[3] = "Unknown columnKey: ";
      stringArray0[4] = "";
      Number[][] numberArray0 = new Number[5][0];
      Number[] numberArray1 = new Number[9];
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      numberArray1[0] = (Number) byte0;
      Byte byte1 = Byte.valueOf((byte) (-100));
      assertNotNull(byte1);
      assertEquals((byte) (-100), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      numberArray1[1] = (Number) byte1;
      Float float0 = new Float((float) (byte) (-98));
      assertNotNull(float0);
      assertEquals((-98.0F), (float)float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      Long long0 = new Long(2703L);
      assertNotNull(long0);
      assertEquals(2703L, (long)long0);
      
      numberArray1[3] = (Number) long0;
      Float float1 = new Float((double) (byte) (-98));
      assertNotNull(float1);
      assertEquals((-98.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      numberArray1[4] = (Number) float1;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      numberArray1[5] = (Number) double0;
      Float float2 = new Float((float) (byte) (-100));
      assertNotNull(float2);
      assertEquals((-100.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      numberArray1[6] = (Number) float2;
      Float float3 = new Float((double) (byte) (-100));
      assertNotNull(float3);
      assertEquals((-100.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      numberArray1[7] = (Number) float3;
      Float float4 = new Float((float) (byte) (-100));
      assertNotNull(float4);
      assertEquals((-100.0F), (float)float4, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      numberArray1[8] = (Number) float4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float3;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) float3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) float2;
      numberArray3[3] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) byte1;
      numberArray4[1] = (Number) float1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) byte1;
      numberArray5[1] = (Number) byte1;
      numberArray5[2] = (Number) byte0;
      numberArray5[3] = (Number) float2;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-2007), (-536));
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, (-2007), (-872));
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-872), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(slidingCategoryDataset1);
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      
      boolean boolean0 = slidingCategoryDataset0.equals(slidingCategoryDataset1);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-536), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-872), slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2007), slidingCategoryDataset1.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset1.getNotify());
      assertEquals(5, stringArray0.length);
      assertEquals(5, numberArray0.length);
      assertFalse(boolean0);
      assertFalse(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      assertFalse(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(list0);
      
      int int0 = 4023;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 4023, 4023);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(4023, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4023, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(4023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-836), (-209));
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getUnderlyingDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnIndex(comparable0);
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      defaultCategoryDataset1.clear();
      defaultCategoryDataset1.clone();
      defaultCategoryDataset0.clear();
      slidingCategoryDataset0.equals(defaultCategoryDataset1);
      slidingCategoryDataset0.getMaximumCategoryCount();
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      Integer integer0 = new Integer((-1269));
      slidingCategoryDataset0.equals(integer0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getValue((Comparable) integer0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown rowKey: -1269
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-836), (-209));
      slidingCategoryDataset0.getRowKeys();
      Integer integer0 = new Integer((-836));
      slidingCategoryDataset0.getUnderlyingDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnIndex(comparable0);
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      slidingCategoryDataset0.getNotify();
      slidingCategoryDataset0.getMaximumCategoryCount();
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      Integer integer1 = new Integer((-1269));
      slidingCategoryDataset0.equals(integer1);
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getValue((Comparable) integer1, (Comparable) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: -1269
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[][] doubleArray0 = new double[10][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[3] = (-492.87401827896);
      doubleArray1[4] = (-115.106303273);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.2;
      doubleArray2[1] = (-492.87401827896);
      doubleArray2[2] = (-115.106303273);
      doubleArray2[3] = 0.2;
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.2;
      doubleArray3[1] = (-115.106303273);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-115.106303273);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-115.106303273);
      doubleArray4[1] = (-115.106303273);
      doubleArray4[2] = (-492.87401827896);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 0.2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      int int0 = 2687;
      defaultIntervalCategoryDataset0.clone();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 2687, 2687);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey(2687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5374
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 1376);
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getColumnIndex(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((double) 0, (Comparable) comparable1, (Comparable) comparable1);
      TaskSeriesCollection taskSeriesCollection0 = mock(TaskSeriesCollection.class, new ViolatedAssumptionAnswer());
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      int int0 = 0;
      xYTaskDataset0.validateObject();
      xYTaskDataset0.getStartXValue(0, 0);
      defaultCategoryDataset0.addChangeListener(xYTaskDataset0);
      int int1 = 151;
      Double double0 = new Double((-0.4));
      slidingCategoryDataset0.getColumnCount();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey(255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
