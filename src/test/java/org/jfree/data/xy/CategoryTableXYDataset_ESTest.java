/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:18:27 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DomainOrder;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryTableXYDataset_ESTest extends CategoryTableXYDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), (-771.46950776674), "");
      categoryTableXYDataset0.validateObject();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.getSeriesCount();
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.add(1.0, (double) 2, "");
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY(2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 1640;
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.remove((double) 1640, "SGj{UwwB5QhnYlOA{");
      int int1 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.add(346.669578073, 346.669578073, "\"-&4");
      categoryTableXYDataset0.addChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getX((-816), 0);
      categoryTableXYDataset0.clone();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getYValue(1640, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1640, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "";
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), 0.8, "");
      categoryTableXYDataset0.validateObject();
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getDomainBounds(false);
      int int0 = 0;
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.isAutoWidth();
      categoryTableXYDataset0.getEndY(0, 0);
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      int int1 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 1640;
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.remove((double) 1640, "SGj{UwwB5QhnYlOA{");
      int int1 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.add((-2538.0), (-2538.0), "\"-&L");
      categoryTableXYDataset0.addChangeListener(datasetChangeListener0);
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getSeriesCount();
      // Undeclared exception!
      try { 
        categoryTableXYDataset1.remove((Number) 1, (String) null, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), 0.8, "");
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.getSeriesCount();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.add(1.0, (double) 2, "");
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY(2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "";
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), 2.4245545544495886, "");
      categoryTableXYDataset0.validateObject();
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getDomainBounds(false);
      int int0 = 0;
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      int int1 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 1640;
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.remove((double) 1640, "SGj{UwwB5QhnYlOA{");
      int int1 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.add(346.669578073, 346.669578073, "\"-&4");
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset1.getDomainBounds(false);
      categoryTableXYDataset1.getSeriesKey(0);
      categoryTableXYDataset0.getDomainBounds(false);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getYValue(1640, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1640, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "";
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), (-771.46950776674), "");
      categoryTableXYDataset0.validateObject();
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.getDomainBounds(false);
      int int0 = 0;
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      int int1 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = 0.0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      String string0 = "org.jfree.data.xy.CategoryTableXYDataset";
      categoryTableXYDataset0.remove(0.0, "org.jfree.data.xy.CategoryTableXYDataset");
      categoryTableXYDataset0.remove(1.0, ",2''\"h5WPXCqG0b");
      categoryTableXYDataset0.add(1760.2834551557378, 0.0, "AG|`?d:U>%n3viVhQJj");
      categoryTableXYDataset0.getDomainLowerBound(true);
      categoryTableXYDataset0.isAutoWidth();
      int int0 = 0;
      categoryTableXYDataset0.getEndX(0, 0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartYValue(1388, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1388, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add(0.0, 0.0, "3G)^fy");
      categoryTableXYDataset0.getX(801, 0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setNotify(false);
      categoryTableXYDataset0.remove(0.0, "J,W");
      categoryTableXYDataset0.clear();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      categoryTableXYDataset0.getDomainLowerBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY((-1677), (-1677));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clear();
      categoryTableXYDataset0.setNotify(true);
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset1.add(2833.7073168, (double) 2047, "");
      categoryTableXYDataset0.equals(categoryTableXYDataset1);
      categoryTableXYDataset0.setIntervalWidth(2047);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY(2047, 2047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2047, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.validateObject();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.add((Number) 1.0, (Number) 0, "org.jfree.data.general.DatasetChangeEvent", false);
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.getSeriesCount();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getStartY(0, 0);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.add(1.0, (double) 1, "");
      categoryTableXYDataset0.getEndY(1, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "";
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((-771.46950776674), 0.8, "");
      categoryTableXYDataset0.validateObject();
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.getItemCount((-1591));
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getDomainBounds(false);
      int int0 = 0;
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.equals("");
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.getIntervalWidth();
      int int1 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.getItemCount(0);
      categoryTableXYDataset1.getDomainLowerBound(false);
      categoryTableXYDataset0.indexOf(0);
      categoryTableXYDataset0.add((-1159.11229), (-1159.11229), "8N~X<G");
      categoryTableXYDataset1.getItemCount();
      categoryTableXYDataset0.getEndX(0, 0);
      categoryTableXYDataset0.clone();
      categoryTableXYDataset1.getDomainUpperBound(true);
      categoryTableXYDataset0.getX((-2895), 0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartX(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.setAutoWidth(false);
      categoryTableXYDataset0.add((-1.0), 0.0, "#]");
      categoryTableXYDataset0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getX((-1117), (-741));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.validateObject();
      categoryTableXYDataset0.getItemCount(1);
      categoryTableXYDataset0.add((Number) 0, (Number) null, "", true);
      categoryTableXYDataset0.validateObject();
      categoryTableXYDataset0.getDomainLowerBound(true);
      Object object0 = categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.equals(object0);
      categoryTableXYDataset0.getDomainBounds(false);
      Number number0 = categoryTableXYDataset0.getEndX(0, 0);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.add(number0, number0, "", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.validateObject();
      categoryTableXYDataset0.validateObject();
      categoryTableXYDataset0.getDomainLowerBound(true);
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset1.setIntervalWidth(2575.7119311818);
      boolean boolean0 = false;
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.equals(categoryTableXYDataset1);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey((-1915));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      categoryTableXYDataset0.getIntervalPositionFactor();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX((-504), (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "8MBUjfu@5W\"";
      categoryTableXYDataset0.add((-4408.969185171), (-1.0), "8MBUjfu@5W\"");
      categoryTableXYDataset0.getStartX((-1), 0);
      categoryTableXYDataset0.isAutoWidth();
      categoryTableXYDataset0.getDomainUpperBound(false);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 0, (double) 0, "");
      categoryTableXYDataset0.getStartXValue(0, 0);
      categoryTableXYDataset0.add((-0.5), 0.5, "F~-,H5");
      categoryTableXYDataset0.getY(0, 0);
      categoryTableXYDataset0.setIntervalWidth(0.5);
      categoryTableXYDataset0.add(0.5, 1914.6154647755477, "~hKv4zyZ8");
      categoryTableXYDataset0.setIntervalWidth(0.5);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.addChangeListener(datasetChangeListener0);
      categoryTableXYDataset0.getYValue(0, 0);
      categoryTableXYDataset0.getStartY(1, 1);
      categoryTableXYDataset0.getEndY(1, 1);
      categoryTableXYDataset0.getDomainLowerBound(true);
      categoryTableXYDataset0.setIntervalWidth(0);
      categoryTableXYDataset0.getItemCount(37);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.getItemCount(3);
      categoryTableXYDataset0.getSeriesCount();
      categoryTableXYDataset0.getIntervalPositionFactor();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(3, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setAutoWidth(false);
      categoryTableXYDataset0.add(0.8, 0.8, "");
      categoryTableXYDataset0.setIntervalWidth(0.8);
      categoryTableXYDataset0.setIntervalPositionFactor(0.8);
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.setIntervalWidth(0.8);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY(1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(true);
      categoryTableXYDataset0.setIntervalPositionFactor(Double.NaN);
      categoryTableXYDataset0.getIntervalWidth();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset2 = (CategoryTableXYDataset)categoryTableXYDataset1.clone();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset2.getItemCount());
      assertEquals(0, categoryTableXYDataset2.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset2.getDomainOrder());
      assertTrue(categoryTableXYDataset2.getNotify());
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertNotNull(categoryTableXYDataset2);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      
      categoryTableXYDataset0.setAutoWidth(true);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      
      categoryTableXYDataset1.setNotify(true);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset1.addChangeListener(datasetChangeListener0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      boolean boolean0 = false;
      double double0 = categoryTableXYDataset1.getDomainUpperBound(false);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      boolean boolean1 = categoryTableXYDataset0.equals(categoryTableXYDataset2);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset2.getItemCount());
      assertEquals(0, categoryTableXYDataset2.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset2.getDomainOrder());
      assertTrue(categoryTableXYDataset2.getNotify());
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      
      Comparable<Long> comparable0 = (Comparable<Long>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = categoryTableXYDataset0.indexOf(comparable0);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
      assertEquals((-1), int0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      
      categoryTableXYDataset1.add((Number) (-1), (Number) null, "", true);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1, categoryTableXYDataset1.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(1, categoryTableXYDataset1.getItemCount());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double1 = categoryTableXYDataset1.getIntervalWidth();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1, categoryTableXYDataset1.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(1, categoryTableXYDataset1.getItemCount());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset2));
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset1.remove((Number) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      categoryTableXYDataset0.add((-771.46950776674), 0.8, "");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.validateObject();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      double double0 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount((-1591));
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, int0);
      
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(772.46950776674, range1.getLength(), 0.01);
      assertEquals((-385.23475388337), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-771.46950776674), range1.getLowerBound(), 0.01);
      assertFalse(range1.isNaNRange());
      assertNotNull(range1);
      
      int int1 = 0;
      Number number0 = categoryTableXYDataset0.getY(0, 0);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.8, number0);
      
      boolean boolean1 = categoryTableXYDataset0.equals("");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double1 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      int int2 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = (-224);
      int int1 = categoryTableXYDataset0.getItemCount((-224));
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(0.0, 0.0, "org.jfree.data.general.AbstractDataset");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      int int2 = categoryTableXYDataset1.getItemCount(0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY((-3688), (-3688));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      int int0 = categoryTableXYDataset1.getItemCount(0);
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0, int0);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset1.getDomainLowerBound(false);
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      int int1 = categoryTableXYDataset0.indexOf(0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      categoryTableXYDataset0.add((-1159.11229), (-1159.11229), "8N~X<G");
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      int int2 = categoryTableXYDataset1.getItemCount();
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Number number0 = categoryTableXYDataset0.getEndX(0, 0);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(number0.equals((Object)double0));
      assertEquals((-1158.61229), number0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      double double1 = categoryTableXYDataset1.getDomainUpperBound(true);
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getSeriesCount();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(0, int0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      categoryTableXYDataset0.remove((Number) 0, "SKButH", true);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      categoryTableXYDataset0.add((double) 2609, 0.0, "@t2e");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey(2609);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2609, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.add((Number) null, (Number) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.setAutoWidth(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      categoryTableXYDataset0.setAutoWidth(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      
      categoryTableXYDataset0.add(0.0, 0.0, "!$tcj");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = categoryTableXYDataset0.isAutoWidth();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      int int0 = (-2288);
      int int1 = (-208);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY((-2288), (-208));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      boolean boolean0 = categoryTableXYDataset0.hasListener(categoryTableXYDataset1);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(boolean0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset2 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset2.getDomainOrder());
      assertEquals(0, categoryTableXYDataset2.getSeriesCount());
      assertEquals(0, categoryTableXYDataset2.getItemCount());
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset2.getNotify());
      assertNotNull(categoryTableXYDataset2);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset3 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset3.getNotify());
      assertEquals(1.0, categoryTableXYDataset3.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset3.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset3.getSeriesCount());
      assertTrue(categoryTableXYDataset3.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset3.getDomainOrder());
      assertEquals(0, categoryTableXYDataset3.getItemCount());
      assertNotNull(categoryTableXYDataset3);
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset2));
      
      double double0 = categoryTableXYDataset3.getIntervalWidth();
      assertTrue(categoryTableXYDataset3.getNotify());
      assertEquals(1.0, categoryTableXYDataset3.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset3.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset3.getSeriesCount());
      assertTrue(categoryTableXYDataset3.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset3.getDomainOrder());
      assertEquals(0, categoryTableXYDataset3.getItemCount());
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset3.equals((Object)categoryTableXYDataset2));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(categoryTableXYDataset3, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset3, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset3, categoryTableXYDataset1);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.remove((Number) 1.0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.setIntervalWidth((-2805.99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'w' argument.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.add(0.0, 0.0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY(1543, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 1235;
      int int1 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX(0, (-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNotNull(categoryTableXYDataset0);
      
      DatasetGroup datasetGroup0 = categoryTableXYDataset0.getGroup();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      categoryTableXYDataset0.setGroup(datasetGroup0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals("NOID", datasetGroup0.getID());
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      int int0 = 364;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey(364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 364, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      categoryTableXYDataset0.add(0.0, 0.0, "3G)^fy");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey(801);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 801, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-3397));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartXValue(612, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(948.89834614618, 0.0, "key");
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      categoryTableXYDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getX(2223, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.setAutoWidth(false);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.add((Number) null, (Number) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.remove(0.0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getSeriesCount();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      double double0 = categoryTableXYDataset0.getIntervalPositionFactor();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, double0, 0.01);
      
      categoryTableXYDataset0.add((Number) 0, (Number) 0.5, ").", false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount(1);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX((-438), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      boolean boolean0 = categoryTableXYDataset0.equals(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertTrue(categoryTableXYDataset1.getNotify());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(boolean0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndYValue((-3044), 389);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 389, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY((-610), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = (-1399.831585);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.setIntervalPositionFactor((-1399.831585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = false;
      int int0 = (-1634);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY((-1634), (-1634));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(1339, 1339);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1339, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1.0, 1.0, "r2k=");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      categoryTableXYDataset0.add(1.0, 1.0, "");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(1, categoryTableXYDataset1.getItemCount());
      assertEquals(2, categoryTableXYDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = categoryTableXYDataset0.isAutoWidth();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.setIntervalPositionFactor((-1310.611623));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getIntervalPositionFactor();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, double0, 0.01);
      
      categoryTableXYDataset0.remove((Number) 0.5, "t<bJ/W: s", false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNotNull(categoryTableXYDataset0);
      
      DatasetGroup datasetGroup0 = categoryTableXYDataset0.getGroup();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      categoryTableXYDataset0.setGroup(datasetGroup0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, int0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertNull(range0);
      
      boolean boolean0 = categoryTableXYDataset0.equals((Object) null);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartX((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      int int1 = categoryTableXYDataset0.getItemCount();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.setIntervalWidth(2.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setAutoWidth(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.setAutoWidth(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2.0, double0, 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY(1186, (-1924));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      categoryTableXYDataset0.add((-771.46950776674), (-771.46950776674), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      double double0 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount((-1591));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, int0);
      
      categoryTableXYDataset0.add((Number) 1.0, (Number) 1, "org.jfree.data.general.DatasetChangeEvent", false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      
      categoryTableXYDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      
      int int1 = 0;
      Number number0 = categoryTableXYDataset0.getY(0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals((-771.46950776674), number0);
      
      boolean boolean1 = categoryTableXYDataset0.equals("");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double1 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = categoryTableXYDataset0.getIntervalWidth();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(2, categoryTableXYDataset0.getItemCount());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(2, categoryTableXYDataset0.getSeriesCount());
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      int int2 = (-268);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY(0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.setIntervalWidth(2.0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(2.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY(1186, 1186);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1186, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.remove(0.0, "J,W");
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.clear();
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(false);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY((-1677), (-1677));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.remove(0.0, "J,W");
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      categoryTableXYDataset0.clear();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(false);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertNotNull(categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      boolean boolean0 = categoryTableXYDataset0.equals(categoryTableXYDataset1);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset0.getDomainOrder());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset1.getItemCount());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.getNotify());
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(DomainOrder.NONE, categoryTableXYDataset1.getDomainOrder());
      assertEquals(0, categoryTableXYDataset1.getSeriesCount());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(boolean0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndY((-1677), (-1677));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainLowerBound(true);
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset1.equals(categoryTableXYDataset0);
      categoryTableXYDataset0.getDomainUpperBound(false);
      DatasetGroup datasetGroup0 = categoryTableXYDataset1.getGroup();
      categoryTableXYDataset0.setGroup(datasetGroup0);
      categoryTableXYDataset0.equals(categoryTableXYDataset1);
      categoryTableXYDataset0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        categoryTableXYDataset1.getEndX(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getIntervalPositionFactor();
      categoryTableXYDataset0.setIntervalPositionFactor(0.5);
      categoryTableXYDataset0.getSeriesCount();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getSeriesKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clear();
      categoryTableXYDataset0.setNotify(false);
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      categoryTableXYDataset1.add((double) 2047, (double) 2047, "");
      categoryTableXYDataset0.equals(categoryTableXYDataset1);
      categoryTableXYDataset0.setIntervalWidth(0.5);
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getY(2047, 2047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2047, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-557.0050957170689), 0.0, "org.jfree.data.xy.CategoryTableXYDataset");
      categoryTableXYDataset0.getIntervalPositionFactor();
      categoryTableXYDataset0.remove((Number) 0.5, "org.jfree.data.xy.CategoryTableXYDataset", false);
      int int1 = (-3);
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartX(10, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getStartY((-674), 3467);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3467, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
