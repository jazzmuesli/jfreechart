/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:21:05 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.YInterval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YInterval_ESTest extends YInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YInterval yInterval0 = new YInterval((-1361.42582869632), (-1361.42582869632), (-1361.42582869632));
      YInterval yInterval1 = new YInterval((-1361.42582869632), (-1361.42582869632), 0.0);
      boolean boolean0 = yInterval1.equals(yInterval0);
      assertEquals((-1361.42582869632), yInterval1.getYLow(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1361.42582869632), yInterval0.getYHigh(), 0.01);
      assertFalse(yInterval0.equals((Object)yInterval1));
      assertEquals((-1361.42582869632), yInterval1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YInterval yInterval0 = new YInterval(2423.0, (-1.0), 2423.0);
      YInterval yInterval1 = new YInterval(2423.0, (-945.0), 2423.0);
      boolean boolean0 = yInterval1.equals(yInterval0);
      assertFalse(boolean0);
      assertFalse(yInterval0.equals((Object)yInterval1));
      assertEquals(2423.0, yInterval1.getYHigh(), 0.01);
      assertEquals(2423.0, yInterval1.getY(), 0.01);
      assertEquals((-945.0), yInterval1.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YInterval yInterval0 = new YInterval(0.0, 0.0, 2378.88);
      YInterval yInterval1 = new YInterval(2378.88, 0.0, 1239.689);
      boolean boolean0 = yInterval0.equals(yInterval1);
      assertEquals(2378.88, yInterval1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(1239.689, yInterval1.getYHigh(), 0.01);
      assertEquals(0.0, yInterval1.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YInterval yInterval0 = new YInterval(3173.248460607, 0.0, 349.570263736);
      double double0 = yInterval0.getYLow();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3173.248460607, yInterval0.getY(), 0.01);
      assertEquals(349.570263736, yInterval0.getYHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YInterval yInterval0 = new YInterval(0.0, 2207.6, 0.0);
      double double0 = yInterval0.getYLow();
      assertEquals(0.0, yInterval0.getYHigh(), 0.01);
      assertEquals(0.0, yInterval0.getY(), 0.01);
      assertEquals(2207.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YInterval yInterval0 = new YInterval(0.0, 2207.6, 0.0);
      double double0 = yInterval0.getYHigh();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2207.6, yInterval0.getYLow(), 0.01);
      assertEquals(0.0, yInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YInterval yInterval0 = new YInterval(2423.0, (-1.0), 2423.0);
      double double0 = yInterval0.getYHigh();
      assertEquals(2423.0, yInterval0.getY(), 0.01);
      assertEquals(2423.0, double0, 0.01);
      assertEquals((-1.0), yInterval0.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YInterval yInterval0 = new YInterval(0.0, 2207.6, 0.0);
      double double0 = yInterval0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2207.6, yInterval0.getYLow(), 0.01);
      assertEquals(0.0, yInterval0.getYHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YInterval yInterval0 = new YInterval(2423.0, (-1.0), 2423.0);
      double double0 = yInterval0.getY();
      assertEquals(2423.0, double0, 0.01);
      assertEquals(2423.0, yInterval0.getYHigh(), 0.01);
      assertEquals((-1.0), yInterval0.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YInterval yInterval0 = new YInterval(0.0, 2207.6, 0.0);
      YInterval yInterval1 = new YInterval(0.0, 2207.6, 0.0);
      boolean boolean0 = yInterval0.equals(yInterval1);
      assertEquals(0.0, yInterval1.getYHigh(), 0.01);
      assertEquals(0.0, yInterval1.getY(), 0.01);
      assertTrue(boolean0);
      assertEquals(2207.6, yInterval1.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YInterval yInterval0 = new YInterval(2423.0, (-1.0), 2423.0);
      YInterval yInterval1 = new YInterval(2423.0, (-945.0), 2423.0);
      boolean boolean0 = yInterval0.equals(yInterval1);
      assertEquals(2423.0, yInterval1.getY(), 0.01);
      assertFalse(boolean0);
      assertFalse(yInterval1.equals((Object)yInterval0));
      assertEquals((-945.0), yInterval1.getYLow(), 0.01);
      assertEquals(2423.0, yInterval1.getYHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YInterval yInterval0 = new YInterval(3173.248460607, 0.0, 349.570263736);
      YInterval yInterval1 = new YInterval((-1867.7937), 3173.248460607, 0.0);
      boolean boolean0 = yInterval0.equals(yInterval1);
      assertEquals((-1867.7937), yInterval1.getY(), 0.01);
      assertEquals(3173.248460607, yInterval1.getYLow(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, yInterval1.getYHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YInterval yInterval0 = new YInterval(3173.248460607, 0.0, 349.570263736);
      boolean boolean0 = yInterval0.equals("");
      assertFalse(boolean0);
      assertEquals(349.570263736, yInterval0.getYHigh(), 0.01);
      assertEquals(3173.248460607, yInterval0.getY(), 0.01);
      assertEquals(0.0, yInterval0.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YInterval yInterval0 = new YInterval(3173.248460607, 0.0, 349.570263736);
      boolean boolean0 = yInterval0.equals(yInterval0);
      assertEquals(349.570263736, yInterval0.getYHigh(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, yInterval0.getYLow(), 0.01);
      assertEquals(3173.248460607, yInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YInterval yInterval0 = new YInterval((-1361.42582869632), (-1361.42582869632), (-1361.42582869632));
      YInterval yInterval1 = new YInterval((-1361.42582869632), (-1361.42582869632), 0.0);
      boolean boolean0 = yInterval0.equals(yInterval1);
      assertFalse(boolean0);
      assertEquals(0.0, yInterval1.getYHigh(), 0.01);
      assertEquals((-1361.42582869632), yInterval1.getYLow(), 0.01);
      assertFalse(yInterval1.equals((Object)yInterval0));
      assertEquals((-1361.42582869632), yInterval1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YInterval yInterval0 = new YInterval((-1361.42582869632), (-1361.42582869632), (-1361.42582869632));
      double double0 = yInterval0.getY();
      assertEquals((-1361.42582869632), double0, 0.01);
      assertEquals((-1361.42582869632), yInterval0.getYHigh(), 0.01);
      assertEquals((-1361.42582869632), yInterval0.getYLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      YInterval yInterval0 = new YInterval((-1361.42582869632), (-1361.42582869632), (-1361.42582869632));
      double double0 = yInterval0.getYLow();
      assertEquals((-1361.42582869632), double0, 0.01);
      assertEquals((-1361.42582869632), yInterval0.getYHigh(), 0.01);
      assertEquals((-1361.42582869632), yInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YInterval yInterval0 = new YInterval((-1361.42582869632), (-1361.42582869632), (-1361.42582869632));
      double double0 = yInterval0.getYHigh();
      assertEquals((-1361.42582869632), yInterval0.getYLow(), 0.01);
      assertEquals((-1361.42582869632), double0, 0.01);
      assertEquals((-1361.42582869632), yInterval0.getY(), 0.01);
  }
}
