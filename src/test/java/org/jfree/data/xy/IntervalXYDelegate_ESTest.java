/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:39:21 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.DomainOrder;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IntervalXYDelegate_ESTest extends IntervalXYDelegate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(65857190400000L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(6.58571903999995E13, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(mockDate0, xYBarDataset0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double1 = intervalXYDelegate0.getFixedIntervalWidth();
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int1 = intervalXYDelegate0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Double double2 = new Double(65857190400000L);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(6.58571904E13, (double)double2, 0.01);
      assertNotNull(double2);
      
      double double3 = intervalXYDelegate1.getStartXValue(0, 1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(6.58571904E13, double3, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate1.clone();
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean0 = intervalXYDelegate0.equals("org.jfree.data.xy.IntervalXYDelegate");
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertFalse(boolean0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double4 = intervalXYDelegate1.getDomainLowerBound(false);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(6.58571904E13, double4, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double5 = intervalXYDelegate1.getEndXValue(1596, 0);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(6.58571904E13, double5, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.hashCode();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      intervalXYDelegate0.setIntervalPositionFactor(0.0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      defaultIntervalXYDataset0.validateObject();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      defaultIntervalXYDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      double double0 = intervalXYDelegate0.getIntervalPositionFactor();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      intervalXYDelegate0.setFixedIntervalWidth(0.0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      intervalXYDelegate0.hashCode();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = intervalXYDelegate0.equals(object0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(65857190400000L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      double double0 = new Double(0);
      assertEquals(0.0, double0, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(mockDate0, xYBarDataset0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(65857190400000L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(6.58571903999995E13, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(mockDate0, xYBarDataset0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double1 = intervalXYDelegate0.getFixedIntervalWidth();
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int1 = intervalXYDelegate0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Double double2 = new Double(65857190400000L);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(6.58571904E13, (double)double2, 0.01);
      assertNotNull(double2);
      
      double double3 = intervalXYDelegate1.getStartXValue(0, 1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(6.58571904E13, double3, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate1.clone();
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(0.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotNull(intervalXYDelegate2);
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean0 = intervalXYDelegate0.equals("org.jfree.data.xy.IntervalXYDelegate");
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertFalse(boolean0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double4 = intervalXYDelegate1.getDomainLowerBound(false);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertEquals(6.58571904E13, double4, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double5 = intervalXYDelegate2.getIntervalWidth();
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertEquals(0.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertEquals(0.0, double5, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-822);
      MockDate mockDate0 = new MockDate(2145834274, 2145834274, 2145834274, (-2138517801), (-822));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, (-1441.03837413963), (-536.0), 1.0, 1.0);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, true, true);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.addChangeListener(xYSeriesCollection0);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      int int1 = 5;
      xYSeries0.add((double) (-822), 2922.0, true);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-822.0), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2922.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2922.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals((-822.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      assertEquals("Tue Mar 19 20:35:34 GMT 211054444", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-822.0), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2922.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2922.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals((-822.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-822.0), range0.getLowerBound(), 0.01);
      assertEquals((-822.0), range0.getUpperBound(), 0.01);
      assertEquals((-822.0), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndXValue(5, (-267));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      intervalXYDelegate0.datasetChanged((DatasetChangeEvent) null);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate1.hashCode();
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      
      boolean boolean0 = intervalXYDelegate0.equals(intervalXYDelegate1);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2822;
      MatrixSeries matrixSeries0 = new MatrixSeries("Argument 'd' outside valid range.", 2822, 0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(2822, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(2822, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, false);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(2822, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      mockDate0.setTime(1986);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1986L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1985.5, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(mockDate0, xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double1 = intervalXYDelegate0.getFixedIntervalWidth();
      assertNotEquals(double1, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int1 = intervalXYDelegate0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Double double2 = (Double)intervalXYDelegate1.getStartX(1986, 0);
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1986.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int2 = intervalXYDelegate0.hashCode();
      assertFalse(int2 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX((-1517), 3831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3831
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1496.11283, 0.0, "Unknown data");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      int int0 = categoryTableXYDataset0.indexOf(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1), int0);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double4, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertEquals(1347.31283, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertEquals(1347.31283, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate1.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      Double double0 = (Double)intervalXYDelegate1.getEndX((-3), (-3));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertEquals((-2.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      Double double1 = (Double)intervalXYDelegate0.getStartX((-3), 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals((-3.5), (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(double3, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(Double.NaN, double3, 0.01);
      
      Double double4 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double4, 0.01);
      assertNotNull(double4);
      
      double double5 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(1.0, double5, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double6 = intervalXYDelegate0.getStartXValue((-3), (-3));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals((-3.5), double6, 0.01);
      
      double double7 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(1.0, double7, 0.01);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotNull(intervalXYDelegate3);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      
      double double8 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(0.5, double8, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      
      Double double9 = (Double)intervalXYDelegate1.getEndX(2652, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertEquals(2652.5, (double)double9, 0.01);
      assertNotNull(double9);
      
      IntervalXYDelegate intervalXYDelegate4 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate4.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate4.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate4.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate4.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate4.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate4.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate4.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate4.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate4);
      assertNotSame(intervalXYDelegate4, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate4, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate4, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate4, intervalXYDelegate3);
      assertNotNull(intervalXYDelegate4);
      
      double double10 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate4));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate4);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate4));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double3, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate4);
      assertEquals(Double.NaN, double11, 0.01);
      
      int int0 = (-975);
      int int1 = (-851);
      boolean boolean0 = intervalXYDelegate1.equals("FClLw}<<.");
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate4));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate4));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate4);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate4);
      assertFalse(boolean0);
      
      double double12 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate4));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertEquals(double12, double10, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double2, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertEquals(double12, double3, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate4);
      assertEquals(Double.NaN, double12, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double4, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      IntervalXYDelegate intervalXYDelegate3 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate3);
      
      boolean boolean0 = intervalXYDelegate2.equals(intervalXYDelegate3);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate2.getStartXValue((-2030), (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = categoryTableXYDataset0.equals("r=");
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double4, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      Double double5 = (Double)intervalXYDelegate0.getEndX(233, 0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(449.90352552520903, (double)double5, 0.01);
      assertNotNull(double5);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      mockDate0.setTime(1986);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1986L, long0);
      
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getDomainLowerBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(148.8, 148.8);
      assertEquals(148.8, double1, 0.01);
      
      double double2 = Double.min((-34.9), Double.NaN);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double4, 0.01);
      
      double double5 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double5, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals((-152.303525525209), range0.getLowerBound(), 0.01);
      assertEquals(148.8, range0.getCentralValue(), 0.01);
      assertEquals(449.90352552520903, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(602.207051050418, range0.getLength(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      Double double0 = (Double)intervalXYDelegate1.getEndX((-3), (-3));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals((-2.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = (Double)intervalXYDelegate0.getStartX((-3), 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-3.5), (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double3, double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double4, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double5 = new Integer(2652);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(2652, double5, 0.01);
      
      double double6 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double6, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      double double7 = intervalXYDelegate0.getEndXValue((-3), 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-2.5), double7, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotNull(intervalXYDelegate3);
      
      double double8 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double8, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      mockDate0.setTime(1986);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1986L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1985.5, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(mockDate0, xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(datasetChangeEvent0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double1 = intervalXYDelegate0.getFixedIntervalWidth();
      assertNotEquals(double1, double0, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int1 = intervalXYDelegate0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int2 = intervalXYDelegate0.hashCode();
      assertFalse(int2 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX((-1517), 3831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3831
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(Double.NaN);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(true);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double4, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      Range range0 = intervalXYDelegate1.getDomainBounds(false);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(148.8, range0.getLowerBound(), 0.01);
      assertEquals(148.8, range0.getUpperBound(), 0.01);
      assertEquals(148.8, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(range0);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double2 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double2, double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double2, 0.01);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      Double double0 = (Double)intervalXYDelegate0.getStartX(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double2, double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      Double double3 = new Double(Double.NaN);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double3, 0.01);
      assertNotNull(double3);
      
      double double4 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double4, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double5 = intervalXYDelegate0.getStartXValue(0, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), double5, 0.01);
      
      double double6 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double6, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      Double double7 = (Double)intervalXYDelegate2.getStartX(4383, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertEquals(4382.5, (double)double7, 0.01);
      assertNotNull(double7);
      
      double double8 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(0.5, double8, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate3);
      
      double double9 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double9, 0.01);
      
      TaskSeries taskSeries0 = taskSeriesCollection0.getSeries((Comparable) domainOrder0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(taskSeries0);
      
      double double10 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double9, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double10, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      double double0 = intervalXYDelegate0.getStartXValue(2675, (-4437));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(2674.5, double0, 0.01);
      
      Double double1 = (Double)intervalXYDelegate0.getStartX(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double2, double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double3, 0.01);
      
      Double double4 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double4, 0.01);
      assertNotNull(double4);
      
      double double5 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double5, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double6 = intervalXYDelegate0.getStartXValue(0, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), double6, 0.01);
      
      double double7 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double7, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      double double8 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(0.5, double8, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate3);
      
      double double9 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double3, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double9, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double10, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double11, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double4, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      Double double0 = (Double)intervalXYDelegate1.getEndX((-3), (-3));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals((-2.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      Double double1 = (Double)intervalXYDelegate0.getStartX((-3), 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-3.5), (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double3, double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double3, 0.01);
      
      Double double4 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double4, 0.01);
      assertNotNull(double4);
      
      double double5 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double5, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double6 = intervalXYDelegate0.getStartXValue((-3), (-3));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-3.5), double6, 0.01);
      
      double double7 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double7, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      double double8 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(0.5, double8, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate3);
      
      double double9 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double10, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(584.16844033172);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(true);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(584.16844033172, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-143.28422016586), double4, 0.01);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      Double double0 = (Double)intervalXYDelegate0.getStartX(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double2, double1, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      Double double3 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double3, 0.01);
      assertNotNull(double3);
      
      double double4 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double4, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double5 = intervalXYDelegate0.getStartXValue(0, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), double5, 0.01);
      
      double double6 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double6, 0.01);
      
      Double double7 = (Double)intervalXYDelegate0.getStartX((-1371), 1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-1371.5), (double)double7, 0.01);
      assertNotNull(double7);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      
      double double8 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(0.5, double8, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate3);
      
      double double9 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertEquals(Double.NaN, double10, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1986, 1986, 1986);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 836.573, 836.573, 2333.383882, 836.573, 206.6817408);
      assertEquals("Wed Dec 06 00:00:00 GMT 4056", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      mockDate0.setTime(1986);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      long long0 = mockDate0.getTime();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1986L, long0);
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0, int0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 2333.383882);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1985.5, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      double double1 = intervalXYDelegate0.getFixedIntervalWidth();
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int1 = intervalXYDelegate0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      int int2 = intervalXYDelegate0.hashCode();
      assertFalse(int2 == int0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2333.383882, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX((-1517), 3831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3831
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertNotNull(defaultOHLCDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      defaultTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      DatasetGroup datasetGroup0 = null;
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX((-1944), (-1944));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = intervalXYDelegate0.isAutoWidth();
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(xYDatasetTableModel0);
      
      xYIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = false;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0, false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYIntervalSeriesCollection0, xYIntervalSeriesCollection0);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = intervalXYDelegate0.isAutoWidth();
      assertTrue(boolean1 == boolean0);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(boolean1);
      
      int int0 = 5;
      int int1 = 7;
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartXValue(5, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0, false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      double double0 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, double0, 0.01);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNull(range0);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      Range range1 = intervalXYDelegate0.getDomainBounds(false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setIntervalPositionFactor((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double4, 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(0, (-2030));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      xYTaskDataset0.setNotify(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      Double double0 = (Double)intervalXYDelegate0.getStartX(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double2, double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      Double double3 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double3, 0.01);
      assertNotNull(double3);
      
      double double4 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double4, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double5 = intervalXYDelegate0.getStartXValue(0, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), double5, 0.01);
      
      double double6 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double6, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      double double7 = intervalXYDelegate0.getEndXValue(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(0.5, double7, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotNull(intervalXYDelegate3);
      
      double double8 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertEquals(Double.NaN, double9, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), (-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = true;
      double double0 = intervalXYDelegate0.getDomainUpperBound(true);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      intervalXYDelegate0.setIntervalPositionFactor(0.0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      xYSeriesCollection0.removeAllSeries();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setIntervalPositionFactor(2264.3097872445);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultWindDataset0, false);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setIntervalPositionFactor((-2210.65588375508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertNotNull(defaultXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYDataset0, false);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Integer integer0 = new Integer((-970));
      assertEquals((-970), (int)integer0);
      assertNotNull(integer0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(integer0);
      assertNotNull(seriesChangeEvent0);
      
      defaultXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      
      intervalXYDelegate0.setFixedIntervalWidth(765.2183928677);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(765.2183928677, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(765.2183928677, intervalXYDelegate0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 5;
      MatrixSeries matrixSeries0 = new MatrixSeries("Argument 'd' outside valid range.", 5, 5);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      double double0 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(4.0, double0, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = null;
      int int1 = 3435;
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartXValue(3435, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3435, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndXValue((-3696), (-3696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0, true);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.hashCode();
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      assertTrue(xYIntervalSeriesCollection0.getNotify());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset1.getNotify());
      assertFalse(xYTaskDataset1.isTransposed());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotNull(xYTaskDataset1);
      
      intervalXYDelegate0.setIntervalPositionFactor(0.0);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      
      int int0 = 214;
      double double0 = intervalXYDelegate0.getEndXValue(0, 214);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(1.0, double0, 0.01);
      
      int int1 = 0;
      Double double1 = (Double)intervalXYDelegate0.getStartX(214, 0);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(214.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndXValue(5, 2733);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultIntervalXYDataset0, false);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotNull(intervalXYDelegate1);
      
      defaultIntervalXYDataset0.removeChangeListener(intervalXYDelegate1);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartXValue((-1232), (-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-373);
      MockDate mockDate0 = new MockDate((-373), (-1544), (-1544), 2138, (-1544));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1544), 2138, 2138, 936.339619480668, (-2714.46));
      assertEquals("Tue May 05 00:16:00 GMT 1394", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, false, false);
      assertEquals("Tue May 05 00:16:00 GMT 1394", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Tue May 05 00:16:00 GMT 1394", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals("Tue May 05 00:16:00 GMT 1394", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX((-1544), 2138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntervalXYDelegate intervalXYDelegate0 = null;
      try {
        intervalXYDelegate0 = new IntervalXYDelegate((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = intervalXYDelegate0.equals(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotNull(intervalXYDelegate1);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(intervalXYDelegate1, categoryTableXYDataset0);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertNotNull(xYTaskDataset1);
      
      xYTaskDataset0.removeChangeListener(xYTaskDataset1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(xYTaskDataset1.getNotify());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Number number0 = xYTaskDataset0.getX(451, (-5));
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(451.0, number0);
      assertNotNull(number0);
      
      xYTaskDataset0.removeChangeListener(intervalXYDelegate0);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      
      double double0 = intervalXYDelegate0.getEndXValue(3103, 3103);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(3103.5, double0, 0.01);
      
      double double1 = intervalXYDelegate0.getIntervalPositionFactor();
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(0.5, double1, 0.01);
      
      Number number1 = intervalXYDelegate0.getEndX((-1), (-1));
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)double1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals((-0.5), number1);
      assertNotNull(number1);
      
      double double2 = intervalXYDelegate0.getFixedIntervalWidth();
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(1.0, double2, 0.01);
      
      intervalXYDelegate0.setIntervalPositionFactor(1.0);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(xYTaskDataset0.getNotify());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYDataset xYDataset0 = null;
      IntervalXYDelegate intervalXYDelegate0 = null;
      try {
        intervalXYDelegate0 = new IntervalXYDelegate((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setIntervalPositionFactor(0.0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = false;
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent("0wn'Q?}.i", xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX(1, (-2039));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertNotNull(defaultWindDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultWindDataset0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setFixedIntervalWidth(0.0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      double double0 = intervalXYDelegate0.getIntervalWidth();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(intervalXYDelegate0, xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      double double0 = intervalXYDelegate0.getDomainLowerBound(true);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultWindDataset0, false);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndX((-3954), (-3954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertNotNull(yIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0, false);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.hashCode();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      double double0 = intervalXYDelegate0.getFixedIntervalWidth();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      double double0 = intervalXYDelegate0.getDomainUpperBound(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertNotNull(defaultXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYDataset0);
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      double double0 = 0.0;
      int int0 = 30;
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(intervalXYDelegate0, defaultXYDataset0);
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(datasetChangeEvent0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndXValue(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertNotNull(yIntervalSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(yIntervalSeriesCollection0, (-2462.0));
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-2462.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYBarDataset0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertTrue(xYBarDataset0.getNotify());
      assertEquals((-2462.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getEndXValue(5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setFixedIntervalWidth((-429.31112450227386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'w' argument.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0, true);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(xYSeriesCollection0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX(3241, 3241);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3241, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertNotNull(defaultXYZDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYZDataset0, false);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYZDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setFixedIntervalWidth((-2176.64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'w' argument.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertNotNull(yIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeriesCollection0.getNotify());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertNotNull(vectorSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0, false);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(vectorSeriesCollection0.getNotify());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX((-1153), (-1153));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(148.8, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(297.6, double2, 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(602.207051050418);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double4, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      IntervalXYDelegate intervalXYDelegate3 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate3.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate3);
      
      boolean boolean0 = intervalXYDelegate2.equals(intervalXYDelegate3);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate3));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(602.207051050418, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(602.207051050418, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate3.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = intervalXYDelegate0.equals(intervalXYDelegate0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotNull(intervalXYDelegate1);
      
      boolean boolean0 = intervalXYDelegate0.equals(intervalXYDelegate1);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.getNotify());
      assertNotNull(taskSeriesCollection1);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      Double double0 = (Double)intervalXYDelegate0.getStartX(0, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = intervalXYDelegate0.getDomainUpperBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertEquals(double2, double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double2, 0.01);
      
      Double double3 = (Double)xYTaskDataset0.getEndX(2652, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(2652.4, (double)double3, 0.01);
      assertNotNull(double3);
      
      double double4 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double4, 0.01);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(DomainOrder.NONE, domainOrder0);
      
      double double5 = intervalXYDelegate0.getStartXValue(0, 0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals((-0.5), double5, 0.01);
      
      double double6 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double6, 0.01);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate2.isAutoWidth());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate2);
      
      double double7 = intervalXYDelegate0.getEndXValue(2675, 4383);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(2675.5, double7, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate3.equals((Object)intervalXYDelegate0));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1.0, intervalXYDelegate3.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate3.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate3.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate3.getIntervalPositionFactor(), 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate0);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate3, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotNull(intervalXYDelegate3);
      
      boolean boolean0 = true;
      double double8 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = intervalXYDelegate0.getDomainUpperBound(false);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = intervalXYDelegate0.getDomainLowerBound(true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate3));
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertTrue(taskSeriesCollection0.getNotify());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(xYTaskDataset0.getNotify());
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate3);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(Double.NaN, double10, 0.01);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-975), 4383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      intervalXYDelegate0.hashCode();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      intervalXYDelegate0.setIntervalPositionFactor(0.0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.0, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      int int0 = 1;
      defaultIntervalXYDataset0.validateObject();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setIntervalPositionFactor((-1910.417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Double double0 = new Double(148.8);
      assertEquals(148.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-34.9), Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Double.sum(Double.POSITIVE_INFINITY, 148.8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "", false);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setFixedIntervalWidth(148.8);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double3 = intervalXYDelegate0.getDomainLowerBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(148.8, double3, 0.01);
      
      categoryTableXYDataset0.setNotify(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double4 = intervalXYDelegate1.getDomainUpperBound(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertEquals(148.8, double4, 0.01);
      
      double double5 = intervalXYDelegate0.getIntervalPositionFactor();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(0.5, double5, 0.01);
      
      Double double6 = (Double)intervalXYDelegate0.getEndX(7, 0);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.getNotify());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(148.8, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(148.8, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(223.20000000000002, (double)double6, 0.01);
      assertNotNull(double6);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertNotNull(defaultXYDataset0);
      
      defaultXYDataset0.validateObject();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(intervalXYDelegate0, defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(datasetChangeEvent0);
      
      defaultXYDataset0.setNotify(true);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultXYDataset0.getDomainOrder());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        intervalXYDelegate0.setIntervalPositionFactor(420.978);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xIntervalSeriesCollection0, true);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = false;
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate1);
      
      intervalXYDelegate0.setAutoWidth(false);
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      boolean boolean1 = false;
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xIntervalSeriesCollection0, xIntervalSeriesCollection0);
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(datasetChangeEvent0);
      
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(intervalXYDelegate2.equals((Object)intervalXYDelegate0));
      assertFalse(intervalXYDelegate2.equals((Object)intervalXYDelegate1));
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate2.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate2.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate2.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate2.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate1);
      assertNotSame(intervalXYDelegate2, intervalXYDelegate0);
      assertNotNull(intervalXYDelegate2);
      
      intervalXYDelegate0.datasetChanged(datasetChangeEvent0);
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      
      double double0 = intervalXYDelegate0.getIntervalWidth();
      assertTrue(intervalXYDelegate0.equals((Object)intervalXYDelegate2));
      assertFalse(intervalXYDelegate0.equals((Object)intervalXYDelegate1));
      assertTrue(xIntervalSeriesCollection0.getNotify());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate2);
      assertNotSame(intervalXYDelegate0, intervalXYDelegate1);
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        intervalXYDelegate0.getStartX((-1254), (-1254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(4840);
      assertEquals(4840, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned(32, 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      defaultTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      boolean boolean0 = intervalXYDelegate0.equals((Object) null);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertFalse(boolean0);
      
      double double0 = intervalXYDelegate0.getIntervalWidth();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = intervalXYDelegate0.getIntervalWidth();
      assertEquals(double1, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, double1, 0.01);
      
      intervalXYDelegate0.setAutoWidth(true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      boolean boolean0 = true;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0, true);
      IntervalXYDelegate intervalXYDelegate1 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      IntervalXYDelegate intervalXYDelegate2 = (IntervalXYDelegate)intervalXYDelegate1.clone();
      intervalXYDelegate2.setFixedIntervalWidth(0.0);
      intervalXYDelegate1.getEndX((-3), (-3));
      xYTaskDataset0.setNotify(true);
      int int0 = 4383;
      intervalXYDelegate0.getStartX((-3), 4383);
      intervalXYDelegate0.getDomainUpperBound(true);
      intervalXYDelegate0.getDomainLowerBound(true);
      xYTaskDataset0.getEndX(2652, 4383);
      intervalXYDelegate0.getIntervalWidth();
      xYTaskDataset0.getDomainOrder();
      intervalXYDelegate0.getIntervalWidth();
      IntervalXYDelegate intervalXYDelegate3 = (IntervalXYDelegate)intervalXYDelegate0.clone();
      // Undeclared exception!
      try { 
        intervalXYDelegate3.setFixedIntervalWidth((-599.4636184956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'w' argument.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }
}
