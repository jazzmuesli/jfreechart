/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:06:25 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYDataItem_ESTest extends XYDataItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, (-3981.0));
      int int0 = xYDataItem0.compareTo(xYDataItem0);
      assertEquals((-3981.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(0, int0);
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      xYDataItem0.setY((double) 1);
      double double0 = xYDataItem0.getYValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Long long0 = new Long((-1008L));
      xYDataItem0.setY((Number) long0);
      double double0 = xYDataItem0.getYValue();
      assertEquals((-1008.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((Number) null);
      xYDataItem0.getY();
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-25.8101054121681), 1.0);
      Number number0 = xYDataItem0.getY();
      assertEquals((-25.8101054121681), xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Short short0 = new Short((short) (-5141));
      XYDataItem xYDataItem0 = new XYDataItem(short0, (Number) null);
      Double double0 = new Double((short) (-5141));
      xYDataItem0.setY((Number) double0);
      Number number0 = xYDataItem0.getY();
      assertEquals((-5141.0), number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      double double0 = xYDataItem0.getXValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(2295L);
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      double double0 = xYDataItem0.getXValue();
      assertEquals(2295.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(715.0, 715.0);
      Number number0 = xYDataItem0.getX();
      assertEquals(715.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      Number number0 = xYDataItem0.getX();
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1730.66), (-1730.66));
      Number number0 = xYDataItem0.getX();
      assertEquals((-1730.66), number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYDataItem xYDataItem0 = null;
      try {
        xYDataItem0 = new XYDataItem((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      double double0 = xYDataItem0.getYValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      double double0 = xYDataItem0.getXValue();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      xYDataItem0.hashCode();
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      xYDataItem0.setY((Number) null);
      xYDataItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Object object0 = xYDataItem0.clone();
      xYDataItem0.setY((-1949.2));
      boolean boolean0 = xYDataItem0.equals(object0);
      assertEquals((-1949.2), xYDataItem0.getYValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Object object0 = xYDataItem0.clone();
      boolean boolean0 = xYDataItem0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short)2352);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYDataItem xYDataItem1 = new XYDataItem((double) 0, (double) 0);
      boolean boolean0 = xYDataItem1.equals(xYDataItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      boolean boolean0 = xYDataItem0.equals(xYDataItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      boolean boolean0 = xYDataItem0.equals("");
      assertFalse(boolean0);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Short short0 = new Short((short)2352);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYDataItem xYDataItem1 = new XYDataItem((double) 0, (double) 0);
      int int0 = xYDataItem1.compareTo(xYDataItem0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short)2352);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYDataItem xYDataItem1 = new XYDataItem((double) 0, (double) 0);
      int int0 = xYDataItem0.compareTo(xYDataItem1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      int int0 = xYDataItem0.compareTo("");
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
      assertEquals(1, int0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((Number) null);
      double double0 = xYDataItem0.getYValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      Number number0 = xYDataItem0.getY();
      assertEquals(0.0, number0);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), 0.0);
      String string0 = xYDataItem0.toString();
      assertEquals("[-1.0, 0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Short short0 = new Short((short)2352);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      int int0 = xYDataItem0.compareTo(xYDataItem0);
      assertEquals(0, int0);
  }
}
