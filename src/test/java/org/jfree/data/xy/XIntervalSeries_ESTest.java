/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:34:02 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.xy.XIntervalDataItem;
import org.jfree.data.xy.XIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XIntervalSeries_ESTest extends XIntervalSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(xIntervalDataItem0);
      xIntervalSeries0.add((double) 0, (double) 0, 0.0, (double) 0);
      double double0 = xIntervalSeries0.getYValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(xIntervalDataItem0);
      xIntervalSeries0.add((double) 0, (double) 0, 0.0, (double) 0);
      double double0 = xIntervalSeries0.getXLowValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Q");
      xIntervalSeries0.add(1001.4169170535148, 1428.7632068256162, 0.0, (-1.0));
      double double0 = xIntervalSeries0.getXLowValue(0);
      assertEquals(1428.7632068256162, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<XIntervalDataItem> comparable0 = (Comparable<XIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, true, true);
      xIntervalSeries0.add((-2827.0), (-3237.5085516692), 0.0, (-3237.5085516692));
      double double0 = xIntervalSeries0.getXLowValue(0);
      assertEquals((-3237.5085516692), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(xIntervalDataItem0);
      xIntervalSeries0.add((-800.5996), (-800.5996), (-800.5996), (-800.5996));
      Number number0 = xIntervalSeries0.getX(0);
      assertEquals((-800.5996), number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<XIntervalDataItem> comparable0 = (Comparable<XIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, true, true);
      xIntervalSeries0.add((double) (-23), (double) 0, 0.0, (double) 0);
      ComparableObjectItem comparableObjectItem0 = xIntervalSeries0.getDataItem(0);
      assertNotNull(comparableObjectItem0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<XIntervalDataItem> comparable0 = (Comparable<XIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, true, true);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getXLowValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, true, false);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getXHighValue((-919));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("");
      // Undeclared exception!
      try { 
        xIntervalSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getDataItem((-1263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<XIntervalDataItem> comparable0 = (Comparable<XIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, true, true);
      XIntervalDataItem xIntervalDataItem0 = mock(XIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xIntervalDataItem0).compareTo(any());
      xIntervalSeries0.add(xIntervalDataItem0, true);
      // Undeclared exception!
      try { 
        xIntervalSeries0.add((-2827.0), (-3237.5085516692), 0.0, (-3237.5085516692));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = null;
      try {
        xIntervalSeries0 = new XIntervalSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = null;
      try {
        xIntervalSeries0 = new XIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0, false, false);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getYValue((-1088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Q");
      // Undeclared exception!
      try { 
        xIntervalSeries0.getXHighValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Q");
      // Undeclared exception!
      try { 
        xIntervalSeries0.getXLowValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Q");
      // Undeclared exception!
      try { 
        xIntervalSeries0.getYValue(3141);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3141, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Q");
      xIntervalSeries0.add(1001.4169170535148, 1428.7632068256162, 0.0, (-1.0));
      double double0 = xIntervalSeries0.getXHighValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<XIntervalDataItem> comparable0 = (Comparable<XIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.add((XIntervalDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.getX((-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
