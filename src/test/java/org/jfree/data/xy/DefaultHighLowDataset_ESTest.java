/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:49:54 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.ActionListener;
import java.time.Clock;
import java.time.Instant;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.Date;
import java.util.EventListener;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DefaultHighLowDataset_ESTest extends DefaultHighLowDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3692.5696907;
      doubleArray0[1] = (-1097.2020668234243);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 3692.5696907;
      doubleArray1[7] = 2.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      assertNotNull(jComboBox0);
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      
      ActionListener actionListener0 = AWTEventMulticaster.remove((ActionListener) jComboBox0, (ActionListener) jComboBox0);
      assertNull(actionListener0);
      assertFalse(jComboBox0.getIgnoreRepaint());
      assertFalse(jComboBox0.isFocusCycleRoot());
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
      assertFalse(jComboBox0.isFocusTraversalPolicySet());
      assertTrue(jComboBox0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = defaultHighLowDataset0.hasListener((EventListener) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      defaultHighLowDataset0.validateObject();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      double double0 = defaultHighLowDataset0.getLowValue(0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3692.5696907, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      Number number0 = defaultHighLowDataset0.getClose(0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(number0.equals((Object)double0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.0, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean1 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(boolean1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(16, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean1 = defaultHighLowDataset0.equals(defaultHighLowDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getX(16, 0);
      assertEquals((-339L), number0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean1 = defaultHighLowDataset0.equals(instant0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean2 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(boolean2);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double4 = defaultHighLowDataset1.getVolumeValue(448, 1);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(5883.669095735404, double4, 0.01);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getItemCount(1);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(2, int0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Double double5 = (Double)defaultHighLowDataset1.getLow(1, 2);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(Double.NaN, (double)double5, 0.01);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(double5);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Double double6 = (Double)defaultHighLowDataset0.getLow(0, 0);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(0.0, (double)double6, 0.01);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(double6);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Instant instant1 = MockInstant.ofEpochSecond((-339L), 0L);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant1, instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getX(0, 0);
      assertEquals((-339L), number0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(number0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean1 = defaultHighLowDataset0.equals(instant1);
      assertTrue(boolean1 == boolean0);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(boolean1);
      assertNotSame(instant1, instant0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number1 = defaultHighLowDataset0.getClose((-408), 0);
      assertTrue(number1.equals((Object)double3));
      assertTrue(number1.equals((Object)double2));
      assertTrue(number1.equals((Object)double1));
      assertTrue(number1.equals((Object)double0));
      assertEquals(0.0, number1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(number1);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1846, 1846, 3, 3, 1846);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 1846;
      int int0 = 0;
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sat Nov 04 09:46:00 GMT 3899", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(1846.0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      
      boolean boolean0 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertEquals("Sat Nov 04 09:46:00 GMT 3899", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset1.getX(0, 1846);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1846
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year((-1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1), year0.getYear());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals("-1", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      Date[] dateArray0 = new Date[1];
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      Date date0 = day0.getEnd();
      assertNotNull(date0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-9999);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertArrayEquals(new double[] {9999.0, (-1.0), (-9999.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1), year0.getYear());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals("-1", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Period period0 = Period.ofWeeks(7);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      Period period1 = period0.minusYears((-1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period0, period1);
      assertNotNull(chronoLocalDate0);
      
      int int0 = chronoLocalDate0.lengthOfYear();
      assertFalse(period0.equals((Object)period1));
      assertEquals(365, int0);
      assertNotSame(period0, period1);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(chronoLocalDate0);
      assertFalse(period0.equals((Object)period1));
      assertNotNull(seriesChangeEvent0);
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period0, period1);
      assertArrayEquals(new double[] {9999.0, (-1.0), (-9999.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1), year0.getYear());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals("-1", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getCloseValue(9999, 0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999.0, double0, 0.01);
      assertArrayEquals(new double[] {9999.0, (-1.0), (-9999.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1), year0.getYear());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals("-1", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      System.setCurrentTimeMillis((-2230L));
      Number number0 = defaultHighLowDataset0.getY(0, 1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(number0.equals((Object)double0));
      assertEquals((-1.0), number0);
      assertArrayEquals(new double[] {9999.0, (-1.0), (-9999.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1), year0.getYear());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals("-1", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpenValue((-1), (-164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -164
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[4];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2298.13753100394);
      doubleArray0[5] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Date date0 = defaultHighLowDataset0.getXDate(0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNull(date0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = 2654;
      MockDate mockDate0 = new MockDate(0, 0, 2654, 5, (-1945), (-990));
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 23, 0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[0] = (Date) mockDate1;
      MockDate mockDate2 = (MockDate)mockDate1.clone();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertTrue(mockDate2.equals((Object)mockDate1));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate1);
      assertNotNull(mockDate2);
      assertEquals("Sat Nov 30 00:00:00 GMT 1901", mockDate1.toString());
      assertEquals("Sat Nov 30 00:00:00 GMT 1901", mockDate2.toString());
      
      MockDate mockDate3 = new MockDate(0L);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertNotNull(mockDate3);
      
      boolean boolean0 = mockDate1.before(mockDate2);
      assertTrue(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate3));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate3));
      assertTrue(mockDate2.equals((Object)mockDate1));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate3);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate3);
      assertNotSame(mockDate2, mockDate1);
      assertEquals("Sat Nov 30 00:00:00 GMT 1901", mockDate1.toString());
      assertEquals("Sat Nov 30 00:00:00 GMT 1901", mockDate2.toString());
      
      dateArray0[3] = (Date) mockDate3;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getHighValue((-255), 1);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHighValue((-4063), (-1909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1909
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(5883.669095735404, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean1 = defaultHighLowDataset0.equals(instant0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-513.6521505907);
      doubleArray0[1] = 2236.0343;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-48.3707111);
      doubleArray0[4] = 1082.43228113014;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.8;
      doubleArray0[7] = (-2324.868233879096);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-513.6521505907);
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 2236.0343;
      doubleArray1[3] = (-1592.7255962167);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-513.6521505907), 2236.0343, 0.0, (-48.3707111), 1082.43228113014, 0.0, 0.8, (-2324.868233879096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-513.6521505907), 0.8, 2236.0343, (-1592.7255962167)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getSeriesCount();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-513.6521505907), 2236.0343, 0.0, (-48.3707111), 1082.43228113014, 0.0, 0.8, (-2324.868233879096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-513.6521505907), 0.8, 2236.0343, (-1592.7255962167)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getHigh(1, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2236.0343, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-513.6521505907), 2236.0343, 0.0, (-48.3707111), 1082.43228113014, 0.0, 0.8, (-2324.868233879096), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-513.6521505907), 0.8, 2236.0343, (-1592.7255962167)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, (-3227L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      Month month0 = new Month(date0);
      assertNotNull(month0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      
      Year year0 = month0.getYear();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(1969, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      
      Year year1 = (Year)year0.next();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(1969, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals("1970", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1970, year1.getYear());
      assertEquals(1970L, year1.getSerialIndex());
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      dateArray0[4] = date0;
      dateArray0[5] = date0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (double) (-9999);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-9999);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-9999);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = (double) (-3227L);
      doubleArray1[4] = (double) (-9999);
      doubleArray1[5] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year0.equals((Object)year1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(year1.equals((Object)year0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-9999.0), 0.0, 9999.0, (-3227.0), (-9999.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 9999.0, (-9999.0), 0.0, (-9999.0), 0.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(1969, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals("1970", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1970, year1.getYear());
      assertEquals(1970L, year1.getSerialIndex());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      Double double0 = (Double)defaultHighLowDataset0.getLow(9999, 5);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertFalse(year0.equals((Object)year1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(year1.equals((Object)year0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(year0, year1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(year1, year0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-9999.0), 0.0, 9999.0, (-3227.0), (-9999.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 9999.0, (-9999.0), 0.0, (-9999.0), 0.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals((-1L), month0.getFirstMillisecond());
      assertEquals((-1L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals(1969, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals("1970", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1970, year1.getYear());
      assertEquals(1970L, year1.getSerialIndex());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1846, 1846, 3, 3, 1846);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 1846;
      Date[] dateArray1 = new Date[7];
      assertFalse(dateArray1.equals((Object)dateArray0));
      
      dateArray1[0] = (Date) mockDate0;
      dateArray1[1] = (Date) mockDate1;
      dateArray1[2] = (Date) mockDate1;
      dateArray1[3] = (Date) mockDate0;
      dateArray1[4] = (Date) mockDate0;
      dateArray1[5] = (Date) mockDate1;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(dateArray0[0], dateArray1[0]);
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertEquals(2, dateArray0.length);
      assertEquals(7, dateArray1.length);
      assertNotNull(simpleTimePeriod0);
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      
      Date date0 = simpleTimePeriod0.getEnd();
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(date0.equals((Object)mockDate1));
      assertTrue(date0.equals((Object)mockDate0));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertNotSame(dateArray0, dateArray1);
      assertNotSame(date0, mockDate1);
      assertNotSame(date0, mockDate0);
      assertNotSame(dateArray1, dateArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, dateArray1.length);
      assertNotNull(date0);
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray1[6] = date0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = 1826.69288493839;
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (double) 1846;
      doubleArray2[6] = (double) 1846;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[0], dateArray1, doubleArray1, doubleArray2, doubleArray2, doubleArray0, doubleArray1);
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 1826.69288493839, 3.0, 1846.0, 1846.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(7, dateArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray1[1]);
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertFalse(boolean0);
      assertNotSame(dateArray0, dateArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(dateArray1, dateArray0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 1826.69288493839, 3.0, 1846.0, 1846.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(7, dateArray1.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = defaultHighLowDataset0.getItemCount(0);
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertEquals(7, int0);
      assertNotSame(dateArray0, dateArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(dateArray1, dateArray0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 1826.69288493839, 3.0, 1846.0, 1846.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(7, dateArray1.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Comparable comparable0 = defaultHighLowDataset0.getSeriesKey(707);
      assertFalse(dateArray0.equals((Object)dateArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertNotSame(dateArray0, dateArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(dateArray1, dateArray0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 1826.69288493839, 3.0, 1846.0, 1846.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 1846.0}, doubleArray1, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(7, dateArray1.length);
      assertNotNull(comparable0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1136.23961869;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 1136.23961869}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getY(0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 1136.23961869}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(number0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.4558038552250631);
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals((-0.4558038552250631), double0, 0.01);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      double double1 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-0.4558038552250631), double1, 0.01);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      double double2 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-0.4558038552250631), double2, 0.01);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      double double3 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals((-0.4558038552250631), double3, 0.01);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      boolean boolean1 = defaultHighLowDataset0.equals(instant0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-0.4558038552250631), 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2288.3739506816946;
      doubleArray0[1] = (-1024.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1325.73252629);
      doubleArray0[6] = (-1.0);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {2288.3739506816946, (-1024.0), 0.0, Double.NaN, 0.0, (-1325.73252629), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-938), (-938), (-938), (-938), 0);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate(0, (-1849), (-938), (-1373), (-938), 0);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertNotNull(mockDate2);
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate();
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertTrue(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertNotNull(mockDate3);
      
      dateArray0[3] = (Date) mockDate3;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(2288.3739506816946, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2288.3739506816946, (-1024.0), 0.0, Double.NaN, 0.0, (-1325.73252629), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getLow((-1373), 5);
      assertEquals((-1325.73252629), number0);
      assertArrayEquals(new double[] {2288.3739506816946, (-1024.0), 0.0, Double.NaN, 0.0, (-1325.73252629), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("O2k*.`&U<WoK").when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 2.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      int int0 = 0;
      double double0 = defaultHighLowDataset0.getYValue(6, 0);
      assertEquals(2.0, double0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      int int1 = defaultHighLowDataset0.indexOf(2.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      Number number0 = defaultHighLowDataset0.getHigh(6, 6);
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.0, number0);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      
      defaultHighLowDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultHighLowDataset.createNumberArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 307.007810990946;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-800.6298556535);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {307.007810990946, 1.0, (-800.6298556535), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getItemCount(0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {307.007810990946, 1.0, (-800.6298556535), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[4];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2298.13753100394);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.5, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Date date0 = defaultHighLowDataset0.getXDate(0, 0);
      assertArrayEquals(new double[] {0.0, 0.5, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNull(date0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      dateArray0[0] = null;
      MockDate mockDate0 = new MockDate(0, 0, 2654, 5, (-1945), (-990));
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 23, 0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[2] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate(0L);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertNotNull(mockDate2);
      
      dateArray0[3] = (Date) mockDate2;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertArrayEquals(new double[] {0.0, 0.5, 0.0, 0.0, (-2298.13753100394), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 889.72015095;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {889.72015095, 1.0, 0.0, 0.0, (-1.0), 1.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      int int0 = 1;
      Number number0 = defaultHighLowDataset0.getY((-1), 1);
      assertEquals(1.0, number0);
      assertArrayEquals(new double[] {889.72015095, 1.0, 0.0, 0.0, (-1.0), 1.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpen((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[3];
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (-1407L));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:23:28 GMT 1970", date0.toString());
      
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(3749, 3749, 0, (-525), 0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 3749;
      doubleArray0[2] = (double) (-1407L);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-525);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) (-1407L);
      doubleArray1[4] = (double) (-525);
      doubleArray1[5] = (-1.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1407.0), (-525.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3749.0, (-1407.0), 1.0, (-525.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Date date1 = defaultHighLowDataset0.getXDate(0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(date1, date0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1407.0), (-525.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3749.0, (-1407.0), 1.0, (-525.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(date1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals("Thu Jan 01 00:23:28 GMT 1970", date1.toString());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(seriesChangeEvent0);
      assertEquals("Tue May 09 03:00:00 GMT 5961", mockDate1.toString());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1407.0), (-525.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3749.0, (-1407.0), 1.0, (-525.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals("Tue May 09 03:00:00 GMT 5961", mockDate1.toString());
      
      Comparable comparable1 = defaultHighLowDataset0.getSeriesKey(0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, (-1407.0), (-525.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3749.0, (-1407.0), 1.0, (-525.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(comparable1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3749.0, (-1407.0), 1.0, (-525.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, numberArray0.length);
      assertNotNull(numberArray0);
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolumeValue((-525), 1965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1965
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[6];
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultOHLCDataset0.getDomainOrder());
      
      Date date0 = defaultOHLCDataset0.getXDate(6, 0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNull(date0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultOHLCDataset0.getDomainOrder());
      
      dateArray0[0] = null;
      MockDate mockDate0 = new MockDate(6, 6, 0);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 0, 2029, 0, 0, 0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[2] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate(0);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertNotNull(mockDate2);
      
      dateArray0[3] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(0);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertTrue(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertNotNull(mockDate3);
      
      dateArray0[4] = (Date) mockDate3;
      MockDate mockDate4 = new MockDate(1166, 2029, 2029);
      assertFalse(mockDate4.equals((Object)mockDate1));
      assertFalse(mockDate4.equals((Object)mockDate0));
      assertFalse(mockDate4.equals((Object)mockDate2));
      assertFalse(mockDate4.equals((Object)mockDate3));
      assertNotNull(mockDate4);
      
      dateArray0[5] = (Date) mockDate4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1166;
      doubleArray0[4] = (double) 2029;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6.0, 0.0, 0.0, 1166.0, 2029.0, 0.0, 0.0, 6.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY(6, 1166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1166
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1016.07940278;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1935.7701559;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1016.07940278, 0.0, 0.0, Double.POSITIVE_INFINITY, Double.NaN, 0.0, 1935.7701559}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getOpenValue(357, 1);
      assertEquals(1016.07940278, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1016.07940278, 0.0, 0.0, Double.POSITIVE_INFINITY, Double.NaN, 0.0, 1935.7701559}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2460.124);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3891.952950441171);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-352.92039704);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2460.124), (-1.0), Double.NaN, (-3891.952950441171), 0.0, 0.0, Double.NaN, (-352.92039704)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = (-1388);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getCloseValue((-1388), 297);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 297
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 168.455140165;
      doubleArray0[1] = 653.65758122;
      doubleArray0[2] = (-3202.4193940909304);
      doubleArray0[3] = 1956.8008493;
      doubleArray0[4] = (-1910.9407731);
      doubleArray0[5] = 4585.872;
      doubleArray0[6] = (-160.811079775408);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {168.455140165, 653.65758122, (-3202.4193940909304), 1956.8008493, (-1910.9407731), 4585.872, (-160.811079775408)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.validateObject();
      assertArrayEquals(new double[] {168.455140165, 653.65758122, (-3202.4193940909304), 1956.8008493, (-1910.9407731), 4585.872, (-160.811079775408)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultHighLowDataset0);
      assertArrayEquals(new double[] {168.455140165, 653.65758122, (-3202.4193940909304), 1956.8008493, (-1910.9407731), 4585.872, (-160.811079775408)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(seriesChangeEvent0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertArrayEquals(new double[] {168.455140165, 653.65758122, (-3202.4193940909304), 1956.8008493, (-1910.9407731), 4585.872, (-160.811079775408)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = 100;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getClose(100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[3];
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultOHLCDataset0.getDomainOrder());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Date date0 = defaultOHLCDataset0.getXDate(0, 0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNull(date0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultOHLCDataset0.getDomainOrder());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      dateArray0[0] = null;
      MockDate mockDate0 = new MockDate(0, 2295, (-1241), 1, (-1241), 3107);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, (-2443), 2295);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3107;
      doubleArray0[1] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3107.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getOpen(0, 1);
      assertEquals(0.0, number0);
      assertArrayEquals(new double[] {3107.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number1 = defaultHighLowDataset0.getX(0, 1);
      assertEquals(3718847447000L, number1);
      assertArrayEquals(new double[] {3107.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertNotNull(number1);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getLow(1, (-1241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1241
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2150.13;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.5;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1127.38401828);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 2150.13;
      doubleArray1[4] = 2150.13;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 2150.13, (-1.0), 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1127.38401828), 0.0, (-1.0), 2150.13, 2150.13}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getLowValue(6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3167.0132;
      doubleArray0[1] = 1860.0;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3167.0132, 1860.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      Number number0 = defaultHighLowDataset0.getVolume(0, 0);
      assertEquals(3167.0132, number0);
      assertArrayEquals(new double[] {3167.0132, 1860.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1552.7516774);
      doubleArray0[1] = 0.8;
      doubleArray0[2] = (-2459.3613);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1552.7516774), 0.8, (-2459.3613)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getVolume((-255), 0);
      assertEquals((-1552.7516774), number0);
      assertArrayEquals(new double[] {(-1552.7516774), 0.8, (-2459.3613)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3692.5696907;
      doubleArray0[1] = (-1097.2020668234243);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 224.4336234;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 3692.5696907;
      doubleArray1[7] = 2.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 224.4336234}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getLowValue(0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3692.5696907, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3692.5696907, (-1097.2020668234243), 0.0, 2.0, 224.4336234}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 2.0, 0.0, 3692.5696907, 2.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = (-213);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(2604, (-213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -213
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2583.10121762171;
      doubleArray0[2] = (-4036.30190375614);
      doubleArray0[3] = 1482.0813244755645;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 971.161030206074;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2583.10121762171, (-4036.30190375614), 1482.0813244755645, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0, 971.161030206074}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 1.0);
      assertArrayEquals(new double[] {1.0, 2583.10121762171, (-4036.30190375614), 1482.0813244755645, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0, 971.161030206074}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYBarDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, defaultTableXYDataset0.getDomainOrder());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, defaultTableXYDataset0.getDomainOrder());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      xYBarDataset0.removeChangeListener(xYDatasetTableModel0);
      assertArrayEquals(new double[] {1.0, 2583.10121762171, (-4036.30190375614), 1482.0813244755645, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0, 971.161030206074}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.getNotify());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(DomainOrder.NONE, defaultTableXYDataset0.getDomainOrder());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      defaultHighLowDataset0.removeChangeListener(xYBarDataset0);
      assertArrayEquals(new double[] {1.0, 2583.10121762171, (-4036.30190375614), 1482.0813244755645, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0, 971.161030206074}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(DomainOrder.NONE, xYBarDataset0.getDomainOrder());
      assertTrue(xYBarDataset0.getNotify());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolumeValue(593, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 290.00725098479;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1136.23961869;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {290.00725098479, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 1136.23961869}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getY(0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(290.00725098479, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {290.00725098479, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 1136.23961869}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1485.4;
      doubleArray0[1] = 0.8;
      doubleArray0[2] = 2512.5617;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1419.974033807691);
      doubleArray0[5] = (-2933.61459014);
      doubleArray0[6] = (-751.9857995447525);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1485.4, 0.8, 2512.5617, 1.0, (-1419.974033807691), (-2933.61459014), (-751.9857995447525)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultHighLowDataset0);
      assertArrayEquals(new double[] {1485.4, 0.8, 2512.5617, 1.0, (-1419.974033807691), (-2933.61459014), (-751.9857995447525)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(seriesChangeEvent0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertArrayEquals(new double[] {1485.4, 0.8, 2512.5617, 1.0, (-1419.974033807691), (-2933.61459014), (-751.9857995447525)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = defaultHighLowDataset0.equals(object0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1485.4, 0.8, 2512.5617, 1.0, (-1419.974033807691), (-2933.61459014), (-751.9857995447525)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {1485.4, 0.8, 2512.5617, 1.0, (-1419.974033807691), (-2933.61459014), (-751.9857995447525)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      int int0 = (-691);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getLow((-691), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 4);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2520.1833559053125;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3096.980446612912;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2520.1833559053125, 0.0, 0.0, 0.0, 0.0, 3096.980446612912, 4.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getLowValue((-730), 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2520.1833559053125, 0.0, 0.0, 0.0, 0.0, 3096.980446612912, 4.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", (Integer) null);
      assertNull(integer1);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, (double[]) null, (double[]) null, doubleArray1, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate((-749), 193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 193
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 369.4826453999;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-5289.8);
      doubleArray0[6] = (-2468.393078397);
      doubleArray0[7] = 2.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2468.393078397);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 369.4826453999, 0.0, (-5289.8), (-2468.393078397), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2468.393078397)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getYValue((-4839), 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1.0), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 369.4826453999, 0.0, (-5289.8), (-2468.393078397), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2468.393078397)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getSeriesCount();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 369.4826453999, 0.0, (-5289.8), (-2468.393078397), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2468.393078397)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1641.66705899);
      doubleArray1[4] = 513.031;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-2358.80773246593);
      doubleArray1[7] = (-78.6843780312);
      doubleArray1[8] = (-7.107492);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, (-1641.66705899), 513.031, 0.0, (-2358.80773246593), (-78.6843780312), (-7.107492)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHighValue((-1), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1172.7);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1172.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Comparable comparable1 = defaultHighLowDataset0.getSeriesKey((-1));
      assertArrayEquals(new double[] {(-1172.7), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(comparable1);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(numberArray0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[3];
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("toAL]@\"Aq-Z|_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate(0, 29, 0, 0, 388, 388);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate();
      assertTrue(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertNotNull(mockDate2);
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(93, 1010, 3, 1, (-95), (-1));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertNotNull(mockDate3);
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getVolume((-1921), 0);
      assertEquals(0.0, number0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[2];
      int int0 = 2187;
      MockDate mockDate0 = new MockDate((-659), (-659), (-1), 0, 2187);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1), 2011, 0, 37, 2011, (-1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      long long0 = MockDate.UTC(1156, (-659), 193, 0, (-1), (-659));
      assertEquals(32554482481000L, long0);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2011;
      doubleArray0[1] = (double) (-659);
      doubleArray0[2] = (double) 37;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2011.0, (-659.0), 37.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getX((-1), 0);
      assertFalse(number0.equals((Object)long0));
      assertEquals((-24737398380000L), number0);
      assertArrayEquals(new double[] {2011.0, (-659.0), 37.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number1 = defaultHighLowDataset0.getY(37, 0);
      assertEquals(2011.0, number1);
      assertArrayEquals(new double[] {2011.0, (-659.0), 37.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolume(1731, (-659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -659
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4760.518624;
      doubleArray0[3] = (-1.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 4760.518624, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY((-1097), 1699);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1699
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = mockDate0.after(dateArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, dateArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      long long0 = MockDate.UTC(0, 0, 968, 968, (-2076), 335);
      assertEquals((-2122079425000L), long0);
      
      doubleArray0[0] = 10.8200849935036;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 10.8200849935036;
      doubleArray1[1] = 10.8200849935036;
      doubleArray1[2] = 10.8200849935036;
      doubleArray1[3] = (-643.0);
      doubleArray1[4] = 10.8200849935036;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {10.8200849935036}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.8200849935036, 10.8200849935036, 10.8200849935036, (-643.0), 10.8200849935036}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.validateObject();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {10.8200849935036}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.8200849935036, 10.8200849935036, 10.8200849935036, (-643.0), 10.8200849935036}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getOpen(178, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(10.8200849935036, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {10.8200849935036}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.8200849935036, 10.8200849935036, 10.8200849935036, (-643.0), 10.8200849935036}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {10.8200849935036, 10.8200849935036, 10.8200849935036, (-643.0), 10.8200849935036}, doubleArray1, 0.01);
      assertEquals(5, numberArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(numberArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1673.62728451329);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1673.62728451329);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, (-1673.62728451329)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1673.62728451329)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      defaultHighLowDataset0.validateObject();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, (-1673.62728451329)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1673.62728451329)}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      
      int int0 = 3137;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHigh(3137, 3137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3137
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpenValue((-1929), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 779.55075285;
      doubleArray0[2] = (-761.742427);
      doubleArray0[3] = (-1708.8880440219925);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.8, 779.55075285, (-761.742427), (-1708.8880440219925)}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHigh(0, 3428);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3428
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 904.1404567964346;
      doubleArray0[1] = 646.0388291139399;
      doubleArray0[2] = (-4936.673286640979);
      doubleArray0[3] = 4121.407905947513;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4121.407905947513;
      doubleArray1[1] = 646.0388291139399;
      doubleArray1[2] = 904.1404567964346;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, (Date[]) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = (-2897);
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXValue((-3455), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      assertNotNull(numberArray0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:54:21 GMT 1969", date0.toString());
      
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(dateArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double1 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean1 = defaultHighLowDataset0.equals(defaultHighLowDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getX(16, 0);
      assertEquals((-339L), number0);
      assertArrayEquals(new double[] {0.0, 5883.669095735404, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertNotNull(number0);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[12];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Double double0 = new Double(999);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      
      defaultHighLowDataset0.setGroup(datasetGroup0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultHighLowDataset0, false);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      defaultHighLowDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      double double1 = defaultHighLowDataset0.getYValue(3522, 0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double2 = defaultHighLowDataset0.getLowValue(14, 6);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = 1;
      int int1 = defaultHighLowDataset0.getItemCount(1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      
      double double3 = defaultHighLowDataset1.getYValue(6, 6);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertEquals(0.0, double3, 0.01);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(12, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(DomainOrder.NONE, defaultHighLowDataset1.getDomainOrder());
      assertTrue(defaultHighLowDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolume(1, 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 889.72015095;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 889.72015095;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {889.72015095, 0.0, 0.0, 889.72015095, (-1.0), 1.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = 1;
      Number number0 = defaultHighLowDataset0.getY((-1), 1);
      assertEquals(0.0, number0);
      assertArrayEquals(new double[] {889.72015095, 0.0, 0.0, 889.72015095, (-1.0), 1.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(DomainOrder.NONE, defaultHighLowDataset0.getDomainOrder());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpen((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5883.669095735404;
      doubleArray0[2] = Double.NaN;
      DefaultHighLowDataset.createNumberArray(doubleArray0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-339L));
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = MockInstant.ofEpochSecond((-339L), 0L);
      Date date0 = Date.from(instant0);
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(5883.669095735404, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.setNotify(true);
      defaultHighLowDataset0.getCloseValue(0, 0);
      double double0 = defaultHighLowDataset0.getCloseValue(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = defaultHighLowDataset0.getOpenValue(0, 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      defaultHighLowDataset0.equals(dateArray0[0]);
      double double2 = defaultHighLowDataset0.getVolumeValue(448, 0);
      assertEquals(0.0, double2, 0.01);
      
      boolean boolean0 = defaultHighLowDataset0.equals(instant0);
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      boolean boolean1 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertFalse(boolean1 == boolean0);
      
      defaultHighLowDataset1.getVolumeValue(448, 1);
      defaultHighLowDataset0.getItemCount(1);
      defaultHighLowDataset1.getSeriesKey((-1051));
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      int int0 = 2677;
      int int1 = 0;
      int int2 = 10;
      MockDate mockDate0 = new MockDate(2677, 2677, 0, 0, 0, 10);
      dateArray0[0] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, (double[]) null, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-513.6521505907);
      doubleArray0[1] = 2236.0343;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-48.3707111);
      doubleArray0[4] = 1082.43228113014;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.8;
      doubleArray0[7] = (-2324.868233879096);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-513.6521505907);
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 2236.0343;
      doubleArray1[3] = (-1592.7255962167);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXValue(4587, 2711);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2711
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-513.6521505907);
      doubleArray0[1] = 2236.452896648734;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-48.3707111);
      doubleArray0[4] = 1082.43228113014;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.8;
      doubleArray0[7] = (-2324.868233879096);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[15];
      doubleArray1[0] = (-513.6521505907);
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 2236.452896648734;
      doubleArray1[3] = (-1592.7255962167);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY(505, 505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 505
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[4];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2298.13753100394);
      doubleArray0[5] = 0.0;
      MockDate mockDate0 = new MockDate(0, 0, 2654, 5, (-1945), (-990));
      dateArray0[1] = (Date) mockDate0;
      dateArray0[0] = (Date) mockDate0;
      mockDate0.clone();
      MockDate mockDate1 = new MockDate(0L);
      dateArray0[3] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Object object0 = defaultHighLowDataset0.clone();
      boolean boolean0 = defaultHighLowDataset0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      mockDate0.before(dateArray0[0]);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      defaultHighLowDataset0.getSeriesCount();
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHighValue(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[5];
      int int0 = 3273;
      MockDate mockDate0 = new MockDate(3273, 3273, 3273);
      dateArray0[0] = (Date) mockDate0;
      int int1 = 2906;
      int int2 = 435;
      MockDate mockDate1 = new MockDate(3556, 2906, 3273, 435, 3543);
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = null;
      try {
        mockDate2 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }
}
