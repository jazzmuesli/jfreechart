/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:40:34 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.SerialDate;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.VectorDataItem;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.YIntervalDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class VectorSeries_ESTest extends VectorSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Second second0 = new Second();
      VectorSeries vectorSeries0 = new VectorSeries(second0, false, false);
      vectorSeries0.add((double) 0, (-1672.6135539557), 0.0, (double) 59);
      ComparableObjectItem comparableObjectItem0 = vectorSeries0.remove(0);
      assertNotNull(comparableObjectItem0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      VectorSeries vectorSeries0 = new VectorSeries(week0, true, false);
      vectorSeries0.add((-1.0), 0.0, (-1.0), (double) 53);
      vectorSeries0.add((-3055.628689435357), (-483.0), 1.7976931348623157E308, (double) 53);
      double double0 = vectorSeries0.getYValue(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((double) 23, (double) 23, (double) 0, (double) 0);
      double double0 = vectorSeries0.getYValue(0);
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add(Double.NaN, (-1362.0), (double) 23, 0.0);
      double double0 = vectorSeries0.getYValue(0);
      assertEquals((-1362.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0);
      VectorDataItem vectorDataItem0 = new VectorDataItem(0.0, 0.0, 0.5, 0.5);
      vectorSeries0.add(vectorDataItem0, true);
      double double0 = vectorSeries0.getXValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((double) 23, (double) 0, 0.0, (-0.7437118559580975));
      double double0 = vectorSeries0.getXValue(0);
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((-1616.100629), 0.0, (-2821.3078759), 0.0);
      double double0 = vectorSeries0.getXValue(0);
      assertEquals((-1616.100629), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((double) 23, (double) 0, 0.0, 0.0);
      double double0 = vectorSeries0.getVectorYValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0, true, true);
      VectorDataItem vectorDataItem0 = new VectorDataItem(1673L, 0, 0, 1673L);
      vectorSeries0.add(vectorDataItem0, true);
      double double0 = vectorSeries0.getVectorYValue(0);
      assertEquals(1673.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((double) 23, (double) 0, 0.0, (-0.7437118559580975));
      double double0 = vectorSeries0.getVectorYValue(0);
      assertEquals((-0.7437118559580975), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      VectorSeries vectorSeries0 = new VectorSeries(week0, true, false);
      vectorSeries0.add((-3055.628689435357), (-483.0), 1.7976931348623157E308, (double) 53);
      double double0 = vectorSeries0.getVectorXValue(0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((-1616.100629), 0.0, (-2821.3078759), 0.0);
      double double0 = vectorSeries0.getVectorXValue(0);
      assertEquals((-2821.3078759), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0, true, true);
      VectorDataItem vectorDataItem0 = new VectorDataItem(1673L, 0, 0, 1673L);
      vectorSeries0.add(vectorDataItem0, true);
      ComparableObjectItem comparableObjectItem0 = vectorSeries0.getDataItem(0);
      assertSame(comparableObjectItem0, vectorDataItem0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0, false, true);
      // Undeclared exception!
      try { 
        vectorSeries0.remove((-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = new Month();
      VectorSeries vectorSeries0 = new VectorSeries(month0, true, true);
      // Undeclared exception!
      try { 
        vectorSeries0.getYValue((-802));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(4582);
      VectorSeries vectorSeries0 = new VectorSeries(serialDate0);
      // Undeclared exception!
      try { 
        vectorSeries0.getXValue((-2171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week((-2751), (-2751));
      VectorSeries vectorSeries0 = new VectorSeries(week0, true, true);
      // Undeclared exception!
      try { 
        vectorSeries0.getVectorYValue((-2751));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        vectorSeries0.getVectorXValue((-659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = new YIntervalDataItem(0.0, 0.0, 0.0, 0.0);
      VectorSeries vectorSeries0 = new VectorSeries(yIntervalDataItem0);
      // Undeclared exception!
      try { 
        vectorSeries0.getDataItem((-3798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VectorSeries vectorSeries0 = null;
      try {
        vectorSeries0 = new VectorSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        vectorSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Year year0 = Year.parseYear("0");
      VectorSeries vectorSeries0 = new VectorSeries(year0, false, false);
      // Undeclared exception!
      try { 
        vectorSeries0.add((VectorDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        vectorSeries0.remove(1087);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1087, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      // Undeclared exception!
      try { 
        vectorSeries0.getVectorXValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      // Undeclared exception!
      try { 
        vectorSeries0.getYValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      // Undeclared exception!
      try { 
        vectorSeries0.getXValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      // Undeclared exception!
      try { 
        vectorSeries0.getVectorYValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hour hour0 = new Hour();
      VectorSeries vectorSeries0 = new VectorSeries(hour0);
      vectorSeries0.add((double) 0, (double) 0, (double) 0, (double) 0);
      double double0 = vectorSeries0.getVectorXValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VectorSeries vectorSeries0 = null;
      try {
        vectorSeries0 = new VectorSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
