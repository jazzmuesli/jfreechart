/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:56:59 GMT 2019
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DomainOrder;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MatrixSeriesCollection_ESTest extends MatrixSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrixSeries0).getItemColumn(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getX(0, 5);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(matrixSeries0).getItem(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getZ(0, 5);
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrixSeries0).getItem(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getZ(0, 5);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(116918058).when(matrixSeries0).getItem(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getZ(0, 5);
      assertEquals(116918058, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(matrixSeries0).getItemRow(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getY(0, (-2183));
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-1066)).when(matrixSeries0).getItemRow(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getY(0, 3);
      assertEquals((-1066), number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1320).when(matrixSeries0).getItemColumn(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getX(0, 0);
      assertEquals(1320, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-6525)).when(matrixSeries0).getItemColumn(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getX(0, 0);
      assertEquals((-6525), number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn("fCzGDR'P`SMGoiB").when(matrixSeries0).toString();
      doReturn("fCzGDR'P`SMGoiB").when(matrixSeries0).getKey();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Comparable comparable0 = matrixSeriesCollection0.getSeriesKey(0);
      assertEquals("fCzGDR'P`SMGoiB", comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      int int0 = matrixSeriesCollection0.getSeriesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).toString();
      doReturn(0).when(matrixSeries0).getItemCount();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      int int0 = matrixSeriesCollection0.getItemCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn("").when(matrixSeries0).toString();
      doReturn(1).when(matrixSeries0).getItemCount();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      int int0 = matrixSeriesCollection0.getItemCount(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).toString();
      doReturn((-1747)).when(matrixSeries0).getItemCount();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      int int0 = matrixSeriesCollection0.getItemCount(0);
      assertEquals((-1747), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((MatrixSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).clone();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.removeAllSeries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      MatrixSeries matrixSeries1 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(matrixSeriesCollection0).when(matrixSeries1).clone();
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection(matrixSeries1);
      MatrixSeriesCollection matrixSeriesCollection2 = (MatrixSeriesCollection)matrixSeriesCollection1.clone();
      // Undeclared exception!
      try { 
        matrixSeriesCollection2.removeAllSeries();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.MatrixSeriesCollection cannot be cast to org.jfree.data.xy.MatrixSeries
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ(4168, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4168, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ((-1942), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getY(5, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getY((-460), (-460));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX(4546, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4546, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX((-1745), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(matrixSeriesCollection0).when(matrixSeries0).clone();
      matrixSeriesCollection0.addSeries(matrixSeries0);
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeriesKey(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.MatrixSeriesCollection cannot be cast to org.jfree.data.xy.MatrixSeries
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn("$H").when(matrixSeries0).clone();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeries(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.MatrixSeries
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn("pX:PQ?\"5\"v^TX5 cE[T").when(matrixSeries0).clone();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      try { 
        matrixSeriesCollection1.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Object without clone() method is impossible.
         //
         verifyException("org.jfree.chart.util.CloneUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.addSeries((MatrixSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries((-3006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(1725);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).toString();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      MatrixSeries matrixSeries1 = matrixSeriesCollection0.getSeries(0);
      assertEquals(0, matrixSeries1.getColumnsCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      int int0 = matrixSeriesCollection0.getSeriesCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.removeSeries(0);
      assertTrue(matrixSeriesCollection0.getNotify());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((-2138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertTrue(matrixSeriesCollection0.getNotify());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(DomainOrder.NONE, matrixSeriesCollection0.getDomainOrder());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      boolean boolean0 = matrixSeriesCollection0.equals("Invalid 'index'o: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      boolean boolean0 = matrixSeriesCollection0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      boolean boolean0 = matrixSeriesCollection0.equals(matrixSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(matrixSeries0).getItem(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = matrixSeriesCollection0.getZ(0, 2);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).toString();
      doReturn((Comparable) null).when(matrixSeries0).getKey();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Comparable comparable0 = matrixSeriesCollection0.getSeriesKey(0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getItemCount(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn(3396).when(matrixSeries0).getItemRow(anyInt());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = matrixSeriesCollection0.getY(0, 3);
      assertEquals(3396, number0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(matrixSeries0).clone();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Object object0 = matrixSeriesCollection0.clone();
      boolean boolean0 = matrixSeriesCollection0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MatrixSeries matrixSeries0 = mock(MatrixSeries.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getItemCount(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
