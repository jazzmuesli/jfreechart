/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:36:42 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValues_ESTest extends DefaultKeyedValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      
      defaultKeyedValues1.addValue((Comparable) sortOrder0, (double) 0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultKeyedValues0.setValue((Comparable) sortOrder1, (Number) null);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(sortOrder1.equals((Object)sortOrder0));
      assertNotSame(sortOrder1, sortOrder0);
      
      defaultKeyedValues0.sortByKeys(sortOrder1);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(sortOrder1.equals((Object)sortOrder0));
      assertNotSame(sortOrder1, sortOrder0);
      
      defaultKeyedValues0.removeValue((Comparable) sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(sortOrder0.equals((Object)sortOrder1));
      assertNotSame(sortOrder0, sortOrder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (-195.08396773));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultKeyedValues0.setValue((Comparable) sortOrder1, 1886.8610235858819);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(sortOrder1.equals((Object)sortOrder0));
      assertNotSame(sortOrder1, sortOrder0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.insertValue(0, (Comparable) byte0, (Number) byte0);
      assertEquals(3, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(1, (Comparable) sortOrder1, (Number) byte0);
      assertEquals(3, defaultKeyedValues0.getItemCount());
      assertFalse(sortOrder1.equals((Object)sortOrder0));
      assertNotSame(sortOrder1, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.addValue((Comparable) byte0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues0.insertValue(0, comparable0, (Number) null);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      defaultKeyedValues0.setValue((Comparable) byte0, (Number) short0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.setValue((Comparable) float0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.removeValue(0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = new Float((-2688.789F));
      assertEquals((-2688.789F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.addValue((Comparable) float0, 385.82);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue((Comparable) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(385.82, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.setValue((Comparable) float0, (double) 0.0F);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue((Comparable) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      Float float0 = new Float((-1454.9F));
      assertEquals((-1454.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue((Comparable) sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals((-1454.9F), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.setValue((Comparable) float0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue(0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      Float float0 = new Float((-2688.789F));
      assertEquals((-2688.789F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue(0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals((-2688.789F), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.addValue((Comparable) byte0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Comparable<DefaultKeyedValues> comparable0 = (Comparable<DefaultKeyedValues>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultKeyedValues0.setValue(comparable0, (-2160.253));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Comparable comparable1 = defaultKeyedValues0.getKey(0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.setValue((Comparable) float0, (double) 0.0F);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      Float float0 = new Float((-2688.789F));
      assertEquals((-2688.789F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.addValue((Comparable) float0, 385.82);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getIndex(float0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues0.setValue(comparable0, (-1.0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.setValue((Comparable) 1712924321, (Number) byte0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      // Undeclared exception!
      try { 
        defaultKeyedValues0.sortByKeys(sortOrder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.Comparable$MockitoMock$1812911636 cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.setValue((Comparable) null, (Number) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.setValue((Comparable) null, (-821.38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Long long0 = new Long((-95));
      assertEquals((-95L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-95), (Comparable) long0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((-2707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2707
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getKey((-2356));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2356
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.addValue((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.addValue((Comparable) null, (-1656.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.addValue((Comparable) byte0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      defaultKeyedValues0.setValue((Comparable) byte0, (Number) short0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues0.setValue((Comparable) byte0, (double) (byte)43);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getIndex(byte0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = defaultKeyedValues0.getIndex(":l_&Wuk+Zz%#)=0'%-");
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      
      defaultKeyedValues1.addValue((Comparable) sortOrder1, (double) 0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(sortOrder1.equals((Object)sortOrder0));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(sortOrder1, sortOrder0);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      boolean boolean0 = defaultKeyedValues0.equals(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue((Comparable) sortOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (DESCENDING) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (-195.08396773));
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(1, (Comparable) sortOrder0, (Number) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (-195.08396773));
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultKeyedValues0.setValue((Comparable) sortOrder1, 1886.8610235858819);
      Byte byte0 = new Byte((byte)0);
      defaultKeyedValues0.insertValue(1, (Comparable) sortOrder1, (Number) byte0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-2570), (Comparable) sortOrder0, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Float float0 = new Float((-2688.789F));
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: -2688.789
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      List list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      Float float0 = new Float((-2688.789F));
      defaultKeyedValues0.addValue((Comparable) sortOrder0, (Number) float0);
      Object object0 = defaultKeyedValues0.clone();
      boolean boolean0 = defaultKeyedValues0.equals(object0);
      assertNotSame(object0, defaultKeyedValues0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.insertValue(0, (Comparable) sortOrder0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.removeValue((Comparable) sortOrder0);
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      defaultKeyedValues1.addValue((Comparable) sortOrder0, (-2448.87));
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(1, (Comparable) sortOrder0, (Number) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getKey((byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
