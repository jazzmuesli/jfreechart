/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:24:46 GMT 2019
 */

package org.jfree.data.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.xml.CategorySeriesHandler;
import org.jfree.data.xml.ItemHandler;
import org.jfree.data.xml.PieDatasetHandler;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.DefaultHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ItemHandler_ESTest extends ItemHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      try { 
        itemHandler0.startElement("", "org.jfree.data.xml.ItemHandler", "", attributes0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Expected <Item> or <Value>...found 
         //
         verifyException("org.jfree.data.xml.ItemHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, (DefaultHandler) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      try { 
        itemHandler0.startElement("^]Dw]", "V9^o>jb}I HTr", "V9^o>jb}I HTr", attributes2Impl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Expected <Item> or <Value>...found V9^o>jb}I HTr
         //
         verifyException("org.jfree.data.xml.ItemHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Float float0 = new Float(0.0F);
      itemHandler0.setValue(float0);
      Number number0 = itemHandler0.getValue();
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, (DefaultHandler) null);
      Short short0 = Short.valueOf((short)1292);
      itemHandler0.setValue(short0);
      Number number0 = itemHandler0.getValue();
      assertEquals((short)1292, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      itemHandler0.setKey(comparable0);
      Comparable comparable1 = itemHandler0.getKey();
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        itemHandler0.startElement((String) null, (String) null, (String) null, attributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      CategorySeriesHandler categorySeriesHandler0 = new CategorySeriesHandler(pieDatasetHandler0);
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, categorySeriesHandler0);
      itemHandler0.setKey("E}Uv0/");
      // Undeclared exception!
      try { 
        itemHandler0.endElement("Swh0*Xyx0GA2?W", (String) null, "Swh0*Xyx0GA2?W");
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      CategorySeriesHandler categorySeriesHandler0 = new CategorySeriesHandler(pieDatasetHandler0);
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, categorySeriesHandler0);
      // Undeclared exception!
      try { 
        itemHandler0.endElement("Swh0*Xyx0GA2?W", (String) null, "Swh0*Xyx0GA2?W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      // Undeclared exception!
      try { 
        itemHandler0.endElement("QM>!'", "?Vz", "c-:X@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xml.PieDatasetHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, (DefaultHandler) null);
      itemHandler0.endElement("'position' out of bounds.", "V9^o>jb}I HTr", "'position' out of bounds.");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      itemHandler0.startElement("Value", "Value", "Value", attributes0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      itemHandler0.startElement("Item", "Value", "Item", (Attributes) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Comparable comparable0 = itemHandler0.getKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Byte byte0 = new Byte((byte) (-47));
      itemHandler0.setValue(byte0);
      Number number0 = itemHandler0.getValue();
      assertEquals((byte) (-47), number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PieDatasetHandler pieDatasetHandler0 = new PieDatasetHandler();
      ItemHandler itemHandler0 = new ItemHandler(pieDatasetHandler0, pieDatasetHandler0);
      Number number0 = itemHandler0.getValue();
      assertNull(number0);
  }
}
