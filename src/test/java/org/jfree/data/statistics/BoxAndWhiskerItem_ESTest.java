/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:57:17 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BoxAndWhiskerItem_ESTest extends BoxAndWhiskerItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) short0, (Number) null, (Number) short0, (Number) null, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNull(number0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      LinkedList<BoxAndWhiskerItem> linkedList0 = new LinkedList<BoxAndWhiskerItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains(boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number0);
      assertEquals((byte)0, number0);
      assertFalse(linkedList0.contains(boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), (-1.0), 2309.48737911861, (-814.4399525), 0.0, (-1.0), 0.0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNotNull(number0);
      assertEquals(2309.48737911861, number0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNull(number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      LinkedList<BoxAndWhiskerItem> linkedList0 = new LinkedList<BoxAndWhiskerItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains(boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number0);
      assertEquals((byte)0, number0);
      assertFalse(linkedList0.contains(boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), 1368.0, (-1.0), (-1.0), 0.0, 0.0, (-1.0), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNotNull(number0);
      assertEquals(1368.0, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, long0, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNull(number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float(98.78F);
      assertNotNull(float0);
      assertEquals(98.78F, (float)float0, 0.01F);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number0);
      assertEquals(98.78F, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNotNull(number0);
      assertEquals((short) (-1), number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNull(number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) short0, (Number) null, (Number) short0, (Number) null, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals((short)0, number0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3285.4216465807153), 1.0, (-625.0), (-1047.3), (-625.0), 1.0, (-1047.3), (-1047.3), (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNotNull(number0);
      assertEquals((-1047.3), number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNull(number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-759.3894780318108), (-759.3894780318108), 649.3593103, 1.0, 1.0, 0.0, 1.0, 1279.57, (List) null);
      assertNotNull(boxAndWhiskerItem0);
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals((-759.3894780318108), number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(991.18324728001, 991.18324728001, 991.18324728001, 991.18324728001, 991.18324728001, 53.7, 991.18324728001, 1.0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains(1.0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNotNull(number0);
      assertEquals(991.18324728001, number0);
      assertFalse(linkedList0.contains(1.0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) short0, (Number) null, (Number) short0, (Number) null, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNull(number0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, (-1576.5702310428), (-354.9312342), (-1390.3), 1.0, (-1390.3), (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains(0.0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(linkedList0.contains(0.0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2393.10941934663, 2393.10941934663, 2393.10941934663, 2393.10941934663, 0.0, 1919.08697790947, 0.0, 2393.10941934663, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains(2393.10941934663));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNotNull(number0);
      assertEquals(2393.10941934663, number0);
      assertFalse(linkedList0.contains(2393.10941934663));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) short0, (Number) null, (Number) short0, (Number) null, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNull(number0);
      assertFalse(linkedList0.contains((short)0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), (-1.0), 2309.48737911861, (-814.4399525), 0.0, (-1.0), 0.0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNotNull(number0);
      assertEquals((short) (-1), number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNull(number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), (-1.0), 2309.48737911861, (-814.4399525), 0.0, (-1.0), 0.0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(linkedList0.contains((-1.0)));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNotNull(number0);
      assertEquals((short) (-1), number0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) "org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]"));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]"));
      assertEquals(0, linkedList1.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList1);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(linkedList1.contains("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]"));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]"));
      assertFalse(linkedList1.contains("org.jfree.data.statistics.BoxAndWhiskerItem@1[mean=null,median=null,q1=null,q3=null]"));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Short short0 = new Short((short) (-1204));
      assertNotNull(short0);
      assertEquals((short) (-1204), (short)short0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(short0, short0, short0, short0, short0, short0, short0, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Float float0 = new Float(729.3F);
      assertNotNull(float0);
      assertEquals(729.3F, (float)float0, 0.01F);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, float0, float0, list0);
      assertNotNull(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boxAndWhiskerItem0.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertFalse(boolean0);
      assertNotSame(boxAndWhiskerItem0, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 3164.0417483, 1.0, (List) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertEquals(1.0, number0);
      
      Number number1 = boxAndWhiskerItem0.getMinRegularValue();
      assertEquals(0.0, number1);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number0, number0, number0, number1, number0, number1, number1, number1, linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      Double double0 = new Double((short) (-1));
      LinkedList<BoxAndWhiskerItem> linkedList1 = new LinkedList<BoxAndWhiskerItem>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) double0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList1);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1835);
      Short short0 = new Short((short)4216);
      Double double0 = new Double((short)4216);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) short0, (Number) short0, (Number) short0, (Number) double0, (Number) short0, (Number) short0, (Number) integer0, (List) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) integer0, (Number) double0, (Number) double0, (Number) double0, (Number) short0, (Number) double0, (Number) integer0, (Number) short0, (List) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 3164.0417483, 1.0, (List) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(1778.7, 0.0, 1.0, 0.0, (double) 0, (double) 0, 1901.38029778, (double) 0, (List) linkedList1);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3285.4216465807153), 1.0, (-625.0), (-1047.3), (-625.0), 1.0, (-1047.3), (-1047.3), (List) null);
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 3164.0417483, 1.0, (List) linkedList0);
      List list0 = boxAndWhiskerItem0.getOutliers();
      assertNotNull(list0);
      
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertEquals(1.0, number0);
      
      Number number1 = boxAndWhiskerItem0.getMinOutlier();
      assertEquals(3164.0417483, number1);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number1, number0, number0, linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem2 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, number0, list0);
      boolean boolean0 = boxAndWhiskerItem1.equals(boxAndWhiskerItem2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3285.4216465807153), 1.0, (-625.0), (-1047.3), (-625.0), 1.0, (-1047.3), (-1047.3), (List) null);
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertEquals((-1047.3), number0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMean();
      assertEquals((short) (-1), number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 3164.0417483, 1.0, (List) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertEquals(1.0, number0);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, number0, linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3285.4216465807153), 1.0, (-625.0), (-1047.3), (-625.0), 1.0, (-1047.3), (-1047.3), (List) null);
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertEquals(1.0, number0);
      
      boolean boolean0 = boxAndWhiskerItem0.equals(number0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 3164.0417483, 1.0, (List) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertEquals((short) (-1), number0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3285.4216465807153), 1.0, (-625.0), (-1047.3), (-625.0), 1.0, (-1047.3), (-1047.3), (List) null);
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
  }
}
