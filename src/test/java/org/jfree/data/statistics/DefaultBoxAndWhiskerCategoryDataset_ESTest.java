/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:12:26 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Checkbox;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.KeyedObjects2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DefaultBoxAndWhiskerCategoryDataset_ESTest extends DefaultBoxAndWhiskerCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) null, (Comparable) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-401L), 604L);
      assertEquals(604L, simpleTimePeriod0.getEndMillis());
      assertEquals((-401L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      Second second0 = new Second();
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Millisecond millisecond0 = new Millisecond((-1), second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-1L), millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) simpleTimePeriod0, (Comparable) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (org.jfree.data.time.SimpleTimePeriod@2350) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(1043, 1957);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1043, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(0, (-3652), (-3652), (-3652), (-3652), (-92));
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Fri Mar 29 07:06:28 GMT 1585", mockDate0.toString());
      assertEquals("1585", year0.toString());
      assertEquals((-12141852812000L), year0.getFirstMillisecond());
      assertEquals(1585, year0.getYear());
      assertEquals((-12141852812000L), year0.getLastMillisecond());
      assertEquals(1585L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Week week0 = new Week((-3652), year0);
      assertEquals("Fri Mar 29 07:06:28 GMT 1585", mockDate0.toString());
      assertEquals("1585", year0.toString());
      assertEquals((-12141852812000L), year0.getFirstMillisecond());
      assertEquals(1585, year0.getYear());
      assertEquals((-12141852812000L), year0.getLastMillisecond());
      assertEquals(1585L, year0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(83937L, week0.getSerialIndex());
      assertEquals(1585, week0.getYearValue());
      assertEquals((-68), week0.getWeek());
      assertNotNull(week0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) week0, (Comparable) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Week -68, 1585) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ1Value((-730), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Day day0 = minute0.getDay();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) null, (Comparable) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.next();
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertFalse(second1.equals((Object)second0));
      assertNotNull(second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) second1, (Comparable) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Fri Feb 14 20:21:21 GMT 2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue(1, (-601));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getItem(213, (-631));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 213, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertNotNull(month0);
      
      Date date0 = month0.getEnd();
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      ArrayList<Checkbox> arrayList0 = new ArrayList<Checkbox>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) month0, (Comparable) date0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      defaultBoxAndWhiskerCategoryDataset0.removeRow((Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      
      defaultBoxAndWhiskerCategoryDataset0.removeColumn((Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-827.953052311), 1.0, (-827.953052311), (-827.953052311), Double.POSITIVE_INFINITY, 0.0, 0.0, 424.0, (List) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2236.46943708), 1.0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1.0, number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      ArrayList<KeyedObjects2D> arrayList0 = new ArrayList<KeyedObjects2D>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second0, (Comparable) second0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(second0);
      assertEquals(0, int0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-827.953052311), 1.0, (-827.953052311), (-827.953052311), Double.POSITIVE_INFINITY, 1.0, 1.0, (-827.953052311), (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2236.46943708), 1.0);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(1, int0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), (-974.0), 0.0, (List) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeUpperBound(true);
      assertEquals(0.0, double0, 0.01);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-827.953052311), 1.0, (-827.953052311), (-827.953052311), Double.POSITIVE_INFINITY, 0.0, 0.0, 424.0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2236.46943708), 1.0);
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNotNull(simpleHistogramBin0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeUpperBound(true);
      assertEquals(424.0, double0, 0.01);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), 0.0, 0.0, (List) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeLowerBound(true);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), 0.0, 0.0, (List) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), (-974.0), 0.0, (List) stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals((-974.0), range0.getLowerBound(), 0.01);
      assertEquals((-487.0), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(974.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), (-974.0), 0.0, (List) stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals((-1.7976931348623157E308), number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(Double.NaN, Double.NaN, 2655.238, 0.0, 0.0, Double.NaN, (-974.0), 0.0, (List) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(Double.NaN, number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-75.53987849323073), (-75.53987849323073), 2655.238, 0.0, 0.0, (-75.53987849323073), 0.0, 0.0, (List) stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals((-75.53987849323073), number0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-827.953052311), 1.0, (-827.953052311), (-827.953052311), (-827.953052311), 0.0, 0.0, (-827.953052311), (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2236.46943708), 1.0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals((-827.953052311), number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-827.953052311), 1.0, (-827.953052311), (-827.953052311), Double.POSITIVE_INFINITY, 0.0, 0.0, 1.0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2236.46943708), 1.0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1.0, number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2236.46943708), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      ArrayList<KeyedObjects2D> arrayList0 = new ArrayList<KeyedObjects2D>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second0, (Comparable) second0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(second0);
      assertEquals(0, int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeRow((-1395));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-1227), 2533, 0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.remove(mockGregorianCalendar0, millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1227,HOUR_OF_DAY=-1227,MINUTE=2533,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue((-3038), (-3038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRowKey(182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(locale_Category0));
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (Infinity) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23, hour0.getHour());
      assertEquals((-1L), hour0.getLastMillisecond());
      assertEquals((-1L), hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) hour0, (Comparable) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key ([23,31/12/1969]) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = (DefaultBoxAndWhiskerCategoryDataset)defaultBoxAndWhiskerCategoryDataset0.clone();
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-1L), hour0.getLastMillisecond());
      assertEquals(23, hour0.getHour());
      assertEquals((-1L), hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      defaultBoxAndWhiskerCategoryDataset1.data = null;
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset1.getQ3Value((Comparable) hour0, (Comparable) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ3Value(0, (-1241));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ3Value((-1412), (-2976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getQ1Value(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) day0, (Comparable) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (14-February-2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getOutliers(15, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Week week0 = new Week();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) week0, (Comparable) week0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getOutliers(0, (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(273, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 273, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.data = null;
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond((-12L), (long) (-1));
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      assertEquals(ChronoUnit.MILLIS, chronoUnit0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) instant0, (Comparable) chronoUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (1969-12-31T23:59:47.999999999Z) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) millisecond0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMedianValue(2663, 2663);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2663, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMedianValue((-107), (-107));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      XYDataItem xYDataItem0 = new XYDataItem(493.0, 493.0);
      assertEquals(493.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(493.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) xYDataItem0, (Comparable) xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key ([493.0, 493.0]) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue(1, (-3798));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertNotNull(month0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) month0, (Comparable) month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (February 2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Year year0 = new Year((-2237));
      assertEquals("-2237", year0.toString());
      assertEquals((-2237L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2237), year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) null, (Comparable) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((-1564), (-3272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) "Q4(WS{|`1hjrbn9z)", (Comparable) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Q4(WS{|`1hjrbn9z)) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(193, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 193, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getItem((-3004), (-3004));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getColumnKey((-476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.add((BoxAndWhiskerItem) null, (Comparable) day0, (Comparable) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-352.7338675217266), 0.0, (-352.7338675217266), (-3048.6), 2281.65185239, 2281.65185239, 3283.79756401442, 3045.0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2281.65185239));
      assertNotNull(boxAndWhiskerItem0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) null, (Comparable) "scDK$gbhu9^,j*gCe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(locale_Category0));
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(Double.NaN, number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(second0);
      assertEquals((-1), int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex("org.jfree.data.statistics.BoxAndWhiskerItem@8[mean=-1.7976931348623157E308,median=-1.7976931348623157E308,q1=2655.238,q3=0.0]");
      assertEquals((-1), int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      assertSame(locale_Category1, locale_Category0);
      assertEquals(Locale.Category.FORMAT, locale_Category1);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category1, (Comparable) locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) locale_Category1, (Comparable) locale_Category0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(0, 0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      ArrayList<KeyedObjects2D> arrayList0 = new ArrayList<KeyedObjects2D>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) second0, (Comparable) second0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) second0, (Comparable) second0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(number0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) double0, (Comparable) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-Infinity) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(locale_Category0));
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(Double.NaN, number0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Millisecond millisecond0 = new Millisecond();
      ArrayList<Checkbox> arrayList0 = new ArrayList<Checkbox>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.5, (double) 13, (-1.0), 0.0, (-1232.1), (double) 0, (double) 13, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) millisecond0, (Comparable) millisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(0, 0);
      assertEquals(13.0, number0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeColumn((Comparable) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column key (Fri Feb 14 20:21:21 GMT 2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Object object0 = defaultBoxAndWhiskerCategoryDataset0.clone();
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeRow(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.removeRow((Comparable) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (FORMAT) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getColumnKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.clear();
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertTrue(range0.isNaNRange());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.7976931348623157E308), (-1.7976931348623157E308), 2655.238, 0.0, 0.0, (-1.7976931348623157E308), (-974.0), 0.0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) locale_Category0, (Comparable) locale_Category0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRowKey((-340));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(212, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.remove(fixedMillisecond0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
