/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:46:32 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.statistics.BoxAndWhiskerCalculator;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxAndWhiskerCalculator_ESTest extends BoxAndWhiskerCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = linkedList0.pollLast();
      assertNull(short0);
      assertEquals(0, linkedList0.size());
      
      Short short1 = new Short((short)1241);
      assertEquals((short)1241, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-46));
      assertEquals((short) (-46), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = linkedList0.add(short2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(short1));
      assertTrue(linkedList0.contains((short) (-46)));
      assertEquals(1, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      
      long long0 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long0);
      
      int int0 = Short.compare((short)1241, (short) (-46));
      assertEquals(1287, int0);
      
      long long1 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long1);
      assertTrue(long1 == long0);
      
      int int1 = Short.toUnsignedInt((short)11);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = linkedList0.add(short1);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains((short)1241));
      assertEquals(2, linkedList0.size());
      assertFalse(short1.equals((Object)short2));
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      Short short4 = new Short((short)668);
      assertEquals((short)668, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      
      boolean boolean2 = linkedList1.add(short4);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Short short5 = new Short((short) (-1742));
      assertEquals((short) (-1742), (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      
      boolean boolean3 = linkedList1.add(short5);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short6 = new Short((short)0);
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short3));
      
      long long2 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      boolean boolean4 = linkedList1.add(short6);
      assertTrue(boolean4);
      assertFalse(linkedList0.contains((short)11));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short3));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short7 = new Short((short)0);
      assertEquals((short)0, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short3));
      
      boolean boolean5 = linkedList1.add(short7);
      assertTrue(boolean5);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertEquals(2, linkedList0.size());
      assertEquals(6, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short3));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      linkedList1.addLast(short2);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short2.equals((Object)short4));
      assertFalse(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short7));
      assertFalse(short2.equals((Object)short5));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short6));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(311.0, double1, 0.01);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double2, 0.01);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem5 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short7));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList1.contains((short)11));
      assertTrue(linkedList1.contains(short7));
      assertNotNull(boxAndWhiskerItem5);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem4);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem4));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem3));
      
      Long long3 = new Long(1241L);
      assertEquals(1241L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = linkedList0.pollLast();
      assertNull(short0);
      assertEquals(0, linkedList0.size());
      
      Short short1 = new Short((short)1241);
      assertEquals((short)1241, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-46));
      assertEquals((short) (-46), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = linkedList0.add(short2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(short1));
      assertTrue(linkedList0.contains(short2));
      assertEquals(1, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      
      long long0 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long0);
      
      int int0 = Short.compare((short)1241, (short) (-46));
      assertEquals(1287, int0);
      
      boolean boolean1 = linkedList0.add(short2);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(short1));
      assertTrue(linkedList0.contains(short2));
      assertEquals(2, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      
      long long1 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long1);
      assertTrue(long1 == long0);
      
      int int1 = Short.toUnsignedInt((short) (-1));
      assertEquals(65535, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = linkedList0.add(short1);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains((short) (-1)));
      assertTrue(linkedList0.contains(short1));
      assertEquals(3, linkedList0.size());
      assertFalse(short1.equals((Object)short2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      assertFalse(linkedList0.contains((short) (-1)));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(linkedList1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short) (-1)));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short) (-1)));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(linkedList0.contains((short) (-1)));
      assertTrue(linkedList0.contains(short1));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = new Short((short)668);
      assertEquals((short)668, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      boolean boolean3 = linkedList1.add(short4);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains((short) (-46)));
      assertFalse(linkedList1.contains(short3));
      assertEquals(3, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short5 = new Short((short)2787);
      assertEquals((short)2787, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      
      boolean boolean4 = linkedList1.add(short5);
      assertTrue(boolean4);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains((short) (-46)));
      assertFalse(linkedList1.contains(short3));
      assertEquals(3, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short6 = new Short((short)0);
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short3));
      
      long long2 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      boolean boolean5 = linkedList1.add(short6);
      assertTrue(boolean5);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(6, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short3));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short7 = new Short((short)0);
      assertEquals((short)0, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short6));
      
      boolean boolean6 = linkedList1.add(short7);
      assertTrue(boolean6);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short6));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      linkedList1.addLast(short2);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short2.equals((Object)short5));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short4));
      assertFalse(short2.equals((Object)short6));
      assertFalse(short2.equals((Object)short7));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(311.0, double1, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double2, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem5 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem5);
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem4);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem4));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem2));
      
      BoxAndWhiskerItem boxAndWhiskerItem6 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertTrue(linkedList1.contains(short3));
      assertFalse(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem6);
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem5);
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem4);
      assertNotSame(boxAndWhiskerItem6, boxAndWhiskerItem0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem5));
      assertFalse(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem4));
      assertFalse(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem6.equals((Object)boxAndWhiskerItem0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double3 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(597.5, double3, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains((short) (-46)));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = linkedList0.pollLast();
      assertNull(short0);
      assertEquals(0, linkedList0.size());
      
      Short short1 = new Short((short)1241);
      assertEquals((short)1241, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = linkedList0.add(short2);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(short1));
      assertTrue(linkedList0.contains((short) (-1)));
      assertEquals(1, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      
      long long0 = Short.toUnsignedLong((short)0);
      assertEquals(0L, long0);
      
      int int0 = Short.compare((short)1241, (short)0);
      assertEquals(1241, int0);
      
      boolean boolean1 = linkedList0.add(short2);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(short1));
      assertTrue(linkedList0.contains((short) (-1)));
      assertEquals(2, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      
      long long1 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long1);
      assertFalse(long1 == long0);
      
      int int1 = Short.toUnsignedInt((short) (-1));
      assertEquals(65535, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = linkedList0.add(short1);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertFalse(short1.equals((Object)short2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertFalse(linkedList1.contains((short)0));
      assertNotNull(linkedList1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertFalse(linkedList1.contains((short)0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertFalse(linkedList1.contains((short)0));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      linkedList1.addLast(short2);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertFalse(linkedList1.contains((short)0));
      assertEquals(3, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      boolean boolean3 = linkedList1.add(short3);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-1.0), double0, 0.01);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals((-1.0), double1, 0.01);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertTrue(linkedList1.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(3, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-1.0), double2, 0.01);
      assertFalse(linkedList0.contains((short)0));
      assertTrue(linkedList0.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Double> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      
      List<Double> list0 = linkedList0.subList(0, 0);
      assertTrue(linkedList0.contains(double0));
      assertFalse(list0.contains(double0));
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Double double1 = new Double(922.1376636102254);
      assertEquals(922.1376636102254, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = linkedList0.add(double1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(double0));
      assertEquals(2, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(double0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
      
      Iterator<Double> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(double0));
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      assertTrue(linkedList0.contains(double0));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(double0));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(double0));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(list0, false);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      
      Short short0 = new Short((short) (-1227));
      assertEquals((short) (-1227), (short)short0);
      assertNotNull(short0);
      
      linkedList0.addFirst(short0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(double1, double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains(true));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(linkedList0.contains(true));
      assertEquals(0, linkedList0.size());
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(0, linkedList1.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      linkedList0.clear();
      assertFalse(linkedList0.contains(true));
      assertEquals(0, linkedList0.size());
      
      linkedList1.clear();
      assertEquals(0, linkedList1.size());
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList1.offer(float0);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(float0));
      assertEquals(1, linkedList1.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertTrue(linkedList1.contains(float0));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(1, linkedList1.size());
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      double double3 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(Double.NaN, double3, 0.01);
      assertTrue(linkedList1.contains(float0));
      assertEquals(1, linkedList1.size());
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = BoxAndWhiskerCalculator.calculateQ3(linkedList1);
      assertEquals(Double.NaN, double4, 0.01);
      assertTrue(linkedList1.contains(float0));
      assertEquals(1, linkedList1.size());
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(linkedList0.contains(Double.NaN));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(0, linkedList0.size());
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertTrue(linkedList1.contains(float0));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(1, linkedList1.size());
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem5 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertTrue(linkedList1.contains(float0));
      assertNotNull(boxAndWhiskerItem5);
      assertEquals(1, linkedList1.size());
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem4);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem3));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem4));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((-2436));
      assertEquals((-2436), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      
      Integer integer1 = new Integer((-2436));
      assertEquals((-2436), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean1 = linkedList0.add(integer1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains((-2436)));
      assertEquals(2, linkedList0.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((-2436)));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((-2436)));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-2436.0), double0, 0.01);
      assertTrue(linkedList0.contains((-2436)));
      assertEquals(2, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((-2436)));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = false;
      Spliterator<Integer> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((-130));
      assertEquals((-130), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", 3124);
      assertEquals(3124, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean1 = linkedList0.add((Integer) null);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      long long0 = Integer.toUnsignedLong((-1));
      assertEquals(4294967295L, long0);
      
      boolean boolean2 = linkedList0.add(integer0);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains((-1)));
      assertTrue(linkedList0.contains(integer0));
      assertEquals(2, linkedList0.size());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals((-1.0), double1, 0.01);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.compare((byte)0, (byte)0);
      assertEquals(0, int0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int1 = Byte.toUnsignedInt((byte)1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      long long0 = Byte.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains((byte)1));
      assertFalse(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = linkedList0.add(byte0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains((byte)1));
      assertEquals(2, linkedList0.size());
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      
      int int2 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Byte byte2 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      int int3 = Byte.toUnsignedInt((byte)1);
      assertEquals(1, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      linkedList0.add(0, byte2);
      assertTrue(linkedList0.contains(byte2));
      assertEquals(3, linkedList0.size());
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      long long1 = Byte.toUnsignedLong((byte)16);
      assertEquals(16L, long1);
      assertFalse(long1 == long0);
      
      int int4 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertTrue(linkedList0.contains(byte2));
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(3, linkedList0.size());
      
      boolean boolean2 = linkedList0.add(byte0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(byte2));
      assertEquals(4, linkedList0.size());
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(byte2));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(4, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(byte2));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(4, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(byte2));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(4, linkedList0.size());
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(linkedList0.contains(byte2));
      assertEquals(4, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Byte> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte)58);
      assertEquals(58, int0);
      
      linkedList0.add(0, byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(58.0, double0, 0.01);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(58.0, double1, 0.01);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(double1, double0, 0.01);
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(58.0, double2, 0.01);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(58.0, double3, 0.01);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(byte0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      
      double double4 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(58.0, double4, 0.01);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(2, linkedList0.size());
      
      linkedList1.addFirst("org.jfree.data.statistics.BoxAndWhiskerCalculator");
      assertTrue(linkedList1.contains("org.jfree.data.statistics.BoxAndWhiskerCalculator"));
      assertEquals(1, linkedList1.size());
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<Object> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Object object0 = linkedList0.pollLast();
      assertFalse(linkedList0.contains((short)2));
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) short0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains((short)2));
      assertEquals(1, linkedList0.size());
      
      Object object1 = linkedList0.pollLast();
      assertEquals((short)2, object1);
      assertFalse(linkedList0.contains((short)2));
      assertNotNull(object1);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(linkedList0.contains((short)2));
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((Object) short0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains((short)2));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      long long0 = Short.toUnsignedLong((short)2);
      assertEquals(2L, long0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((short)2));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(2.0, double1, 0.01);
      assertTrue(linkedList0.contains((short)2));
      assertEquals(1, linkedList0.size());
      assertNotEquals(double1, double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(1, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(1, linkedList0.size());
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(2.0, double2, 0.01);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertEquals(1, linkedList0.size());
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      String string0 = Long.toUnsignedString(1L);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      long long2 = Long.divideUnsigned((short)2, 1270L);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      
      boolean boolean2 = linkedList0.offerLast(long1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      
      double double3 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(2.0, double3, 0.01);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertEquals(2, linkedList0.size());
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(2.0, double4, 0.01);
      assertTrue(linkedList0.contains((short)2));
      assertFalse(linkedList0.contains(true));
      assertEquals(2, linkedList0.size());
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min(1712, 1);
      assertEquals(1, int0);
      
      int int1 = Integer.min(1, 1584);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      long long0 = Integer.toUnsignedLong(1);
      assertEquals(1L, long0);
      
      boolean boolean0 = linkedList0.offerFirst(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(int1));
      assertFalse(linkedList0.contains(1712));
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean1 = linkedList0.add((Integer) null);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(int1));
      assertFalse(linkedList0.contains(1712));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = Integer.toUnsignedString(0);
      assertEquals("0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Integer.toUnsignedString(0);
      assertEquals("0", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = linkedList0.offer(integer1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(int1));
      assertFalse(linkedList0.contains(1712));
      assertEquals(3, linkedList0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(851.30749659553);
      assertEquals(851.3075F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-1.0F), (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
      
      float float2 = Float.sum((-1.0F), 1.0F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = linkedList0.add((Float) null);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(float2));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offerFirst(float0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(float2));
      assertTrue(linkedList0.contains(float0));
      assertEquals(2, linkedList0.size());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float float3 = Float.sum(1027.6605F, 1027.6605F);
      assertEquals(2055.321F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      boolean boolean2 = linkedList0.add(float0);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains(float2));
      assertTrue(linkedList0.contains(float0));
      assertEquals(3, linkedList0.size());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(linkedList0.contains(float2));
      assertTrue(linkedList0.contains(float0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ3(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Long> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(Double.POSITIVE_INFINITY));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(double0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(Double.POSITIVE_INFINITY));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(Double.POSITIVE_INFINITY));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertTrue(linkedList0.contains(double1));
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("(Sa.==*]");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("(Sa.==*]"));
      assertEquals(1, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("(Sa.==*]"));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      boolean boolean1 = linkedList0.addAll((Collection<? extends String>) linkedList1);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains("(Sa.==*]"));
      assertFalse(linkedList1.contains("(Sa.==*]"));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add("");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = linkedList0.add("org.jfree.data.statistics.BoxAndWhiskerCalculator");
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(""));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = linkedList1.add("");
      assertTrue(boolean4);
      assertFalse(linkedList1.contains("(Sa.==*]"));
      assertTrue(linkedList1.contains(""));
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertTrue(linkedList0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      assertEquals(3, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(""));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(""));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertTrue(linkedList0.contains(""));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      boolean boolean5 = linkedList0.add("LyWV`;wBtUr[N,#lA^i");
      assertTrue(boolean5);
      assertTrue(linkedList0.contains(""));
      assertEquals(4, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertTrue(linkedList0.contains(""));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(4, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      
      boolean boolean6 = linkedList0.add("@~jm[)ryK6W");
      assertTrue(boolean6);
      assertTrue(linkedList0.contains("LyWV`;wBtUr[N,#lA^i"));
      assertEquals(5, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertTrue(linkedList0.contains("LyWV`;wBtUr[N,#lA^i"));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(5, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.offerFirst(float0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      linkedList0.addFirst(float1);
      assertTrue(linkedList0.contains(float0));
      assertEquals(2, linkedList0.size());
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean2 = Float.isFinite(421.0F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = linkedList0.add(float2);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(float2));
      assertFalse(linkedList0.contains(421.0F));
      assertEquals(3, linkedList0.size());
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(float2));
      assertFalse(linkedList0.contains(421.0F));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = linkedList0.poll();
      assertFalse(linkedList0.contains(1));
      assertNull(integer1);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(1));
      assertEquals(1, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      assertTrue(linkedList0.contains(1));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(1.0, double2, 0.01);
      assertTrue(linkedList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      linkedList0.push((Integer) null);
      assertTrue(linkedList0.contains(1));
      assertEquals(2, linkedList0.size());
      
      double double3 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(1.0, double3, 0.01);
      assertTrue(linkedList0.contains(1));
      assertEquals(2, linkedList0.size());
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(1));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(2, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(498.63849383);
      assertEquals(498.6385F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList0.add((Object) float0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(498.63849383));
      assertEquals(1, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(linkedList0.contains(498.63849383));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains(true));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(1, linkedList0.size());
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.add((Object) long0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(1L));
      assertEquals(1, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(1.0, double0, 0.01);
      assertTrue(linkedList0.contains(1L));
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(1L));
      assertEquals(1, linkedList0.size());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      
      double double1 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      assertEquals(0.0, double1, 0.01);
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        BoxAndWhiskerCalculator.calculateQ1((List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(1, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(object0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(object0));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains(object0));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = linkedList0.pollLast();
      assertNull(short0);
      assertEquals(0, linkedList0.size());
      
      Short short1 = new Short((short)1241);
      assertEquals((short)1241, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-46));
      assertEquals((short) (-46), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = linkedList0.add(short2);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(short2));
      assertFalse(linkedList0.contains((short)1241));
      assertEquals(1, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      
      long long0 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long0);
      
      int int0 = Short.compare((short)1241, (short) (-46));
      assertEquals(1287, int0);
      
      boolean boolean1 = linkedList0.add(short2);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains((short) (-46)));
      assertFalse(linkedList0.contains((short)1241));
      assertEquals(2, linkedList0.size());
      assertFalse(short2.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      
      long long1 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long1);
      assertTrue(long1 == long0);
      
      int int1 = Short.toUnsignedInt((short) (-1));
      assertEquals(65535, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = linkedList0.add(short1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList0.contains((short) (-1)));
      assertEquals(3, linkedList0.size());
      assertFalse(short1.equals((Object)short2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList0.contains((short) (-1)));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(linkedList1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList0.contains((short) (-1)));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList0.contains((short) (-1)));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains((short)1241));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertTrue(linkedList0.contains((short)1241));
      assertFalse(linkedList0.contains((short) (-1)));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = new Short((short)668);
      assertEquals((short)668, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      
      boolean boolean3 = linkedList1.add(short4);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains((short)0));
      assertFalse(linkedList1.contains((short)0));
      assertTrue(linkedList1.contains((short)668));
      assertEquals(3, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short5 = new Short((short)2787);
      assertEquals((short)2787, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      
      boolean boolean4 = linkedList1.add(short5);
      assertTrue(boolean4);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains((short)0));
      assertFalse(linkedList1.contains((short)0));
      assertTrue(linkedList1.contains((short)668));
      assertEquals(3, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short6 = new Short((short)0);
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      
      long long2 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      boolean boolean5 = linkedList1.add(short6);
      assertTrue(boolean5);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains(short6));
      assertEquals(3, linkedList0.size());
      assertEquals(6, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short7 = new Short((short)0);
      assertEquals((short)0, (short)short7);
      assertNotNull(short7);
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short2));
      
      boolean boolean6 = linkedList1.add(short7);
      assertTrue(boolean6);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains(short6));
      assertEquals(3, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short2));
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      linkedList1.addLast(short2);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains(short6));
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short2.equals((Object)short6));
      assertFalse(short2.equals((Object)short5));
      assertFalse(short2.equals((Object)short7));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertFalse(short2.equals((Object)short3));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(311.0, double1, 0.01);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains(short6));
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      
      double double2 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double2, 0.01);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertEquals(3, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short6));
      assertFalse(linkedList1.contains((short) (-1)));
      assertTrue(linkedList1.contains(short6));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(3, linkedList0.size());
      assertEquals(8, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      
      Long long3 = new Long((short)1241);
      assertEquals(1241L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)1241);
      assertEquals((short)1241, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-46));
      assertEquals((short) (-46), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains((short)1241));
      assertTrue(linkedList0.contains(short1));
      assertEquals(1, linkedList0.size());
      assertFalse(short1.equals((Object)short0));
      
      long long0 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long0);
      
      int int0 = Short.compare((short)1241, (short) (-46));
      assertEquals(1287, int0);
      
      long long1 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long1);
      assertTrue(long1 == long0);
      
      int int1 = Short.toUnsignedInt((short)1241);
      assertEquals(1241, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = linkedList0.add(short0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(short1));
      assertEquals(2, linkedList0.size());
      assertFalse(short0.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(boxAndWhiskerItem1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      
      Short short2 = new Short((short)1241);
      assertEquals((short)1241, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short short3 = new Short((short)668);
      assertEquals((short)668, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      boolean boolean2 = linkedList1.add(short3);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(3, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Short short4 = new Short((short) (-1742));
      assertEquals((short) (-1742), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      
      boolean boolean3 = linkedList1.add(short4);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(4, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      
      Short short5 = new Short((short)1241);
      assertEquals((short)1241, (short)short5);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      
      long long2 = Short.toUnsignedLong((short)1241);
      assertEquals(1241L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      boolean boolean4 = linkedList1.add(short5);
      assertTrue(boolean4);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(5, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Short short6 = new Short((short) (-46));
      assertEquals((short) (-46), (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short1));
      
      boolean boolean5 = linkedList1.add(short6);
      assertTrue(boolean5);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(6, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short1));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      linkedList1.addLast(short1);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short6));
      assertFalse(short1.equals((Object)short5));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short4));
      assertFalse(short1.equals((Object)short3));
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(311.0, double1, 0.01);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BoxAndWhiskerItem boxAndWhiskerItem2 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertNotNull(boxAndWhiskerItem2);
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem2, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem2.equals((Object)boxAndWhiskerItem1));
      
      BoxAndWhiskerItem boxAndWhiskerItem3 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(boxAndWhiskerItem3);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem3, boxAndWhiskerItem0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem1));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem3.equals((Object)boxAndWhiskerItem0));
      
      BoxAndWhiskerItem boxAndWhiskerItem4 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(boxAndWhiskerItem4);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem3);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem4, boxAndWhiskerItem2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem0));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem4.equals((Object)boxAndWhiskerItem2));
      
      BoxAndWhiskerItem boxAndWhiskerItem5 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(linkedList0.contains(short3));
      assertTrue(linkedList0.contains(short1));
      assertTrue(linkedList1.contains(short1));
      assertNotNull(boxAndWhiskerItem5);
      assertEquals(2, linkedList0.size());
      assertEquals(7, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem4);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem1);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem2);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem0);
      assertNotSame(boxAndWhiskerItem5, boxAndWhiskerItem3);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem1));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem3));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem2));
      assertFalse(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem0));
      assertTrue(boxAndWhiskerItem5.equals((Object)boxAndWhiskerItem4));
      
      Long long3 = new Long(1241L);
      assertEquals(1241L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1241);
      Short short1 = new Short((short) (-46));
      linkedList0.add(short1);
      Short.toUnsignedLong((short)1241);
      Short.compare((short)1241, (short) (-46));
      Short.toUnsignedLong((short)1241);
      Short.toUnsignedLong((short)1241);
      Short.toUnsignedInt((short)1241);
      linkedList0.add(short0);
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      Short short2 = new Short((short)1241);
      Short short3 = new Short((short) (-46));
      linkedList1.add(short3);
      Short short4 = new Short((short) (-1742));
      linkedList1.add(short4);
      Short.toUnsignedLong((short)1241);
      linkedList1.add(short3);
      Short short5 = new Short((short) (-46));
      Short.toUnsignedLong((short)8);
      linkedList1.add(short5);
      linkedList1.addLast(short1);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      Long long0 = new Long(1241L);
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      double double0 = BoxAndWhiskerCalculator.calculateQ3(linkedList0);
      double double1 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals(double1, double0, 0.01);
      
      Double double2 = new Double(Double.NaN);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      linkedList0.clear();
      Float float0 = new Float(Double.NaN);
      linkedList1.offer(float0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      BoxAndWhiskerCalculator.calculateQ3(linkedList1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      double double3 = BoxAndWhiskerCalculator.calculateQ1(linkedList1);
      assertEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, false);
      assertNotNull(boxAndWhiskerItem0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.pollLast();
      Short short0 = new Short((short) (-46));
      linkedList0.add(short0);
      Short short1 = new Short((short) (-46));
      linkedList0.add(short0);
      Short.toUnsignedInt((short) (-1));
      linkedList0.add((Short) null);
      LinkedList<Short> linkedList1 = new LinkedList<Short>(linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem0 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0);
      Short short2 = new Short((short)0);
      Short short3 = new Short((short)668);
      linkedList1.add(short3);
      Short short4 = new Short((short)2817);
      Short.toUnsignedLong((short)0);
      Short.toUnsignedLong((short) (-1));
      linkedList1.add(short4);
      linkedList1.add((Short) null);
      Short short5 = new Short((short)0);
      linkedList1.add(short5);
      linkedList1.addLast(short0);
      BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList0, true);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1, true);
      double double0 = BoxAndWhiskerCalculator.calculateQ1(linkedList0);
      assertEquals((-46.0), double0, 0.01);
      
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      Double double1 = new Double((-46.0));
      BoxAndWhiskerItem boxAndWhiskerItem1 = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics((List) linkedList1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
  }
}
