/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:34:07 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyedObjects2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultMultiValueCategoryDataset_ESTest extends DefaultMultiValueCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) null, (Comparable) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) Double.NaN, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Vector<Integer> vector0 = new Vector<Integer>();
      defaultMultiValueCategoryDataset0.add(vector0, double1, double0);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double((-0.913333261290564));
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue((Comparable) double0, (Comparable) double0);
      assertNotNull(number0);
      assertEquals((-0.913333261290564), number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Vector<Integer> vector0 = new Vector<Integer>();
      defaultMultiValueCategoryDataset0.add(vector0, tableOrder0, tableOrder0);
      Comparable comparable0 = defaultMultiValueCategoryDataset0.getRowKey(0);
      assertEquals(TableOrder.BY_COLUMN, comparable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate((-1017), (-3302), 2122, 0, (-1065), 371);
      Vector<KeyedObjects2D> vector0 = new Vector<KeyedObjects2D>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(mockDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double((-0.913333261290564));
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double((-0.913333261290564));
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertEquals((-0.913333261290564), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate((-1017), (-3302), 2122, 0, (-1065), 371);
      Vector<KeyedObjects2D> vector0 = new Vector<KeyedObjects2D>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Comparable comparable0 = defaultMultiValueCategoryDataset0.getColumnKey(0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Vector<Integer> vector0 = new Vector<Integer>();
      defaultMultiValueCategoryDataset0.add(vector0, tableOrder0, tableOrder0);
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues(770, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 770, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((-193), (-193));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = Double.valueOf((-1461.06428435));
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) double0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1461.06428435) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(6, (-1845));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-77), 1714);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.data = null;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.data = null;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Byte byte0 = new Byte((byte)0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add(linkedList0, byte0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double(0.0);
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double(0.0);
      Vector<Integer> vector0 = new Vector<Integer>();
      defaultMultiValueCategoryDataset0.add(vector0, double0, double0);
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      double double1 = defaultMultiValueCategoryDataset0.getRangeLowerBound(false);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double(0.0);
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue((Comparable) double0, (Comparable) double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate((-1017), (-3302), 2122, 0, (-1065), 371);
      Vector<KeyedObjects2D> vector0 = new Vector<KeyedObjects2D>();
      KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
      vector0.add(keyedObjects2D0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      assertEquals(1, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Double double0 = new Double(0.0);
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      defaultMultiValueCategoryDataset0.add(list0, double0, double0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue((Comparable) double0, (Comparable) double0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      boolean boolean0 = object0.equals(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate((-1017), (-3302), 2122, 0, (-1065), 371);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 2090.0, 2122, 0.0, 0.0);
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(oHLCDataItem0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) "kb IX]BoETxOL]WD", (Comparable) "kb IX]BoETxOL]WD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (kb IX]BoETxOL]WD) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate((-1017), (-3302), 2122, 0, (-1065), 371);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 2090.0, 2122, 0.0, 0.0);
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(oHLCDataItem0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey((-1834));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }
}
