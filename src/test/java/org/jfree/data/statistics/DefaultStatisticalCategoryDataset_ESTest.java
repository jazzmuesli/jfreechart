/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:03:24 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Clock;
import java.time.ZoneOffset;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.xy.YIntervalDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultStatisticalCategoryDataset_ESTest extends DefaultStatisticalCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) bigInteger0, (Comparable) bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (10) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue(3625, (-1179));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3625, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.removeRow((Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultStatisticalCategoryDataset0.removeColumn((Comparable) bigInteger0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue((Comparable) integer0, (Comparable) byte0);
      assertNull(number0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue((Comparable) integer0, (Comparable) integer0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue((Comparable) integer0, (Comparable) integer0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(300, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) "s ", (Comparable) "s ");
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Number number0 = defaultStatisticalCategoryDataset0.getValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(300, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) second0, (Comparable) second0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) second0, (Comparable) second0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) integer0, (Comparable) integer0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1041.629813, number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue(0, 0);
      assertNotNull(number0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-30000), number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(calendar0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      defaultStatisticalCategoryDataset0.add((Number) 0, (Number) 59, (Comparable) calendar0, (Comparable) second0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Comparable comparable0 = defaultStatisticalCategoryDataset0.getRowKey(0);
      assertNotNull(comparable0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) "s ", (Comparable) "s ");
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(false);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.add(9.572150921966378, 9.572150921966378, (Comparable) "is ", (Comparable) "is ");
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(false);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(9.572150921966378, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeLowerBound(false);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      defaultStatisticalCategoryDataset0.add(0.8, 32.38001878776483, (Comparable) quarter0, (Comparable) quarter0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeLowerBound(true);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-31.580018787764832), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(range0.isNaNRange());
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue((Comparable) integer0, (Comparable) integer0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue((Comparable) integer0, (Comparable) integer0);
      assertNotNull(number0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-30000), number0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add(9.572150921966378, 9.572150921966378, (Comparable) "is ", (Comparable) "is ");
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(9.572150921966378, number0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add((-1.0264798862452313), 0.0, (Comparable) "pxc:\"?C2Qk,Oa%", (Comparable) "pxc:\"?C2Qk,Oa%");
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue(0, 0);
      assertNotNull(number0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals((-1.0264798862452313), number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) "is ", (Comparable) "is ");
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Comparable comparable0 = defaultStatisticalCategoryDataset0.getColumnKey(0);
      assertNotNull(comparable0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals("is ", comparable0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      defaultStatisticalCategoryDataset0.add((Number) long0, (Number) long0, (Comparable) long0, (Comparable) long0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(long0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultStatisticalCategoryDataset0.add(0.0, (-1493.1714592677597), (Comparable) second0, (Comparable) second0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((-1617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      assertNotNull(clock0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      assertNotNull(thaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove(thaiBuddhistDate0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 928.65431437305);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(928.65431437305, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((Comparable) null, (Comparable) simpleHistogramBin0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(0, (-3439));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey((-2636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRangeBounds(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-60000.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) "s ", (Comparable) "s ");
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultStatisticalCategoryDataset0.removeColumn(0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) "s ", (Comparable) "s ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column key (s ) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((int) integer0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((-65), (-65));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnKey(3015);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3015, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.add((Number) 0, (Number) null, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.add(1984.305378931216, 1984.305378931216, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      Hour hour0 = new Hour(mockDate0, timeZone0, locale0);
      assertNotNull(hour0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      defaultStatisticalCategoryDataset0.add(127.13222022865257, (-2876.198043066), (Comparable) hour0, (Comparable) hour0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(true);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((-2749.0658228373477), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeUpperBound(true);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeLowerBound(true);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) integer0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      defaultStatisticalCategoryDataset0.add((-1170.7997), (-1170.7997), (Comparable) day0, (Comparable) day0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue((Comparable) day0, (Comparable) day0);
      assertNotNull(number0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals((-1170.7997), number0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(integer0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(day0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(boolean0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset1.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals((Object) null);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(164.0, range0.getUpperBound(), 0.01);
      assertEquals(82.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(164.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      double double0 = defaultStatisticalCategoryDataset0.getRangeLowerBound(true);
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) bigInteger1, (Comparable) bigInteger0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      defaultStatisticalCategoryDataset0.add(1.7197903832106323, 0.0, (Comparable) quarter0, (Comparable) quarter0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      defaultStatisticalCategoryDataset0.remove(bigInteger1, quarter0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((double) 82, (double) (byte)82, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.remove(integer0, integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      defaultStatisticalCategoryDataset0.remove(integer0, integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.remove(integer0, integer0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
      
      defaultStatisticalCategoryDataset0.add(0.0, 1041.629813, (Comparable) integer0, (Comparable) integer0);
      assertEquals(2, defaultStatisticalCategoryDataset0.getColumnCount());
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
      assertEquals(2, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Second second0 = new Second();
      defaultStatisticalCategoryDataset0.add(0.0, (-1493.1714592677597), (Comparable) second0, (Comparable) second0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      defaultStatisticalCategoryDataset0.add((Number) 0, (Number) 59, (Comparable) calendar0, (Comparable) second0);
      defaultStatisticalCategoryDataset0.getRowIndex(calendar0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Day day0 = new Day();
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, (Comparable) day0, (Comparable) day0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue((Comparable) integer0, (Comparable) integer0);
      assertEquals((-30000), number0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = defaultStatisticalCategoryDataset0.getStdDevValue(0, 0);
      assertEquals(300, number0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = defaultStatisticalCategoryDataset0.getValue((Comparable) integer0, (Comparable) integer0);
      assertEquals((-30000), number0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Byte byte0 = new Byte((byte)82);
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue((Comparable) integer0, (Comparable) byte0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(0.0, 0.0, (Comparable) "s ", (Comparable) "s ");
      Number number0 = defaultStatisticalCategoryDataset0.getMeanValue(0, 0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn((Comparable) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column key (10) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.clear();
      assertTrue(defaultStatisticalCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getRowKey(334);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 334, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getColumnKey((-2306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getValue((Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Fri Feb 14 20:21:21 GMT 2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      YIntervalDataItem yIntervalDataItem0 = new YIntervalDataItem(3942.989985620023, 0.0, (-1553.676695508), 0.0);
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.removeRow((Comparable) yIntervalDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (org.jfree.data.xy.YIntervalDataItem@b2) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.remove(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-30000) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }
}
