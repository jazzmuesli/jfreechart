/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:15:32 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.MeanAndStandardDeviation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeanAndStandardDeviation_ESTest extends MeanAndStandardDeviation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(244.51935527145, 244.51935527145);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(244.51935527145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-1.0), (-127.44));
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals((-1.0), meanAndStandardDeviation0.getMeanValue(), 0.01);
      assertEquals((-127.44), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1.0, 1.0);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-57.3264397), (-57.3264397));
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertEquals((-57.3264397), number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1392.86, 1055.00651);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals(1055.00651, meanAndStandardDeviation0.getStandardDeviationValue(), 0.01);
      assertEquals(1392.86, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-57.3264397), (-57.3264397));
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals((-57.3264397), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-57.3264397), (-57.3264397));
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals((-57.3264397), number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1392.86, 1055.00651);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation(1392.86, 0.0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertEquals(1392.86, meanAndStandardDeviation1.getMeanValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(Double.NaN, (-1961.1398584584674));
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((-1961.1398584584674), (-1961.1398584584674));
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertFalse(boolean0);
      assertEquals((-1961.1398584584674), meanAndStandardDeviation0.getStandardDeviationValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation(0.0, 0.0);
      boolean boolean0 = meanAndStandardDeviation1.equals(meanAndStandardDeviation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(7.75630936725623, (-1.0));
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals((-1.0), meanAndStandardDeviation0.getStandardDeviationValue(), 0.01);
      assertEquals(7.75630936725623, number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(7.75630936725623, (-1.0));
      String string0 = meanAndStandardDeviation0.toString();
      assertEquals("[7.75630936725623, -1.0]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      boolean boolean0 = meanAndStandardDeviation0.equals(number0);
      assertFalse(boolean0);
  }
}
