/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:21:05 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.Statistics;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statistics_ESTest extends Statistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Number[] numberArray0 = new Number[9];
      Long long0 = new Long(3863L);
      assertNotNull(long0);
      assertEquals(3863L, (long)long0);
      
      numberArray0[0] = (Number) long0;
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      numberArray0[4] = (Number) byte0;
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Number[] numberArray0 = new Number[9];
      Integer integer0 = new Integer(1595);
      assertNotNull(integer0);
      assertEquals(1595, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      Float float0 = new Float((double) 1595);
      assertNotNull(float0);
      assertEquals(1595.0F, (float)float0, 0.01F);
      
      numberArray0[1] = (Number) float0;
      numberArray0[2] = (Number) float0;
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      Number[] numberArray1 = new Number[5];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, 3819);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period can't be longer than dataset.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, (byte)50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      numberArray0[0] = (Number) byte0;
      Number[] numberArray1 = new Number[3];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      double double0 = Statistics.getCorrelation(numberArray1, numberArray0);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, numberArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Long long0 = new Long((byte) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Number[] numberArray1 = new Number[3];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      numberArray1[0] = (Number) long0;
      double double0 = Statistics.getCorrelation(numberArray1, numberArray0);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, numberArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Number[] numberArray0 = new Number[9];
      Number[] numberArray1 = new Number[0];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      Number[] numberArray1 = new Number[3];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Number[] numberArray0 = new Number[7];
      Double double0 = Double.valueOf(3218.37413);
      assertNotNull(double0);
      assertEquals(3218.37413, (double)double0, 0.01);
      
      numberArray0[0] = (Number) double0;
      Short short0 = new Short((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      numberArray0[1] = (Number) short0;
      Byte byte0 = new Byte((byte)58);
      assertNotNull(byte0);
      assertEquals((byte)58, (byte)byte0);
      
      numberArray0[2] = (Number) byte0;
      Long long0 = new Long(621L);
      assertNotNull(long0);
      assertEquals(621L, (long)long0);
      
      numberArray0[3] = (Number) long0;
      numberArray0[4] = (Number) long0;
      numberArray0[5] = (Number) double0;
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray0[6] = (Number) float0;
      Number[] numberArray1 = new Number[7];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) long0;
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) double0;
      numberArray1[6] = (Number) long0;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray1);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertArrayEquals(new double[] {1045.1762017216254, 0.12858673785471095}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(7, numberArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, numberArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Number[] numberArray0 = new Number[7];
      Number[] numberArray1 = new Number[7];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Number[] numberArray0 = new Number[7];
      Number[] numberArray1 = new Number[1];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Statistics.getLinearFit(): array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 760, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 380, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, (-1), false);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(linkedList0.contains((short)0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 1231);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, (-2714), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2714, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.offerFirst(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.addAll(1, (Collection<? extends Integer>) linkedList0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean2);
      
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(4, linkedList0.size());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      numberArray0[0] = (Number) short0;
      Byte byte0 = new Byte((byte)76);
      assertNotNull(byte0);
      assertEquals((byte)76, (byte)byte0);
      
      numberArray0[1] = (Number) byte0;
      Float float0 = new Float(1470.56F);
      assertNotNull(float0);
      assertEquals(1470.56F, (float)float0, 0.01F);
      
      numberArray0[2] = (Number) float0;
      double double0 = Statistics.getStdDev(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(828.2728780494027, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      numberArray0[0] = (Number) short0;
      Byte byte0 = new Byte((byte)76);
      assertNotNull(byte0);
      assertEquals((byte)76, (byte)byte0);
      
      numberArray0[1] = (Number) byte0;
      Float float0 = new Float(1470.56F);
      assertNotNull(float0);
      assertEquals(1470.56F, (float)float0, 0.01F);
      
      numberArray0[2] = (Number) float0;
      double double0 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      numberArray0[0] = (Number) short0;
      Byte byte0 = new Byte((byte)76);
      assertNotNull(byte0);
      assertEquals((byte)76, (byte)byte0);
      
      numberArray0[1] = (Number) byte0;
      Float float0 = new Float(1470.56F);
      assertNotNull(float0);
      assertEquals(1470.56F, (float)float0, 0.01F);
      
      numberArray0[2] = (Number) float0;
      Number[] numberArray1 = new Number[3];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = new Integer((short) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) short0;
      double double0 = Statistics.getSlope(numberArray0, numberArray1);
      assertFalse(numberArray0.equals((Object)numberArray1));
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertNotSame(numberArray0, numberArray1);
      assertNotSame(numberArray1, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, numberArray1.length);
      assertEquals((-0.4710318575665026), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      boolean boolean1 = linkedList0.offerFirst(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains((-1)));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertTrue(linkedList0.contains((-1)));
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-1485.84505405853));
      assertNotNull(float0);
      assertEquals((-1485.8451F), (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMedian((List) linkedList0, false);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertEquals((-1485.8450927734375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1604.367291573963);
      assertNotNull(double0);
      assertEquals(1604.367291573963, (double)double0, 0.01);
      
      linkedList0.addLast(double0);
      assertTrue(linkedList0.contains(1604.367291573963));
      assertEquals(1, linkedList0.size());
      
      double double1 = Statistics.calculateMedian((List) linkedList0, 0, 0, false);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertEquals(1604.367291573963, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      linkedList0.push(byte0);
      assertTrue(linkedList0.contains((byte) (-1)));
      assertEquals(1, linkedList0.size());
      
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0, false);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains((byte) (-1)));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-3614));
      assertNotNull(double0);
      assertEquals((-3614.0), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add((Object) double0);
      assertFalse(linkedList0.contains((-3614)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double1 = Statistics.calculateMedian((List) linkedList0, 0, 0);
      assertFalse(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals((-3614.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      linkedList0.addFirst(integer0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(49.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-1485.84505405853));
      assertNotNull(float0);
      assertEquals((-1485.8451F), (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertTrue(linkedList0.contains(float0));
      assertEquals(1, linkedList0.size());
      assertEquals((-1485.8450927734375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      numberArray0[0] = (Number) long0;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals(3, numberArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Short short0 = new Short((short)1498);
      assertNotNull(short0);
      assertEquals((short)1498, (short)short0);
      
      numberArray0[1] = (Number) short0;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals(2, numberArray0.length);
      assertEquals(1498.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      numberArray0[0] = (Number) byte0;
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      numberArray0[0] = (Number) short0;
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      numberArray0[1] = (Number) byte0;
      Float float0 = new Float(4750.9956F);
      assertNotNull(float0);
      assertEquals(4750.9956F, (float)float0, 0.01F);
      
      numberArray0[2] = (Number) float0;
      numberArray0[3] = (Number) float0;
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(4, numberArray0.length);
      assertEquals(2406.247802734375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      numberArray0[0] = (Number) integer0;
      Long long0 = new Long((-237L));
      assertNotNull(long0);
      assertEquals((-237L), (long)long0);
      
      numberArray0[1] = (Number) long0;
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals((-117.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertEquals(49.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      boolean boolean0 = linkedList0.add((Object) byte0);
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertTrue(linkedList0.contains((byte)0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      Byte byte0 = new Byte((byte) (-6));
      assertNotNull(byte0);
      assertEquals((byte) (-6), (byte)byte0);
      
      numberArray0[2] = (Number) byte0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((byte) (-6)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) numberArray0[2]);
      assertTrue(linkedList0.contains((byte) (-6)));
      assertEquals(8, numberArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertTrue(linkedList0.contains((byte) (-6)));
      assertEquals(1, linkedList0.size());
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Number[] numberArray0 = new Number[1];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, (-2311));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2311
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, (-960), (-960), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("yData");
      assertTrue(linkedList0.contains("yData"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 1970, 1413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -556
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.addFirst((Object) null);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      linkedList0.addFirst(integer0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0, true);
      assertFalse(linkedList0.contains(true));
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 1007, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1006
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      numberArray0[0] = (Number) byte0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((byte) (-1)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) numberArray0[0]);
      assertTrue(linkedList0.contains((byte) (-1)));
      assertEquals(3, numberArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertTrue(linkedList0.contains((byte) (-1)));
      assertFalse(linkedList0.contains(true));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      double double0 = Statistics.calculateMean(numberArray0, true);
      assertEquals(3, numberArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      numberArray0[0] = (Number) double0;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      numberArray0[1] = (Number) short0;
      numberArray0[2] = (Number) double0;
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, (short)0);
      assertNotNull(doubleArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      Number[] numberArray1 = new Number[6];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) integer0;
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      Number[] numberArray1 = new Number[7];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      Number[] numberArray1 = new Number[6];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Number[] numberArray1 = new Number[6];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Statistics.getLinearFit(): array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      numberArray0[0] = (Number) double0;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      numberArray0[1] = (Number) short0;
      numberArray0[2] = (Number) double0;
      double double1 = Statistics.getStdDev(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, (-3614), 214, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1700, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, (-240), (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -121, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      double double0 = Statistics.calculateMedian((List) linkedList0, 1, (int) (byte) (-13), false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((short)0);
      linkedList0.add(integer0);
      double double0 = Statistics.calculateMedian((List) linkedList0, (int) (short)0, 0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      linkedList0.offerFirst(integer0);
      linkedList0.add(integer0);
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertEquals(3, linkedList0.size());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      double double0 = Statistics.calculateMedian((List) linkedList0, false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = Statistics.calculateMedian((List) null, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(Double.NaN);
      linkedList0.add(float0);
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.add((Object) linkedList1);
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      double double0 = Statistics.calculateMean((Collection) linkedList0, false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(Double.NaN);
      linkedList0.add(float0);
      double double0 = Statistics.calculateMean((Collection) linkedList0, false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Float float0 = new Float((-1173.0F));
      numberArray0[0] = (Number) float0;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals((-1173.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Short short0 = new Short((byte)0);
      numberArray0[1] = (Number) short0;
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
