/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:32:55 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DataUtils;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DefaultKeyedValues2D;
import org.jfree.data.KeyedValues;
import org.jfree.data.Values2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DataUtils_ESTest extends DataUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.getColumnKeys();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues0.setValue(comparable2, 0.0);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2901;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Float float0 = new Float(0.0);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable1, comparable1);
      defaultKeyedValues2D0.getColumnKeys();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable2);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2901;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Float float0 = new Float(0.0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = DataUtils.clone(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.getRowIndex(0.0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 8);
      DataUtils.equal(doubleArray0, doubleArray2);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 7);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.getCumulativePercentages(keyedValues0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.getColumnKeys();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2901;
      intArray0[2] = 2901;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double double0 = new Float(0.0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.getColumnKeys();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2901;
      intArray0[2] = 2901;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 2901, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2901, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) float0, 1235.3617853510548);
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.381930112838745;
      doubleArray0[3] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.getCumulativePercentages(keyedValues0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[9];
      defaultKeyedValues2D0.getRowKeys();
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[1] = 4;
      intArray0[5] = 8;
      intArray0[6] = 4;
      defaultKeyedValues2D0.addValue(8, 4, 4);
      intArray0[7] = 4;
      intArray0[8] = 4;
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 4, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3847.219025015;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.equal((double[][]) null, doubleArray1);
      double[][] doubleArray3 = new double[8][3];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray0;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 3847.219025015;
      doubleArray4[2] = 4188.96;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray3[5] = doubleArray4;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray2;
      DataUtils.clone(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max((-1460.891F), 1.0F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      int int0 = 12;
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max((-1460.891F), 1.0F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) float0, 1235.3617853510548);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      defaultKeyedValues2D0.getColumnKeys();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.381930112838745;
      doubleArray0[3] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, (-1008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max((-1460.891F), 1.0F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) float0, 1235.3617853510548);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.381930112838745;
      doubleArray0[3] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DataUtils.createNumberArray(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.getRowKeys();
      defaultKeyedValues2D0.getColumnKeys();
      Long long0 = new Long((-1L));
      defaultKeyedValues2D0.addValue(long0, long0, long0);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-4387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1910.7580313479564;
      doubleArray1[1] = 2008.4;
      doubleArray1[2] = 191.0;
      doubleArray1[3] = (-3373.2505178275596);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-525.1245095515);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3373.2505178275596);
      doubleArray2[2] = (-525.1245095515);
      doubleArray2[3] = 1910.7580313479564;
      doubleArray2[4] = 191.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 191.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-3373.2505178275596);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 2008.4;
      doubleArray4[3] = 1910.7580313479564;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 191.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-3373.2505178275596);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-525.1245095515);
      doubleArray5[3] = 2008.4;
      doubleArray5[4] = 1910.7580313479564;
      doubleArray5[5] = 191.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-3373.2505178275596);
      doubleArray6[1] = (-3132.24997);
      doubleArray6[2] = 191.0;
      doubleArray6[3] = 191.0;
      doubleArray6[4] = 191.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-525.1245095515);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 2008.4;
      doubleArray7[3] = (-4726.3);
      doubleArray7[4] = 1.0;
      doubleArray0[6] = doubleArray7;
      DataUtils.equal(doubleArray0, (double[][]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Values2D values2D0 = null;
      int int0 = (-1603);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) null, (-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable0, comparable0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DataUtils.clone(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      int int0 = 3216;
      int[] intArray0 = null;
      defaultKeyedValues2D0.clear();
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 3216, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtils.clone((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 16.03;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1410.1800053713762;
      doubleArray2[1] = 16.03;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1410.1800053713762;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 1410.1800053713762;
      doubleArray3[4] = 16.03;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 16.03;
      doubleArray3[8] = 1410.1800053713762;
      doubleArray0[2] = doubleArray3;
      DataUtils.createNumberArray2D(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      defaultKeyedValues2D0.setValue(16.03, 1410.1800053713762, 1410.1800053713762);
      defaultKeyedValues2D0.clone();
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int int0 = 1;
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 1);
      // Undeclared exception!
      try { 
        DataUtils.getCumulativePercentages((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      double[][] doubleArrayArray0 = null;
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      int int0 = (-3114);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-3114), (Comparable) comparable0, (double) (-3114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 2, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[0][2];
      double[][] doubleArray2 = DataUtils.clone(doubleArray1);
      DataUtils.clone(doubleArray2);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-310);
      intArray0[2] = 0;
      intArray0[3] = (-1671);
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      defaultKeyedValues2D0.addValue(0, 0, 0);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-761.123977);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      DataUtils.clone(doubleArray0);
      int int0 = 2113;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeValue(0.0, 0.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2397);
      intArray0[1] = (-2397);
      intArray0[2] = (-2397);
      intArray0[3] = (-2397);
      intArray0[4] = (-2397);
      intArray0[5] = (-2397);
      intArray0[6] = (-2397);
      intArray0[7] = (-921);
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, (-2397), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[0];
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 634, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-634);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      defaultKeyedValues2D0.getColumnKeys();
      int[] intArray0 = new int[3];
      intArray0[0] = 2426;
      intArray0[1] = 0;
      intArray0[2] = 2426;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 2426, intArray0);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 2426);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      int[] intArray0 = new int[3];
      intArray0[0] = 1898;
      intArray0[1] = (-188);
      intArray0[2] = (-188);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-188), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[4];
      intArray0[0] = 3951;
      intArray0[1] = 3951;
      intArray0[2] = 3951;
      intArray0[3] = 3951;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 3951, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Values2D values2D0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = 29;
      intArray0[1] = 29;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) null, 29, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Values2D values2D0 = null;
      int int0 = 0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) null, 0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) null, 0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Integer integer0 = Integer.getInteger("data", 0);
      defaultKeyedValues0.addValue((Comparable) integer0, (Number) integer0);
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.getCumulativePercentages(keyedValues0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      DataUtils.clone(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.createNumberArray2D(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-2458));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3310.771418359541;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 3310.771418359541;
      doubleArray2[1] = 3310.771418359541;
      doubleArray2[2] = 3310.771418359541;
      doubleArray2[3] = 638.02293434;
      doubleArray0[1] = doubleArray2;
      DataUtils.equal(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1333.7381050496;
      doubleArray2[1] = 1082.211846152892;
      doubleArray2[2] = 2080.5832;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DataUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1782.98;
      doubleArray1[2] = (-300.5218863908069);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1782.98;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-206.248);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1782.98;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-300.5218863908069);
      doubleArray3[3] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 953.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1782.98;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1782.98;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 1782.98;
      doubleArray6[1] = (-300.5218863908069);
      doubleArray6[2] = (-300.5218863908069);
      doubleArray6[3] = 1782.98;
      doubleArray6[4] = (-206.248);
      doubleArray6[5] = (-206.248);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = 953.0;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = (-29.0);
      doubleArray8[4] = 953.0;
      doubleArray8[5] = 953.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = (-300.5218863908069);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-1909.0805328261024);
      doubleArray9[3] = (-1.0);
      doubleArray9[4] = 1.0;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = (-300.5218863908069);
      doubleArray0[8] = doubleArray9;
      double[][] doubleArray10 = new double[2][2];
      doubleArray10[0] = doubleArray3;
      doubleArray10[1] = doubleArray1;
      DataUtils.equal(doubleArray0, doubleArray10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      DataUtils.clone(doubleArray1);
      DataUtils.createNumberArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.getCumulativePercentages(keyedValues0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 791);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 791);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      double[][] doubleArray2 = new double[8][1];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[0];
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      DataUtils.equal(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1287.763768);
      doubleArray1[1] = (-174.64024);
      doubleArray0[0] = doubleArray1;
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.equal(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1047);
      intArray0[1] = (-1047);
      intArray0[2] = (-1047);
      intArray0[3] = (-878);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-1047), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 284, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      DataUtils.createNumberArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DataUtils.clone(doubleArray0);
      DataUtils.clone(doubleArray0);
      DataUtils.clone(doubleArray0);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DataUtils.equal((double[][]) null, (double[][]) null);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, comparable1, comparable1);
      defaultKeyedValues2D0.getColumnKeys();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowIndex(comparable2);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.equals("V");
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues0.setValue(comparable3, (Number) null);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.createNumberArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2901;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Float float0 = new Float(0.0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[3] = doubleArray1;
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.equal((double[][]) null, doubleArray0);
      double[][] doubleArray2 = new double[8][3];
      doubleArray0[2] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      DataUtils.clone(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = 8;
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 9;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 9, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max((-1460.891F), 1.0F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) float0, 1235.3617853510548);
      DataUtils.getCumulativePercentages(defaultKeyedValues0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      defaultKeyedValues2D0.getColumnKeys();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 2.381930112838745;
      doubleArray0[3] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, (-1008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3310.771418359541;
      doubleArray0[0] = doubleArray1;
      DataUtils.equal(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float(2.38193F);
      Float.max(2.38193F, (-1460.891F));
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) float0, 1235.3617853510548);
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      double double0 = DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double1 = DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0, intArray0);
      assertEquals(9.52772045135498, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2.381930112838745;
      doubleArray0[3] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Number[][] numberArray0 = DataUtils.createNumberArray2D(doubleArray1);
      assertEquals(4, numberArray0.length);
      
      KeyedValues keyedValues1 = DataUtils.getCumulativePercentages(keyedValues0);
      assertEquals(1, keyedValues1.getItemCount());
      assertTrue(keyedValues1.equals((Object)keyedValues0));
      
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, 0);
      double double2 = DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(2.381930112838745, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.getRowKeys();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((-1855));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.clear();
      DataUtils.calculateColumnTotal((Values2D) defaultKeyedValues2D0, (-1));
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, (-827));
      DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, (-827));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-827);
      doubleArray0[2] = (double) (-827);
      doubleArray0[3] = (double) (-827);
      doubleArray0[5] = (double) (-827);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[][] doubleArray2 = new double[8][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      defaultKeyedValues2D0.removeValue((-827.0), 0.0);
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      DataUtils.equal(doubleArray1, doubleArray2);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      KeyedValues keyedValues0 = DataUtils.getCumulativePercentages(defaultKeyedValues0);
      assertEquals(0, keyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3373.2505178275596);
      doubleArray1[3] = 1910.7580313479564;
      doubleArray1[3] = 191.0;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray1;
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray1;
      boolean boolean0 = DataUtils.equal(doubleArray0, (double[][]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2673.909);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2673.909);
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2673.909);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2673.909);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-2673.909);
      doubleArray6[2] = (-2673.909);
      doubleArray0[5] = doubleArray6;
      double[][] doubleArray7 = DataUtils.clone(doubleArray0);
      assertNotSame(doubleArray7, doubleArray0);
      
      DataUtils.createNumberArray(doubleArray6);
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      int[] intArray0 = new int[2];
      intArray0[0] = 660;
      intArray0[1] = 660;
      double double0 = DataUtils.calculateRowTotal((Values2D) defaultKeyedValues2D0, 660, intArray0);
      assertEquals(0.0, double0, 0.01);
  }
}
