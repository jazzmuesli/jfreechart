/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:22:41 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Paint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.renderer.xy.XYBarPainter;
import org.jfree.data.KeyedObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class KeyedObject_ESTest extends KeyedObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      keyedObject0.getKey();
      keyedObject0.getKey();
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("The index value (", false);
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      standardChartTheme0.setXYBarPainter(xYBarPainter0);
      keyedObject0.equals(standardChartTheme0);
      keyedObject0.getKey();
      Object object0 = keyedObject0.clone();
      keyedObject0.getObject();
      keyedObject0.getKey();
      keyedObject0.setObject((Object) null);
      assertTrue(keyedObject0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject0 = new KeyedObject(comparable0, comparable0);
      KeyedObject keyedObject1 = new KeyedObject(comparable0, keyedObject0);
      keyedObject0.setObject(keyedObject1);
      // Undeclared exception!
      try { 
        keyedObject1.equals(keyedObject0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject0 = new KeyedObject(comparable0, comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject1 = new KeyedObject(comparable1, "");
      keyedObject0.setObject(keyedObject1);
      assertNotSame(keyedObject1, keyedObject0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      String string0 = "";
      KeyedObject keyedObject0 = new KeyedObject(comparable0, "");
      keyedObject0.equals((Object) null);
      String string1 = null;
      keyedObject0.clone();
      keyedObject0.setObject((Object) null);
      keyedObject0.setObject((Object) null);
      keyedObject0.equals("");
      keyedObject0.equals("");
      keyedObject0.getObject();
      keyedObject0.getKey();
      keyedObject0.equals((Object) null);
      keyedObject0.clone();
      keyedObject0.equals("");
      keyedObject0.getObject();
      keyedObject0.getObject();
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparable<Integer> comparable0 = (Comparable<Integer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      KeyedObject keyedObject0 = new KeyedObject(comparable0, "");
      keyedObject0.equals("");
      keyedObject0.equals("");
      Object object0 = keyedObject0.clone();
      keyedObject0.setObject("org.jfree.data.KeyedObject");
      keyedObject0.getObject();
      keyedObject0.setObject("org.jfree.data.KeyedObject");
      boolean boolean0 = keyedObject0.equals("");
      assertFalse(boolean0);
      
      keyedObject0.getKey();
      keyedObject0.getKey();
      assertFalse(keyedObject0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      KeyedObject keyedObject0 = new KeyedObject(comparable0, comparable0);
      Comparable comparable1 = keyedObject0.getKey();
      Object object0 = keyedObject0.clone();
      Object object1 = keyedObject0.clone();
      keyedObject0.setObject("org.jfree.data.KeyedObject");
      Object object2 = keyedObject0.clone();
      KeyedObject keyedObject1 = new KeyedObject(comparable1, comparable1);
      keyedObject0.setObject(keyedObject1);
      assertTrue(keyedObject1.equals((Object)object1));
      
      keyedObject1.setObject(object2);
      keyedObject1.equals(object0);
      Comparable<Integer> comparable2 = (Comparable<Integer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject2 = new KeyedObject(comparable2, object2);
      keyedObject2.clone();
      keyedObject1.equals(keyedObject2);
      Object object3 = keyedObject0.clone();
      keyedObject1.clone();
      boolean boolean0 = keyedObject0.equals(object3);
      assertFalse(keyedObject0.equals((Object)object2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      KeyedObject keyedObject0 = new KeyedObject(comparable0, comparable0);
      keyedObject0.equals("Bal7p,d");
      keyedObject0.equals("Bal7p,d");
      Object object0 = keyedObject0.getObject();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      KeyedObject keyedObject0 = new KeyedObject(comparable0, "myQg");
      Object object0 = keyedObject0.clone();
      keyedObject0.setObject("myQg");
      keyedObject0.setObject("myQg");
      Object object1 = keyedObject0.clone();
      keyedObject0.clone();
      Comparable comparable1 = keyedObject0.getKey();
      keyedObject0.getKey();
      keyedObject0.setObject(comparable1);
      Object object2 = keyedObject0.getObject();
      keyedObject0.equals(object2);
      keyedObject0.getKey();
      keyedObject0.getKey();
      keyedObject0.getObject();
      keyedObject0.setObject(comparable1);
      keyedObject0.setObject("v3b7lM(`UVz]\"Y*");
      boolean boolean0 = keyedObject0.equals(object0);
      assertFalse(boolean0);
      
      KeyedObject keyedObject1 = new KeyedObject(comparable1, object1);
      KeyedObject keyedObject2 = new KeyedObject("v3b7lM(`UVz]\"Y*", keyedObject1);
      boolean boolean1 = keyedObject0.equals(keyedObject2);
      assertFalse(object1.equals((Object)keyedObject0));
      assertTrue(object1.equals((Object)object0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      KeyedObject keyedObject0 = new KeyedObject(comparable0, "org.jfree.data.KeyedObject");
      keyedObject0.clone();
      Object object0 = keyedObject0.clone();
      boolean boolean0 = keyedObject0.equals(object0);
      assertTrue(boolean0);
      
      boolean boolean1 = keyedObject0.equals("org.jfree.data.KeyedObject");
      assertFalse(boolean1 == boolean0);
      
      Object object1 = keyedObject0.clone();
      keyedObject0.getObject();
      keyedObject0.getKey();
      assertNotSame(keyedObject0, object1);
  }
}
