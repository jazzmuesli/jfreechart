/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:57:51 GMT 2019
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class XYTaskDataset_ESTest extends XYTaskDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY(0, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth((-525.855505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      xYTaskDataset0.isTransposed();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      double double0 = xYTaskDataset0.getYValue((-1401), (-1401));
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals((-1401.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getY(10, 10);
      assertEquals(10.0, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getY((-2319), 0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals((-2319.0), number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getXValue(0, 6);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getXValue(70, 70);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(70.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getX(0, (-2630));
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getX((-330), 1106);
      assertEquals((-330.0), number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeries taskSeries0 = new TaskSeries("jR");
      taskSeriesCollection0.add(taskSeries0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.getTasks();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      double double0 = xYTaskDataset0.getStartYValue((-2319), (-2319));
      assertEquals((-2319.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getStartY((-1), 900);
      assertEquals((-1.4), number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getStartY(995, Integer.MAX_VALUE);
      assertEquals(994.6, number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getStartXValue((-564), (-564));
      assertEquals((-564.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX((-1), (-1));
      assertEquals((-1.4), number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(0, 0);
      assertEquals((-0.4), number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      double double0 = xYTaskDataset0.getEndYValue(1, 1);
      assertEquals(1.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getEndY(2204, 2204);
      assertEquals(2204.4, number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getEndXValue((-3550), (-2860));
      assertEquals((-3549.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getEndX((-213), 0);
      assertEquals((-212.6), number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getEndX(0, 0);
      assertEquals(0.4, number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getEndX(2490, 2490);
      assertEquals(2490.4, number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getSeriesKey((-41));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndYValue(886, 1617);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartYValue((-2962), (-1141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getYValue(1626, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      double double0 = xYTaskDataset0.getYValue(995, 1);
      assertEquals(995.0, double0, 0.01);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getEndXValue(0, 0);
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getStartXValue(1626, 0);
      assertEquals(1625.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartXValue(1579, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getXValue(0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getXValue((-722), (-1716));
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals((-722.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.getSeriesCount();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      
      xYTaskDataset0.setTransposed(true);
      boolean boolean0 = xYTaskDataset1.equals(xYTaskDataset0);
      assertFalse(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset1);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      boolean boolean0 = xYTaskDataset0.equals(xYTaskDataset0);
      assertTrue(boolean0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      boolean boolean0 = xYTaskDataset0.equals(taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      double double0 = xYTaskDataset0.getStartYValue(5, 91);
      assertEquals(4.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      Number number0 = xYTaskDataset0.getY(0, 23);
      assertEquals(0.0, number0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndXValue((-2145652886), 1448);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartX((-564), 1136);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getX((-1061), (-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.setSeriesWidth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'w' > 0.0.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setSeriesWidth(23);
      assertEquals(23.0, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.getTasks();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getItemCount(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      double double0 = xYTaskDataset0.getSeriesWidth();
      assertEquals(0.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.isTransposed();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Double double0 = (Double)xYTaskDataset0.getX(365, 365);
      assertEquals(365.0, (double)double0, 0.01);
      
      xYTaskDataset0.indexOf(double0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(995, (-1));
      assertEquals(994.6, number0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(number0, xYTaskDataset0);
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getStartY(999, 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getSeriesKey(1463);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1463, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYTaskDataset xYTaskDataset1 = (XYTaskDataset)xYTaskDataset0.clone();
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(2336, (-572));
      assertEquals(2335.6, number0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.setTransposed(true);
      assertTrue(xYTaskDataset0.isTransposed());
      
      double double0 = xYTaskDataset0.getEndYValue((-1), 1);
      assertEquals((-0.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYTaskDataset0.getY(2474, 2474);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }
}
