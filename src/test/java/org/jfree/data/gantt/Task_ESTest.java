/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:15:19 GMT 2019
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.gantt.Task;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Task_ESTest extends Task_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-742L));
      Task task0 = new Task("", mockDate0, mockDate0);
      Task task1 = new Task("", mockDate0, mockDate0);
      task0.removeSubtask(task1);
      assertEquals(0, task0.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      Task task0 = new Task("kjCb&jI 6}Sg!1:Z:", fixedMillisecond0);
      task0.addSubtask(task0);
      int int0 = task0.getSubtaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      Task task0 = new Task("kjCb&jI 6}Sg!1:Z:", fixedMillisecond0);
      MockDate mockDate0 = new MockDate(1162, 1, 1, 1, 1162, 1162);
      Task task1 = new Task("kjCb&jI 6}Sg!1:Z:", mockDate0, mockDate0);
      task0.addSubtask(task1);
      Task task2 = task0.getSubtask(0);
      assertEquals(0, task2.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 305);
      Task task0 = new Task("", mockDate0, mockDate0);
      task0.addSubtask(task0);
      Task task1 = task0.getSubtask(0);
      assertSame(task0, task1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1261, 1261, 1261);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1261, "description");
      Locale locale0 = Locale.JAPANESE;
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0, locale0);
      Task task0 = new Task(",Y0", millisecond0);
      task0.setPercentComplete((double) 999);
      Double double0 = task0.getPercentComplete();
      assertEquals(999.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Second second0 = new Second();
      Task task0 = new Task("DB", second0);
      task0.setPercentComplete((double) 0);
      Double double0 = task0.getPercentComplete();
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Day day0 = new Day();
      Task task0 = new Task("\"o7PhdPh", day0);
      task0.setPercentComplete((-6644.832527));
      Double double0 = task0.getPercentComplete();
      assertEquals((-6644.832527), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1261, 1261, 1261);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1261, "description");
      Locale locale0 = Locale.JAPANESE;
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0, locale0);
      Task task0 = new Task(",Y0", millisecond0);
      Double double0 = new Double((-2928.733316095));
      task0.setPercentComplete(double0);
      Double double1 = task0.getPercentComplete();
      assertEquals((-2928.733316095), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      TimePeriod timePeriod0 = task0.getDuration();
      assertNull(timePeriod0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Task task0 = new Task("]&GL,+#x1s{%", (TimePeriod) null);
      String string0 = task0.getDescription();
      assertEquals("]&GL,+#x1s{%", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Task task0 = new Task("", date0, date0);
      // Undeclared exception!
      try { 
        task0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(87, 0, 87);
      Task task0 = new Task("~", mockDate0, mockDate0);
      // Undeclared exception!
      try { 
        task0.getSubtask(87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Task task0 = new Task("FxhE9o%\n/_J", (TimePeriod) null);
      // Undeclared exception!
      try { 
        task0.addSubtask((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtask' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Task task0 = null;
      try {
        task0 = new Task((String) null, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Task task0 = null;
      try {
        task0 = new Task("", (Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-2490), (-656), 1896);
      Task task0 = null;
      try {
        task0 = new Task((String) null, mockDate0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minute minute0 = new Minute();
      Task task0 = new Task("]&GL,+#x1s{%", minute0);
      Task task1 = (Task)task0.clone();
      assertTrue(task1.equals((Object)task0));
      
      task1.setPercentComplete((double) 59);
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
      assertFalse(task1.equals((Object)task0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      Task task0 = new Task("]&GL,+#x1s{%", minute0);
      Object object0 = task0.clone();
      boolean boolean0 = task0.equals(object0);
      assertNotSame(object0, task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Second second0 = new Second();
      Task task0 = new Task("xHoN9zvgOL", second0);
      MockDate mockDate0 = new MockDate(0, 0, (-1647));
      Task task1 = new Task("xHoN9zvgOL", mockDate0, mockDate0);
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Task task0 = new Task("Call to addYears resulted in unsupported year", (TimePeriod) null);
      Task task1 = new Task("description", (TimePeriod) null);
      boolean boolean0 = task1.equals(task0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Task task0 = new Task("]&GL+#1s{%", (TimePeriod) null);
      boolean boolean0 = task0.equals(task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Task task0 = new Task("Call to addYears resulted in unsupported year", (TimePeriod) null);
      task0.setDescription("N!@'&b{P<!VE`PH");
      assertEquals("N!@'&b{P<!VE`PH", task0.getDescription());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323, 323, 323);
      Task task0 = new Task("", mockDate0, mockDate0);
      TimePeriod timePeriod0 = task0.getDuration();
      boolean boolean0 = task0.equals(timePeriod0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323, 323, 323);
      Task task0 = new Task("", mockDate0, mockDate0);
      Double double0 = task0.getPercentComplete();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Task task0 = new Task("Call to addYears resulted in unsupported year", (TimePeriod) null);
      // Undeclared exception!
      try { 
        task0.getSubtask((-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323, 323, 323);
      Task task0 = new Task("", mockDate0, mockDate0);
      int int0 = task0.getSubtaskCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323, 323, 323);
      Task task0 = new Task("", mockDate0, mockDate0);
      String string0 = task0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Task task0 = new Task("Call to addYears resulted in unsupported year", (TimePeriod) null);
      task0.setDuration((TimePeriod) null);
      assertEquals(0, task0.getSubtaskCount());
  }
}
