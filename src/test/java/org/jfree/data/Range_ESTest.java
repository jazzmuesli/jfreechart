/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:17:53 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 145.27831658);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertEquals(72.63915829, range2.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2802.1612238));
      Range range1 = Range.expandToInclude((Range) null, 0.0);
      Range range2 = Range.combine((Range) null, range0);
      assertNotNull(range2);
      
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-2651.828207341806), (-2651.828207341806));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.expand(range2, (-2651.828207341806), 0.0);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3514770.506523157, range3.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      Range range1 = Range.expandToInclude(range0, (-109.0));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      Range range1 = Range.expandToInclude(range0, (-2968.07523911));
      assertSame(range1, range0);
      assertEquals(2968.07523911, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.combineIgnoringNaN(range0, range1);
      assertEquals(-0.0, range2.getUpperBound(), 0.01);
      assertEquals((-54.5), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      boolean boolean0 = range0.intersects((-495.16881902), 1015.45305648);
      assertTrue(boolean0);
      assertEquals((-2968.07523911), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), 2206.64427951905);
      boolean boolean0 = range0.intersects(2206.64427951905, 252.603053533946);
      assertFalse(boolean0);
      assertEquals(2207.64427951905, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-2938.1590397077));
      boolean boolean0 = range0.intersects(range1);
      assertEquals((-2938.1590397077), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1074.0), (-1074.0));
      Range range1 = Range.shift(range0, 2945.342582162759, true);
      assertEquals(1871.3425821627588, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-2.4299670613641202E7), (-2.4299670613641202E7));
      Range range1 = Range.shift(range0, 2506.54520339786);
      assertEquals((-2.4297164068437804E7), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.shift(range0, 1.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.scale(range0, 2.0);
      assertNotSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      double double0 = range0.getUpperBound();
      assertEquals((-1401.2596), range0.getCentralValue(), 0.01);
      assertEquals(2854.351, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2802.1612238));
      double double0 = range0.getUpperBound();
      assertEquals((-2802.1612238), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 2039.36090152049);
      double double0 = range0.getLowerBound();
      assertEquals(1019.680450760245, range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(764.0710251748, 1140.2);
      double double0 = range0.getLowerBound();
      assertEquals(952.1355125874, range0.getCentralValue(), 0.01);
      assertEquals(764.0710251748, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      double double0 = range1.getCentralValue();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.expandToInclude(range1, (-109.0));
      Range range3 = Range.shift(range2, 0.0, true);
      Range range4 = Range.expand(range3, 110.448080014993, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(-0.0, range2.getUpperBound(), 0.01);
      assertEquals(12147.840721634237, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      Range range1 = Range.scale(range0, 0.0);
      double double0 = range1.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(-0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0), true);
      Range range2 = Range.expand(range1, (-1.0), (-1.0));
      Range range3 = Range.expandToInclude(range2, (-1.0));
      Range range4 = Range.combineIgnoringNaN(range3, range3);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertEquals((-2.0), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.combineIgnoringNaN(range1, range1);
      assertEquals(-0.0, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1676.8548), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-26.6954792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2802.1612238));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1455.8746664), (-1455.8746664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-109.0), (-109.0));
      boolean boolean0 = range0.isNaNRange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range((-1.0), 2206.64427951905);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(2207.64427951905, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-5053.8), 3250.6841583676714);
      boolean boolean0 = range0.intersects((-5053.8), 0.0);
      assertTrue(boolean0);
      assertEquals(3250.6841583676714, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-943.403), (-943.403));
      boolean boolean0 = range0.intersects((-943.403), (-943.403));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-1.0), 2206.64427951905);
      Range range1 = Range.expand(range0, 0.0, (-1.0));
      boolean boolean0 = range1.contains(1131.872524469294);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(2206.64427951905, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-3332.3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals((-1484.037619555), range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      double double0 = range0.getLength();
      assertEquals(2968.07523911, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      double double0 = range0.getLowerBound();
      assertEquals((-1484.037619555), range0.getCentralValue(), 0.01);
      assertEquals((-2968.07523911), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      Range range1 = Range.shift(range0, 2968.07523911);
      boolean boolean0 = range1.equals(range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1484.037619555, range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2967.9365718337694), 0.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(2967.9365718337694, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-2968.07523911), 0.0);
      boolean boolean0 = range0.equals(range0);
      assertEquals((-1484.037619555), range0.getCentralValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1515.051192838331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      Range range1 = Range.scale(range0, 2854.351);
      assertEquals(2.42940127434412E7, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      Range range1 = Range.shift(range0, (-5656.8702), true);
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.scale(range2, 2854.351);
      assertNotSame(range2, range1);
      assertEquals((-2.01463798527598E7), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      Range range1 = Range.expand(range0, 0.0, (-5656.8702));
      assertEquals((-2.407483804554412E7), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.combineIgnoringNaN((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.combineIgnoringNaN((Range) null, range0);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.combineIgnoringNaN(range0, (Range) null);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range((-2967.9365718337694), 0.0);
      double double0 = range0.constrain((-1483.9682859168847));
      assertEquals((-1483.9682859168847), double0, 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = new Range((-2966.9042798759438), 0.0);
      boolean boolean0 = range0.intersects((-495.16881902), (-2966.9042798759438));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2966.9042798759438, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = new Range((-2967.9365718337694), 0.0);
      boolean boolean0 = range0.intersects(145.27831658, (-1483.9682859168847));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1483.9682859168847), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      boolean boolean0 = range0.intersects(2338.488477592323, 2338.488477592323);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.constrain(2.037);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      boolean boolean0 = range0.contains((-1.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.constrain((-124.9836592335092));
      assertEquals(2.0, double0, 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(145.27831658, (-2967.9365718337694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (145.27831658) <= upper (-2967.9365718337694).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      String string0 = range0.toString();
      assertEquals("Range[-5656.8702,2854.351]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      boolean boolean0 = range0.intersects(range0);
      assertEquals(2854.351, range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      Range range1 = Range.shift(range0, 1.0);
      assertEquals((-1400.2596), range1.getCentralValue(), 0.01);
      assertEquals((-5656.8702), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = new Range((-5656.8702), 2854.351);
      range0.hashCode();
      assertEquals(8511.2212, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = new Range((-2966.9042798759438), 0.0);
      double double0 = range0.getCentralValue();
      assertEquals((-1483.4521399379719), double0, 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }
}
