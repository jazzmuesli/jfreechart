/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 21:26:58 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.VectorDataItem;
import org.jfree.data.xy.XIntervalDataItem;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYIntervalDataItem;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.YIntervalDataItem;
import org.jfree.data.xy.YIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ComparableObjectSeries_ESTest extends ComparableObjectSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1);
      ((ComparableObjectSeries)yIntervalSeries0).add(date0, defaultTableModel0, true);
      // Undeclared exception!
      try { 
        ((ComparableObjectSeries)yIntervalSeries0).delete(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0, false);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      Object object0 = new Object();
      comparableObjectSeries0.update(xIntervalDataItem0, object0);
      assertEquals(3, comparableObjectSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0, false);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      yIntervalSeries0.setMaximumItemCount(1169);
      assertEquals(1169, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      ((ComparableObjectSeries)yIntervalSeries0).add(comparableObjectItem0, false);
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.remove(xIntervalDataItem0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1);
      ((ComparableObjectSeries)yIntervalSeries0).add(date0, defaultTableModel0, true);
      yIntervalSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparableObjectItem0, true, true);
      comparableObjectSeries0.getAutoSort();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      boolean boolean0 = yIntervalSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(day0, false, true);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex(Integer.MAX_VALUE, day0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 2, 0, (-2426), (-2426));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(month0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparableObjectItem0, true, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1);
      comparableObjectSeries0.add(date0, defaultTableModel0, true);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparableObjectItem0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.ComparableObjectItem cannot be cast to java.util.Date
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1695.23, 1695.23);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, true, true);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((-2962));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1998), (-1998), (-1998));
      Month month0 = new Month(mockDate0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(month0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem(2045);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2045, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1998), (-1998), (-1998));
      Month month0 = new Month(mockDate0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(month0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem((-1998));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week((-1667), (-1667));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(week0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add((ComparableObjectItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      yIntervalSeries0.indexOf(fixedMillisecond0);
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1998), (-1998), (-1998), (-1998), (-1998), (-1998));
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(mockDate0);
      // Undeclared exception!
      try { 
        ((ComparableObjectSeries)yIntervalSeries0).remove(2045);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2045, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      yIntervalSeries0.hashCode();
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(hour0, false, false);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries("^G3Z82rMg+3 je");
      XYIntervalSeries xYIntervalSeries1 = (XYIntervalSeries)xYIntervalSeries0.clone();
      boolean boolean0 = xYIntervalSeries0.equals(xYIntervalSeries1);
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries1.getMaximumItemCount());
      assertTrue(xYIntervalSeries1.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries("^G3Z82rMg+3 je");
      boolean boolean0 = xYIntervalSeries0.equals(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      boolean boolean0 = comparableObjectSeries0.equals(xIntervalDataItem0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-3618.02), 0.0, 1.0, (-860.290003938703));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(vectorDataItem0, false, false);
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(1.0, (-3618.02), 1.0, (-3618.02), 120.0, 0.0);
      xYIntervalSeries0.add(xYIntervalDataItem0, false);
      xYIntervalSeries0.clear();
      assertEquals(0, xYIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-3618.02), 0.0, 1.0, (-860.290003938703));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(vectorDataItem0, false, false);
      xYIntervalSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertFalse(xYIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete((-7), Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      ((ComparableObjectSeries)yIntervalSeries0).delete(3509, (-2999));
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      // Undeclared exception!
      try { 
        ((ComparableObjectSeries)yIntervalSeries0).update(date0, defaultTableModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1);
      ((ComparableObjectSeries)yIntervalSeries0).add(date0, defaultTableModel0, true);
      assertEquals(1, yIntervalSeries0.getItemCount());
      
      ((ComparableObjectSeries)yIntervalSeries0).update(date0, defaultTableModel0);
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-3618.02), 0.0, 1.0, (-860.290003938703));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(vectorDataItem0, false, false);
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(1.0, (-3618.02), 1.0, (-3618.02), 120.0, 0.0);
      xYIntervalSeries0.setMaximumItemCount(0);
      xYIntervalSeries0.add(xYIntervalDataItem0, false);
      assertFalse(xYIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      Date date0 = month0.getStart();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparableObjectItem0, false, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1);
      comparableObjectSeries0.add(date0, defaultTableModel0, true);
      assertEquals(1, comparableObjectSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VectorDataItem vectorDataItem0 = new VectorDataItem((-3618.02), 0.0, 1.0, (-860.290003938703));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(vectorDataItem0, false, false);
      XYIntervalDataItem xYIntervalDataItem0 = new XYIntervalDataItem(1.0, (-3618.02), 1.0, (-3618.02), 120.0, 0.0);
      xYIntervalSeries0.add(xYIntervalDataItem0, false);
      int int0 = xYIntervalSeries0.indexOf(vectorDataItem0);
      assertEquals(1, xYIntervalSeries0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      YIntervalDataItem yIntervalDataItem0 = new YIntervalDataItem(1L, 1L, 745.233378, (-1.0));
      yIntervalSeries0.add(yIntervalDataItem0, true);
      assertEquals(1, yIntervalSeries0.getItemCount());
      
      yIntervalSeries0.setMaximumItemCount(0);
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(58, 211, 1, 0, 211, 1);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(58, year0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(week0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.setMaximumItemCount((-2172));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      
      yIntervalSeries0.setMaximumItemCount(0);
      int int0 = yIntervalSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      boolean boolean0 = yIntervalSeries0.getAllowDuplicateXValues();
      assertTrue(yIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Month month0 = new Month();
      Integer integer0 = new Integer((-1091));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(month0, integer0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparableObjectItem0, false, false);
      boolean boolean0 = yIntervalSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertFalse(yIntervalSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Day day0 = new Day();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(day0, false, true);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex((-2147483626), day0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.remove(fixedMillisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      int int0 = comparableObjectSeries0.getMaximumItemCount();
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XIntervalDataItem xIntervalDataItem0 = new XIntervalDataItem(1.0, 1.0, 0.0, 2406.68);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0);
      comparableObjectSeries0.add(xIntervalDataItem0, xIntervalDataItem0, false);
      comparableObjectSeries0.hashCode();
      assertEquals(2, comparableObjectSeries0.getItemCount());
  }
}
