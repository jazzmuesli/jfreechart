/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 17 22:15:58 GMT 2019
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableObjectItem_ESTest extends ComparableObjectItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<ComparableObjectItem> comparable0 = (Comparable<ComparableObjectItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparable0).compareTo(any(org.jfree.data.ComparableObjectItem.class));
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      comparableObjectItem0.setObject(object0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      comparableObjectItem1.clone();
      comparableObjectItem1.equals(comparableObjectItem2);
      Object object1 = new Object();
      comparableObjectItem1.clone();
      comparableObjectItem0.compareTo(object1);
      comparableObjectItem1.compareTo(comparableObjectItem1);
      comparableObjectItem2.equals(comparableObjectItem1);
      Object object2 = comparableObjectItem0.getObject();
      Integer integer0 = new Integer((-122));
      // Undeclared exception!
      try { 
        ((ComparableObjectItem) object2).setObject(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparable0).compareTo(any());
      doReturn("x", "x", "m-5-1L.b;", "").when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      comparableObjectItem0.compareTo((Object) null);
      comparableObjectItem0.compareTo((Object) null);
      comparableObjectItem0.getObject();
      Object object0 = comparableObjectItem0.clone();
      Object object1 = new Object();
      comparableObjectItem0.setObject(object1);
      Comparable comparable1 = comparableObjectItem0.getComparable();
      comparableObjectItem0.hashCode();
      comparableObjectItem0.getComparable();
      comparableObjectItem0.setObject((Object) null);
      comparableObjectItem0.equals(comparable1);
      comparableObjectItem0.getComparable();
      comparableObjectItem0.compareTo(object0);
      Object object2 = new Object();
      comparableObjectItem0.clone();
      comparableObjectItem0.compareTo(object2);
      comparableObjectItem0.equals(object2);
      comparableObjectItem0.setObject("");
      comparableObjectItem0.clone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Integer integer0 = new Integer((-1));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, integer0);
      comparableObjectItem0.clone();
      Integer.max((-654), 931);
      comparableObjectItem0.clone();
      comparableObjectItem0.getObject();
      String string0 = "";
      Integer.getInteger("", integer0);
      Object object0 = new Object();
      Integer.remainderUnsigned((-1), (-1));
      Object object1 = new Object();
      comparableObjectItem0.equals(object1);
      comparableObjectItem0.setObject(object0);
      Comparable comparable1 = comparableObjectItem0.getComparable();
      comparableObjectItem0.getObject();
      comparableObjectItem0.setObject(comparable1);
      comparableObjectItem0.compareTo("R");
      comparableObjectItem0.hashCode();
      comparableObjectItem0.getComparable();
      Object object2 = new Object();
      comparableObjectItem0.setObject(object2);
      Object object3 = new Object();
      Object object4 = comparableObjectItem0.clone();
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem("R", object3);
      // Undeclared exception!
      try { 
        comparableObjectItem1.compareTo(object4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, (Object) null);
      comparableObjectItem0.equals((Object) null);
      comparableObjectItem0.setObject((Object) null);
      comparableObjectItem0.setObject((Object) null);
      comparableObjectItem0.compareTo("ObXP{r:");
      comparableObjectItem0.getObject();
      comparableObjectItem0.equals("RVq/M~C1r(%IA");
      Integer integer0 = new Integer((-1));
      Integer.remainderUnsigned(1, 1947);
      Integer.divideUnsigned((-1), (-1));
      comparableObjectItem0.compareTo(integer0);
      comparableObjectItem0.getComparable();
      comparableObjectItem0.hashCode();
      comparableObjectItem0.getObject();
      comparableObjectItem0.getObject();
      comparableObjectItem0.compareTo("ObXP{r:");
      comparableObjectItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Object object0 = comparableObjectItem0.getObject();
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, (Object) null);
      Object object1 = new Object();
      comparableObjectItem1.equals(object1);
      comparableObjectItem1.clone();
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      comparableObjectItem2.equals(comparableObjectItem1);
      comparableObjectItem0.equals((Object) null);
      comparableObjectItem1.setObject(object0);
      comparableObjectItem1.compareTo(comparableObjectItem2);
      ComparableObjectItem comparableObjectItem3 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem2);
      comparableObjectItem0.equals(comparableObjectItem3);
      comparableObjectItem3.getObject();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null, (String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      comparableObjectItem1.compareTo(comparableObjectItem0);
      comparableObjectItem0.setObject(comparableObjectItem1);
      comparableObjectItem0.setObject(comparableObjectItem1);
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      ComparableObjectItem comparableObjectItem3 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      ComparableObjectItem comparableObjectItem4 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem3);
      comparableObjectItem0.clone();
      Object object0 = new Object();
      comparableObjectItem4.equals(object0);
      comparableObjectItem1.setObject(comparableObjectItem4);
      Object object1 = new Object();
      comparableObjectItem2.setObject(object1);
      comparableObjectItem0.getComparable();
      Object object2 = comparableObjectItem3.clone();
      Object object3 = new Object();
      comparableObjectItem0.compareTo(object3);
      Comparable comparable1 = comparableObjectItem0.getComparable();
      comparableObjectItem4.getObject();
      Object object4 = comparableObjectItem1.clone();
      comparableObjectItem3.hashCode();
      comparableObjectItem2.compareTo(object4);
      comparableObjectItem0.clone();
      ComparableObjectItem comparableObjectItem5 = new ComparableObjectItem(comparableObjectItem2, comparable1);
      Object object5 = null;
      comparableObjectItem5.equals((Object) null);
      comparableObjectItem4.equals(comparableObjectItem5);
      comparableObjectItem2.compareTo(object1);
      comparableObjectItem1.equals(object2);
      comparableObjectItem1.compareTo(object0);
      comparableObjectItem3.equals(object5);
      comparableObjectItem4.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      comparableObjectItem0.setObject((Object) null);
      Object object0 = comparableObjectItem0.clone();
      Object object1 = comparableObjectItem0.clone();
      comparableObjectItem0.hashCode();
      comparableObjectItem0.setObject(object1);
      assertNotSame(comparableObjectItem0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparable0, comparableObjectItem0);
      Object object0 = new Object();
      comparableObjectItem1.equals(object0);
      boolean boolean0 = comparableObjectItem1.equals(comparableObjectItem0);
      assertFalse(boolean0);
      
      comparableObjectItem1.hashCode();
      comparableObjectItem1.getObject();
      comparableObjectItem1.setObject(comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComparableObjectItem comparableObjectItem0 = null;
      try {
        comparableObjectItem0 = new ComparableObjectItem((Comparable) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1847);
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer0);
      comparableObjectItem0.hashCode();
      Object object0 = comparableObjectItem0.clone();
      Integer.remainderUnsigned(0, 142);
      comparableObjectItem0.clone();
      Integer.toUnsignedLong(0);
      comparableObjectItem0.setObject(">F");
      comparableObjectItem0.hashCode();
      Integer integer1 = new Integer(1847);
      comparableObjectItem0.clone();
      Integer.max(0, 0);
      Integer.max(1847, 1931);
      Integer.getInteger("");
      Integer.getInteger("fu}+8HTr.RTth|l(nD", integer1);
      comparableObjectItem0.getObject();
      comparableObjectItem0.getObject();
      comparableObjectItem0.setObject(">F");
      Comparable comparable0 = comparableObjectItem0.getComparable();
      Object object1 = comparableObjectItem0.clone();
      comparableObjectItem0.equals(">F");
      comparableObjectItem0.getObject();
      comparableObjectItem0.setObject(comparable0);
      comparableObjectItem0.clone();
      Integer integer2 = new Integer((-1));
      comparableObjectItem0.compareTo(integer2);
      comparableObjectItem0.compareTo(object0);
      comparableObjectItem0.getObject();
      assertFalse(comparableObjectItem0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2087));
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer0);
      comparableObjectItem0.compareTo(integer0);
      Object object0 = new Object();
      Object object1 = new Object();
      comparableObjectItem0.compareTo(object1);
      Integer.compareUnsigned(2155, 2155);
      comparableObjectItem0.compareTo(object0);
      comparableObjectItem0.getObject();
      comparableObjectItem0.getComparable();
      Integer integer1 = new Integer(0);
      comparableObjectItem0.equals(integer1);
      try { 
        Integer.valueOf("'BI9^oVN<PdACn;", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      boolean boolean0 = comparableObjectItem0.equals(comparableObjectItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(452);
      Integer.toUnsignedLong(452);
      Integer.max(452, 3349);
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer0);
      Integer.toUnsignedString(452);
      comparableObjectItem0.clone();
      Comparable comparable0 = comparableObjectItem0.getComparable();
      Object object0 = comparableObjectItem0.getObject();
      Object object1 = comparableObjectItem0.clone();
      Object object2 = comparableObjectItem0.clone();
      comparableObjectItem0.setObject(object0);
      Object object3 = new Object();
      boolean boolean0 = comparableObjectItem0.equals(object3);
      comparableObjectItem0.compareTo(comparable0);
      comparableObjectItem0.getObject();
      Integer integer1 = new Integer(452);
      Integer.getInteger("452", integer1);
      boolean boolean1 = comparableObjectItem0.equals(object2);
      assertFalse(boolean1 == boolean0);
      
      comparableObjectItem0.getObject();
      Object object4 = new Object();
      int int0 = comparableObjectItem0.compareTo(object4);
      assertEquals(1, int0);
      
      comparableObjectItem0.getComparable();
      assertTrue(comparableObjectItem0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      Object object0 = new Object();
      Integer.toUnsignedLong(0);
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, object0);
      Object object1 = comparableObjectItem0.clone();
      comparableObjectItem0.equals(integer0);
      comparableObjectItem0.getObject();
      comparableObjectItem0.setObject(object1);
      Integer integer1 = new Integer(1);
      Integer.toUnsignedString((-592));
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, integer1);
      // Undeclared exception!
      try { 
        comparableObjectItem0.compareTo(comparableObjectItem1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.ComparableObjectItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      Integer.getInteger("5}R:t,&uA.");
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer0);
      comparableObjectItem0.clone();
      comparableObjectItem0.equals(integer0);
      Integer.sum(1, 0);
      comparableObjectItem0.getComparable();
      comparableObjectItem0.hashCode();
      comparableObjectItem0.equals((Object) null);
      Comparable comparable0 = comparableObjectItem0.getComparable();
      assertSame(integer0, comparable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      Integer integer1 = new Integer(0);
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer1);
      int int0 = comparableObjectItem0.compareTo(integer0);
      assertEquals(1, int0);
      
      comparableObjectItem0.getObject();
      comparableObjectItem0.setObject(integer0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(integer0, integer0);
      Object object0 = comparableObjectItem0.getObject();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<String> comparable0 = null;
      ComparableObjectItem comparableObjectItem0 = null;
      try {
        comparableObjectItem0 = new ComparableObjectItem((Comparable) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem("x[Z", (Object) null);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem("x[Z", (Object) null);
      comparableObjectItem1.setObject((Object) null);
      comparableObjectItem1.hashCode();
      boolean boolean0 = comparableObjectItem0.equals(comparableObjectItem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<ComparableObjectItem> comparable0 = (Comparable<ComparableObjectItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(3351).when(comparable0).compareTo(any(org.jfree.data.ComparableObjectItem.class));
      doReturn("U*F'~/Y5h3").when(comparable0).toString();
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      comparableObjectItem0.setObject(object0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      Object object1 = comparableObjectItem1.clone();
      comparableObjectItem1.equals(comparableObjectItem2);
      int int0 = comparableObjectItem0.compareTo(object0);
      assertEquals(1, int0);
      
      comparableObjectItem1.compareTo(comparableObjectItem1);
      boolean boolean0 = comparableObjectItem2.equals(comparableObjectItem1);
      assertFalse(boolean0);
      
      comparableObjectItem0.setObject(comparableObjectItem2);
      comparableObjectItem0.getObject();
      Object object2 = new Object();
      comparableObjectItem0.getComparable();
      comparableObjectItem0.setObject(comparableObjectItem1);
      int int1 = comparableObjectItem2.hashCode();
      assertTrue(comparableObjectItem1.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(int1 == int0);
  }
}
